Index: .gradle/8.10.2/dependencies-accessors/4cca7aba00e9e100339e6421b5bd840347d77de8/sources/org/gradle/accessors/dm/LibrariesForLibs.java
===================================================================
diff --git a/.gradle/8.10.2/dependencies-accessors/4cca7aba00e9e100339e6421b5bd840347d77de8/sources/org/gradle/accessors/dm/LibrariesForLibs.java b/.gradle/8.10.2/dependencies-accessors/4cca7aba00e9e100339e6421b5bd840347d77de8/sources/org/gradle/accessors/dm/LibrariesForLibs.java
deleted file mode 100644
--- a/.gradle/8.10.2/dependencies-accessors/4cca7aba00e9e100339e6421b5bd840347d77de8/sources/org/gradle/accessors/dm/LibrariesForLibs.java	(revision ae433e1ac5ebbc2f83dc0bb022436f30fb4e6989)
+++ /dev/null	(revision ae433e1ac5ebbc2f83dc0bb022436f30fb4e6989)
@@ -1,459 +0,0 @@
-package org.gradle.accessors.dm;
-
-import org.gradle.api.NonNullApi;
-import org.gradle.api.artifacts.MinimalExternalModuleDependency;
-import org.gradle.plugin.use.PluginDependency;
-import org.gradle.api.artifacts.ExternalModuleDependencyBundle;
-import org.gradle.api.artifacts.MutableVersionConstraint;
-import org.gradle.api.provider.Provider;
-import org.gradle.api.model.ObjectFactory;
-import org.gradle.api.provider.ProviderFactory;
-import org.gradle.api.internal.catalog.AbstractExternalDependencyFactory;
-import org.gradle.api.internal.catalog.DefaultVersionCatalog;
-import java.util.Map;
-import org.gradle.api.internal.attributes.ImmutableAttributesFactory;
-import org.gradle.api.internal.artifacts.dsl.CapabilityNotationParser;
-import javax.inject.Inject;
-
-/**
- * A catalog of dependencies accessible via the {@code libs} extension.
- */
-@NonNullApi
-public class LibrariesForLibs extends AbstractExternalDependencyFactory {
-
-    private final AbstractExternalDependencyFactory owner = this;
-    private final CredentialsLibraryAccessors laccForCredentialsLibraryAccessors = new CredentialsLibraryAccessors(owner);
-    private final EspressoLibraryAccessors laccForEspressoLibraryAccessors = new EspressoLibraryAccessors(owner);
-    private final ExtLibraryAccessors laccForExtLibraryAccessors = new ExtLibraryAccessors(owner);
-    private final GlideLibraryAccessors laccForGlideLibraryAccessors = new GlideLibraryAccessors(owner);
-    private final VersionAccessors vaccForVersionAccessors = new VersionAccessors(providers, config);
-    private final BundleAccessors baccForBundleAccessors = new BundleAccessors(objects, providers, config, attributesFactory, capabilityNotationParser);
-    private final PluginAccessors paccForPluginAccessors = new PluginAccessors(providers, config);
-
-    @Inject
-    public LibrariesForLibs(DefaultVersionCatalog config, ProviderFactory providers, ObjectFactory objects, ImmutableAttributesFactory attributesFactory, CapabilityNotationParser capabilityNotationParser) {
-        super(config, providers, objects, attributesFactory, capabilityNotationParser);
-    }
-
-    /**
-     * Dependency provider for <b>activity</b> with <b>androidx.activity:activity</b> coordinates and
-     * with version reference <b>activity</b>
-     * <p>
-     * This dependency was declared in catalog libs.versions.toml
-     */
-    public Provider<MinimalExternalModuleDependency> getActivity() {
-        return create("activity");
-    }
-
-    /**
-     * Dependency provider for <b>appcompat</b> with <b>androidx.appcompat:appcompat</b> coordinates and
-     * with version reference <b>appcompat</b>
-     * <p>
-     * This dependency was declared in catalog libs.versions.toml
-     */
-    public Provider<MinimalExternalModuleDependency> getAppcompat() {
-        return create("appcompat");
-    }
-
-    /**
-     * Dependency provider for <b>circleimageview</b> with <b>de.hdodenhof:circleimageview</b> coordinates and
-     * with version reference <b>circleimageview</b>
-     * <p>
-     * This dependency was declared in catalog libs.versions.toml
-     */
-    public Provider<MinimalExternalModuleDependency> getCircleimageview() {
-        return create("circleimageview");
-    }
-
-    /**
-     * Dependency provider for <b>constraintlayout</b> with <b>androidx.constraintlayout:constraintlayout</b> coordinates and
-     * with version reference <b>constraintlayout</b>
-     * <p>
-     * This dependency was declared in catalog libs.versions.toml
-     */
-    public Provider<MinimalExternalModuleDependency> getConstraintlayout() {
-        return create("constraintlayout");
-    }
-
-    /**
-     * Dependency provider for <b>googleid</b> with <b>com.google.android.libraries.identity.googleid:googleid</b> coordinates and
-     * with version reference <b>credentials</b>
-     * <p>
-     * This dependency was declared in catalog libs.versions.toml
-     */
-    public Provider<MinimalExternalModuleDependency> getGoogleid() {
-        return create("googleid");
-    }
-
-    /**
-     * Dependency provider for <b>junit</b> with <b>junit:junit</b> coordinates and
-     * with version reference <b>junit</b>
-     * <p>
-     * This dependency was declared in catalog libs.versions.toml
-     */
-    public Provider<MinimalExternalModuleDependency> getJunit() {
-        return create("junit");
-    }
-
-    /**
-     * Dependency provider for <b>material</b> with <b>com.google.android.material:material</b> coordinates and
-     * with version reference <b>material</b>
-     * <p>
-     * This dependency was declared in catalog libs.versions.toml
-     */
-    public Provider<MinimalExternalModuleDependency> getMaterial() {
-        return create("material");
-    }
-
-    /**
-     * Dependency provider for <b>picasso</b> with <b>com.squareup.picasso:picasso</b> coordinates and
-     * with version reference <b>picasso</b>
-     * <p>
-     * This dependency was declared in catalog libs.versions.toml
-     */
-    public Provider<MinimalExternalModuleDependency> getPicasso() {
-        return create("picasso");
-    }
-
-    /**
-     * Dependency provider for <b>volley</b> with <b>com.android.volley:volley</b> coordinates and
-     * with version reference <b>volley</b>
-     * <p>
-     * This dependency was declared in catalog libs.versions.toml
-     */
-    public Provider<MinimalExternalModuleDependency> getVolley() {
-        return create("volley");
-    }
-
-    /**
-     * Group of libraries at <b>credentials</b>
-     */
-    public CredentialsLibraryAccessors getCredentials() {
-        return laccForCredentialsLibraryAccessors;
-    }
-
-    /**
-     * Group of libraries at <b>espresso</b>
-     */
-    public EspressoLibraryAccessors getEspresso() {
-        return laccForEspressoLibraryAccessors;
-    }
-
-    /**
-     * Group of libraries at <b>ext</b>
-     */
-    public ExtLibraryAccessors getExt() {
-        return laccForExtLibraryAccessors;
-    }
-
-    /**
-     * Group of libraries at <b>glide</b>
-     */
-    public GlideLibraryAccessors getGlide() {
-        return laccForGlideLibraryAccessors;
-    }
-
-    /**
-     * Group of versions at <b>versions</b>
-     */
-    public VersionAccessors getVersions() {
-        return vaccForVersionAccessors;
-    }
-
-    /**
-     * Group of bundles at <b>bundles</b>
-     */
-    public BundleAccessors getBundles() {
-        return baccForBundleAccessors;
-    }
-
-    /**
-     * Group of plugins at <b>plugins</b>
-     */
-    public PluginAccessors getPlugins() {
-        return paccForPluginAccessors;
-    }
-
-    public static class CredentialsLibraryAccessors extends SubDependencyFactory implements DependencyNotationSupplier {
-        private final CredentialsPlayLibraryAccessors laccForCredentialsPlayLibraryAccessors = new CredentialsPlayLibraryAccessors(owner);
-
-        public CredentialsLibraryAccessors(AbstractExternalDependencyFactory owner) { super(owner); }
-
-        /**
-         * Dependency provider for <b>credentials</b> with <b>androidx.credentials:credentials</b> coordinates and
-         * with version reference <b>credentials</b>
-         * <p>
-         * This dependency was declared in catalog libs.versions.toml
-         */
-        public Provider<MinimalExternalModuleDependency> asProvider() {
-            return create("credentials");
-        }
-
-        /**
-         * Group of libraries at <b>credentials.play</b>
-         */
-        public CredentialsPlayLibraryAccessors getPlay() {
-            return laccForCredentialsPlayLibraryAccessors;
-        }
-
-    }
-
-    public static class CredentialsPlayLibraryAccessors extends SubDependencyFactory {
-        private final CredentialsPlayServicesLibraryAccessors laccForCredentialsPlayServicesLibraryAccessors = new CredentialsPlayServicesLibraryAccessors(owner);
-
-        public CredentialsPlayLibraryAccessors(AbstractExternalDependencyFactory owner) { super(owner); }
-
-        /**
-         * Group of libraries at <b>credentials.play.services</b>
-         */
-        public CredentialsPlayServicesLibraryAccessors getServices() {
-            return laccForCredentialsPlayServicesLibraryAccessors;
-        }
-
-    }
-
-    public static class CredentialsPlayServicesLibraryAccessors extends SubDependencyFactory {
-
-        public CredentialsPlayServicesLibraryAccessors(AbstractExternalDependencyFactory owner) { super(owner); }
-
-        /**
-         * Dependency provider for <b>auth</b> with <b>androidx.credentials:credentials-play-services-auth</b> coordinates and
-         * with version reference <b>credentials</b>
-         * <p>
-         * This dependency was declared in catalog libs.versions.toml
-         */
-        public Provider<MinimalExternalModuleDependency> getAuth() {
-            return create("credentials.play.services.auth");
-        }
-
-    }
-
-    public static class EspressoLibraryAccessors extends SubDependencyFactory {
-
-        public EspressoLibraryAccessors(AbstractExternalDependencyFactory owner) { super(owner); }
-
-        /**
-         * Dependency provider for <b>core</b> with <b>androidx.test.espresso:espresso-core</b> coordinates and
-         * with version reference <b>espressoCore</b>
-         * <p>
-         * This dependency was declared in catalog libs.versions.toml
-         */
-        public Provider<MinimalExternalModuleDependency> getCore() {
-            return create("espresso.core");
-        }
-
-    }
-
-    public static class ExtLibraryAccessors extends SubDependencyFactory {
-
-        public ExtLibraryAccessors(AbstractExternalDependencyFactory owner) { super(owner); }
-
-        /**
-         * Dependency provider for <b>junit</b> with <b>androidx.test.ext:junit</b> coordinates and
-         * with version reference <b>junitVersion</b>
-         * <p>
-         * This dependency was declared in catalog libs.versions.toml
-         */
-        public Provider<MinimalExternalModuleDependency> getJunit() {
-            return create("ext.junit");
-        }
-
-    }
-
-    public static class GlideLibraryAccessors extends SubDependencyFactory implements DependencyNotationSupplier {
-
-        public GlideLibraryAccessors(AbstractExternalDependencyFactory owner) { super(owner); }
-
-        /**
-         * Dependency provider for <b>glide</b> with <b>com.github.bumptech.glide:glide</b> coordinates and
-         * with version <b>4.16.0</b>
-         * <p>
-         * This dependency was declared in catalog libs.versions.toml
-         */
-        public Provider<MinimalExternalModuleDependency> asProvider() {
-            return create("glide");
-        }
-
-        /**
-         * Dependency provider for <b>compiler</b> with <b>com.github.bumptech.glide:compiler</b> coordinates and
-         * with version <b>4.16.0</b>
-         * <p>
-         * This dependency was declared in catalog libs.versions.toml
-         */
-        public Provider<MinimalExternalModuleDependency> getCompiler() {
-            return create("glide.compiler");
-        }
-
-        /**
-         * Dependency provider for <b>okhttp3</b> with <b>com.github.bumptech.glide:okhttp3-integration</b> coordinates and
-         * with version <b>4.16.0</b>
-         * <p>
-         * This dependency was declared in catalog libs.versions.toml
-         */
-        public Provider<MinimalExternalModuleDependency> getOkhttp3() {
-            return create("glide.okhttp3");
-        }
-
-    }
-
-    public static class VersionAccessors extends VersionFactory  {
-
-        public VersionAccessors(ProviderFactory providers, DefaultVersionCatalog config) { super(providers, config); }
-
-        /**
-         * Version alias <b>activity</b> with value <b>1.10.1</b>
-         * <p>
-         * If the version is a rich version and cannot be represented as a
-         * single version string, an empty string is returned.
-         * <p>
-         * This version was declared in catalog libs.versions.toml
-         */
-        public Provider<String> getActivity() { return getVersion("activity"); }
-
-        /**
-         * Version alias <b>agp</b> with value <b>8.8.0</b>
-         * <p>
-         * If the version is a rich version and cannot be represented as a
-         * single version string, an empty string is returned.
-         * <p>
-         * This version was declared in catalog libs.versions.toml
-         */
-        public Provider<String> getAgp() { return getVersion("agp"); }
-
-        /**
-         * Version alias <b>appcompat</b> with value <b>1.7.0</b>
-         * <p>
-         * If the version is a rich version and cannot be represented as a
-         * single version string, an empty string is returned.
-         * <p>
-         * This version was declared in catalog libs.versions.toml
-         */
-        public Provider<String> getAppcompat() { return getVersion("appcompat"); }
-
-        /**
-         * Version alias <b>circleimageview</b> with value <b>3.0.0</b>
-         * <p>
-         * If the version is a rich version and cannot be represented as a
-         * single version string, an empty string is returned.
-         * <p>
-         * This version was declared in catalog libs.versions.toml
-         */
-        public Provider<String> getCircleimageview() { return getVersion("circleimageview"); }
-
-        /**
-         * Version alias <b>constraintlayout</b> with value <b>2.2.1</b>
-         * <p>
-         * If the version is a rich version and cannot be represented as a
-         * single version string, an empty string is returned.
-         * <p>
-         * This version was declared in catalog libs.versions.toml
-         */
-        public Provider<String> getConstraintlayout() { return getVersion("constraintlayout"); }
-
-        /**
-         * Version alias <b>credentials</b> with value <b>1.5.0</b>
-         * <p>
-         * If the version is a rich version and cannot be represented as a
-         * single version string, an empty string is returned.
-         * <p>
-         * This version was declared in catalog libs.versions.toml
-         */
-        public Provider<String> getCredentials() { return getVersion("credentials"); }
-
-        /**
-         * Version alias <b>espressoCore</b> with value <b>3.6.1</b>
-         * <p>
-         * If the version is a rich version and cannot be represented as a
-         * single version string, an empty string is returned.
-         * <p>
-         * This version was declared in catalog libs.versions.toml
-         */
-        public Provider<String> getEspressoCore() { return getVersion("espressoCore"); }
-
-        /**
-         * Version alias <b>junit</b> with value <b>4.13.2</b>
-         * <p>
-         * If the version is a rich version and cannot be represented as a
-         * single version string, an empty string is returned.
-         * <p>
-         * This version was declared in catalog libs.versions.toml
-         */
-        public Provider<String> getJunit() { return getVersion("junit"); }
-
-        /**
-         * Version alias <b>junitVersion</b> with value <b>1.2.1</b>
-         * <p>
-         * If the version is a rich version and cannot be represented as a
-         * single version string, an empty string is returned.
-         * <p>
-         * This version was declared in catalog libs.versions.toml
-         */
-        public Provider<String> getJunitVersion() { return getVersion("junitVersion"); }
-
-        /**
-         * Version alias <b>material</b> with value <b>1.12.0</b>
-         * <p>
-         * If the version is a rich version and cannot be represented as a
-         * single version string, an empty string is returned.
-         * <p>
-         * This version was declared in catalog libs.versions.toml
-         */
-        public Provider<String> getMaterial() { return getVersion("material"); }
-
-        /**
-         * Version alias <b>picasso</b> with value <b>2.5.2</b>
-         * <p>
-         * If the version is a rich version and cannot be represented as a
-         * single version string, an empty string is returned.
-         * <p>
-         * This version was declared in catalog libs.versions.toml
-         */
-        public Provider<String> getPicasso() { return getVersion("picasso"); }
-
-        /**
-         * Version alias <b>volley</b> with value <b>1.2.1</b>
-         * <p>
-         * If the version is a rich version and cannot be represented as a
-         * single version string, an empty string is returned.
-         * <p>
-         * This version was declared in catalog libs.versions.toml
-         */
-        public Provider<String> getVolley() { return getVersion("volley"); }
-
-    }
-
-    public static class BundleAccessors extends BundleFactory {
-
-        public BundleAccessors(ObjectFactory objects, ProviderFactory providers, DefaultVersionCatalog config, ImmutableAttributesFactory attributesFactory, CapabilityNotationParser capabilityNotationParser) { super(objects, providers, config, attributesFactory, capabilityNotationParser); }
-
-    }
-
-    public static class PluginAccessors extends PluginFactory {
-        private final AndroidPluginAccessors paccForAndroidPluginAccessors = new AndroidPluginAccessors(providers, config);
-
-        public PluginAccessors(ProviderFactory providers, DefaultVersionCatalog config) { super(providers, config); }
-
-        /**
-         * Group of plugins at <b>plugins.android</b>
-         */
-        public AndroidPluginAccessors getAndroid() {
-            return paccForAndroidPluginAccessors;
-        }
-
-    }
-
-    public static class AndroidPluginAccessors extends PluginFactory {
-
-        public AndroidPluginAccessors(ProviderFactory providers, DefaultVersionCatalog config) { super(providers, config); }
-
-        /**
-         * Plugin provider for <b>android.application</b> with plugin id <b>com.android.application</b> and
-         * with version reference <b>agp</b>
-         * <p>
-         * This plugin was declared in catalog libs.versions.toml
-         */
-        public Provider<PluginDependency> getApplication() { return createPlugin("android.application"); }
-
-    }
-
-}
Index: .gradle/8.10.2/dependencies-accessors/8ea2114bee6cc59b9af714a226215d7d883d4b0d/sources/org/gradle/accessors/dm/LibrariesForLibsInPluginsBlock.java
===================================================================
diff --git a/.gradle/8.10.2/dependencies-accessors/8ea2114bee6cc59b9af714a226215d7d883d4b0d/sources/org/gradle/accessors/dm/LibrariesForLibsInPluginsBlock.java b/.gradle/8.10.2/dependencies-accessors/8ea2114bee6cc59b9af714a226215d7d883d4b0d/sources/org/gradle/accessors/dm/LibrariesForLibsInPluginsBlock.java
deleted file mode 100644
--- a/.gradle/8.10.2/dependencies-accessors/8ea2114bee6cc59b9af714a226215d7d883d4b0d/sources/org/gradle/accessors/dm/LibrariesForLibsInPluginsBlock.java	(revision ae433e1ac5ebbc2f83dc0bb022436f30fb4e6989)
+++ /dev/null	(revision ae433e1ac5ebbc2f83dc0bb022436f30fb4e6989)
@@ -1,589 +0,0 @@
-package org.gradle.accessors.dm;
-
-import org.gradle.api.NonNullApi;
-import org.gradle.api.artifacts.MinimalExternalModuleDependency;
-import org.gradle.plugin.use.PluginDependency;
-import org.gradle.api.artifacts.ExternalModuleDependencyBundle;
-import org.gradle.api.artifacts.MutableVersionConstraint;
-import org.gradle.api.provider.Provider;
-import org.gradle.api.model.ObjectFactory;
-import org.gradle.api.provider.ProviderFactory;
-import org.gradle.api.internal.catalog.AbstractExternalDependencyFactory;
-import org.gradle.api.internal.catalog.DefaultVersionCatalog;
-import java.util.Map;
-import org.gradle.api.internal.attributes.ImmutableAttributesFactory;
-import org.gradle.api.internal.artifacts.dsl.CapabilityNotationParser;
-import javax.inject.Inject;
-
-/**
- * A catalog of dependencies accessible via the {@code libs} extension.
- */
-@NonNullApi
-public class LibrariesForLibsInPluginsBlock extends AbstractExternalDependencyFactory {
-
-    private final AbstractExternalDependencyFactory owner = this;
-    private final CredentialsLibraryAccessors laccForCredentialsLibraryAccessors = new CredentialsLibraryAccessors(owner);
-    private final EspressoLibraryAccessors laccForEspressoLibraryAccessors = new EspressoLibraryAccessors(owner);
-    private final ExtLibraryAccessors laccForExtLibraryAccessors = new ExtLibraryAccessors(owner);
-    private final GlideLibraryAccessors laccForGlideLibraryAccessors = new GlideLibraryAccessors(owner);
-    private final VersionAccessors vaccForVersionAccessors = new VersionAccessors(providers, config);
-    private final BundleAccessors baccForBundleAccessors = new BundleAccessors(objects, providers, config, attributesFactory, capabilityNotationParser);
-    private final PluginAccessors paccForPluginAccessors = new PluginAccessors(providers, config);
-
-    @Inject
-    public LibrariesForLibsInPluginsBlock(DefaultVersionCatalog config, ProviderFactory providers, ObjectFactory objects, ImmutableAttributesFactory attributesFactory, CapabilityNotationParser capabilityNotationParser) {
-        super(config, providers, objects, attributesFactory, capabilityNotationParser);
-    }
-
-    /**
-     * Dependency provider for <b>activity</b> with <b>androidx.activity:activity</b> coordinates and
-     * with version reference <b>activity</b>
-     * <p>
-     * This dependency was declared in catalog libs.versions.toml
-     *
-     * @deprecated Will be removed in Gradle 9.0.
-     */
-    @Deprecated
-    public Provider<MinimalExternalModuleDependency> getActivity() {
-        org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
-        return create("activity");
-    }
-
-    /**
-     * Dependency provider for <b>appcompat</b> with <b>androidx.appcompat:appcompat</b> coordinates and
-     * with version reference <b>appcompat</b>
-     * <p>
-     * This dependency was declared in catalog libs.versions.toml
-     *
-     * @deprecated Will be removed in Gradle 9.0.
-     */
-    @Deprecated
-    public Provider<MinimalExternalModuleDependency> getAppcompat() {
-        org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
-        return create("appcompat");
-    }
-
-    /**
-     * Dependency provider for <b>circleimageview</b> with <b>de.hdodenhof:circleimageview</b> coordinates and
-     * with version reference <b>circleimageview</b>
-     * <p>
-     * This dependency was declared in catalog libs.versions.toml
-     *
-     * @deprecated Will be removed in Gradle 9.0.
-     */
-    @Deprecated
-    public Provider<MinimalExternalModuleDependency> getCircleimageview() {
-        org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
-        return create("circleimageview");
-    }
-
-    /**
-     * Dependency provider for <b>constraintlayout</b> with <b>androidx.constraintlayout:constraintlayout</b> coordinates and
-     * with version reference <b>constraintlayout</b>
-     * <p>
-     * This dependency was declared in catalog libs.versions.toml
-     *
-     * @deprecated Will be removed in Gradle 9.0.
-     */
-    @Deprecated
-    public Provider<MinimalExternalModuleDependency> getConstraintlayout() {
-        org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
-        return create("constraintlayout");
-    }
-
-    /**
-     * Dependency provider for <b>googleid</b> with <b>com.google.android.libraries.identity.googleid:googleid</b> coordinates and
-     * with version reference <b>googleid</b>
-     * <p>
-     * This dependency was declared in catalog libs.versions.toml
-     *
-     * @deprecated Will be removed in Gradle 9.0.
-     */
-    @Deprecated
-    public Provider<MinimalExternalModuleDependency> getGoogleid() {
-        org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
-        return create("googleid");
-    }
-
-    /**
-     * Dependency provider for <b>junit</b> with <b>junit:junit</b> coordinates and
-     * with version reference <b>junit</b>
-     * <p>
-     * This dependency was declared in catalog libs.versions.toml
-     *
-     * @deprecated Will be removed in Gradle 9.0.
-     */
-    @Deprecated
-    public Provider<MinimalExternalModuleDependency> getJunit() {
-        org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
-        return create("junit");
-    }
-
-    /**
-     * Dependency provider for <b>material</b> with <b>com.google.android.material:material</b> coordinates and
-     * with version reference <b>material</b>
-     * <p>
-     * This dependency was declared in catalog libs.versions.toml
-     *
-     * @deprecated Will be removed in Gradle 9.0.
-     */
-    @Deprecated
-    public Provider<MinimalExternalModuleDependency> getMaterial() {
-        org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
-        return create("material");
-    }
-
-    /**
-     * Dependency provider for <b>picasso</b> with <b>com.squareup.picasso:picasso</b> coordinates and
-     * with version reference <b>picasso</b>
-     * <p>
-     * This dependency was declared in catalog libs.versions.toml
-     *
-     * @deprecated Will be removed in Gradle 9.0.
-     */
-    @Deprecated
-    public Provider<MinimalExternalModuleDependency> getPicasso() {
-        org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
-        return create("picasso");
-    }
-
-    /**
-     * Dependency provider for <b>volley</b> with <b>com.android.volley:volley</b> coordinates and
-     * with version reference <b>volley</b>
-     * <p>
-     * This dependency was declared in catalog libs.versions.toml
-     *
-     * @deprecated Will be removed in Gradle 9.0.
-     */
-    @Deprecated
-    public Provider<MinimalExternalModuleDependency> getVolley() {
-        org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
-        return create("volley");
-    }
-
-    /**
-     * Group of libraries at <b>credentials</b>
-     *
-     * @deprecated Will be removed in Gradle 9.0.
-     */
-    @Deprecated
-    public CredentialsLibraryAccessors getCredentials() {
-        org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
-        return laccForCredentialsLibraryAccessors;
-    }
-
-    /**
-     * Group of libraries at <b>espresso</b>
-     *
-     * @deprecated Will be removed in Gradle 9.0.
-     */
-    @Deprecated
-    public EspressoLibraryAccessors getEspresso() {
-        org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
-        return laccForEspressoLibraryAccessors;
-    }
-
-    /**
-     * Group of libraries at <b>ext</b>
-     *
-     * @deprecated Will be removed in Gradle 9.0.
-     */
-    @Deprecated
-    public ExtLibraryAccessors getExt() {
-        org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
-        return laccForExtLibraryAccessors;
-    }
-
-    /**
-     * Group of libraries at <b>glide</b>
-     *
-     * @deprecated Will be removed in Gradle 9.0.
-     */
-    @Deprecated
-    public GlideLibraryAccessors getGlide() {
-        org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
-        return laccForGlideLibraryAccessors;
-    }
-
-    /**
-     * Group of versions at <b>versions</b>
-     */
-    public VersionAccessors getVersions() {
-        return vaccForVersionAccessors;
-    }
-
-    /**
-     * Group of bundles at <b>bundles</b>
-     *
-     * @deprecated Will be removed in Gradle 9.0.
-     */
-    @Deprecated
-    public BundleAccessors getBundles() {
-        org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
-        return baccForBundleAccessors;
-    }
-
-    /**
-     * Group of plugins at <b>plugins</b>
-     */
-    public PluginAccessors getPlugins() {
-        return paccForPluginAccessors;
-    }
-
-    /**
-     * @deprecated Will be removed in Gradle 9.0.
-     */
-    @Deprecated
-    public static class CredentialsLibraryAccessors extends SubDependencyFactory implements DependencyNotationSupplier {
-        private final CredentialsPlayLibraryAccessors laccForCredentialsPlayLibraryAccessors = new CredentialsPlayLibraryAccessors(owner);
-
-        public CredentialsLibraryAccessors(AbstractExternalDependencyFactory owner) { super(owner); }
-
-        /**
-         * Dependency provider for <b>credentials</b> with <b>androidx.credentials:credentials</b> coordinates and
-         * with version reference <b>credentials</b>
-         * <p>
-         * This dependency was declared in catalog libs.versions.toml
-         *
-         * @deprecated Will be removed in Gradle 9.0.
-         */
-        @Deprecated
-        public Provider<MinimalExternalModuleDependency> asProvider() {
-            org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
-            return create("credentials");
-        }
-
-        /**
-         * Group of libraries at <b>credentials.play</b>
-         *
-         * @deprecated Will be removed in Gradle 9.0.
-         */
-        @Deprecated
-        public CredentialsPlayLibraryAccessors getPlay() {
-            org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
-            return laccForCredentialsPlayLibraryAccessors;
-        }
-
-    }
-
-    /**
-     * @deprecated Will be removed in Gradle 9.0.
-     */
-    @Deprecated
-    public static class CredentialsPlayLibraryAccessors extends SubDependencyFactory {
-        private final CredentialsPlayServicesLibraryAccessors laccForCredentialsPlayServicesLibraryAccessors = new CredentialsPlayServicesLibraryAccessors(owner);
-
-        public CredentialsPlayLibraryAccessors(AbstractExternalDependencyFactory owner) { super(owner); }
-
-        /**
-         * Group of libraries at <b>credentials.play.services</b>
-         *
-         * @deprecated Will be removed in Gradle 9.0.
-         */
-        @Deprecated
-        public CredentialsPlayServicesLibraryAccessors getServices() {
-            org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
-            return laccForCredentialsPlayServicesLibraryAccessors;
-        }
-
-    }
-
-    /**
-     * @deprecated Will be removed in Gradle 9.0.
-     */
-    @Deprecated
-    public static class CredentialsPlayServicesLibraryAccessors extends SubDependencyFactory {
-
-        public CredentialsPlayServicesLibraryAccessors(AbstractExternalDependencyFactory owner) { super(owner); }
-
-        /**
-         * Dependency provider for <b>auth</b> with <b>androidx.credentials:credentials-play-services-auth</b> coordinates and
-         * with version reference <b>credentials</b>
-         * <p>
-         * This dependency was declared in catalog libs.versions.toml
-         *
-         * @deprecated Will be removed in Gradle 9.0.
-         */
-        @Deprecated
-        public Provider<MinimalExternalModuleDependency> getAuth() {
-            org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
-            return create("credentials.play.services.auth");
-        }
-
-    }
-
-    /**
-     * @deprecated Will be removed in Gradle 9.0.
-     */
-    @Deprecated
-    public static class EspressoLibraryAccessors extends SubDependencyFactory {
-
-        public EspressoLibraryAccessors(AbstractExternalDependencyFactory owner) { super(owner); }
-
-        /**
-         * Dependency provider for <b>core</b> with <b>androidx.test.espresso:espresso-core</b> coordinates and
-         * with version reference <b>espressoCore</b>
-         * <p>
-         * This dependency was declared in catalog libs.versions.toml
-         *
-         * @deprecated Will be removed in Gradle 9.0.
-         */
-        @Deprecated
-        public Provider<MinimalExternalModuleDependency> getCore() {
-            org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
-            return create("espresso.core");
-        }
-
-    }
-
-    /**
-     * @deprecated Will be removed in Gradle 9.0.
-     */
-    @Deprecated
-    public static class ExtLibraryAccessors extends SubDependencyFactory {
-
-        public ExtLibraryAccessors(AbstractExternalDependencyFactory owner) { super(owner); }
-
-        /**
-         * Dependency provider for <b>junit</b> with <b>androidx.test.ext:junit</b> coordinates and
-         * with version reference <b>junitVersion</b>
-         * <p>
-         * This dependency was declared in catalog libs.versions.toml
-         *
-         * @deprecated Will be removed in Gradle 9.0.
-         */
-        @Deprecated
-        public Provider<MinimalExternalModuleDependency> getJunit() {
-            org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
-            return create("ext.junit");
-        }
-
-    }
-
-    /**
-     * @deprecated Will be removed in Gradle 9.0.
-     */
-    @Deprecated
-    public static class GlideLibraryAccessors extends SubDependencyFactory implements DependencyNotationSupplier {
-
-        public GlideLibraryAccessors(AbstractExternalDependencyFactory owner) { super(owner); }
-
-        /**
-         * Dependency provider for <b>glide</b> with <b>com.github.bumptech.glide:glide</b> coordinates and
-         * with version <b>4.16.0</b>
-         * <p>
-         * This dependency was declared in catalog libs.versions.toml
-         *
-         * @deprecated Will be removed in Gradle 9.0.
-         */
-        @Deprecated
-        public Provider<MinimalExternalModuleDependency> asProvider() {
-            org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
-            return create("glide");
-        }
-
-        /**
-         * Dependency provider for <b>compiler</b> with <b>com.github.bumptech.glide:compiler</b> coordinates and
-         * with version <b>4.16.0</b>
-         * <p>
-         * This dependency was declared in catalog libs.versions.toml
-         *
-         * @deprecated Will be removed in Gradle 9.0.
-         */
-        @Deprecated
-        public Provider<MinimalExternalModuleDependency> getCompiler() {
-            org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
-            return create("glide.compiler");
-        }
-
-        /**
-         * Dependency provider for <b>okhttp3</b> with <b>com.github.bumptech.glide:okhttp3-integration</b> coordinates and
-         * with version <b>4.16.0</b>
-         * <p>
-         * This dependency was declared in catalog libs.versions.toml
-         *
-         * @deprecated Will be removed in Gradle 9.0.
-         */
-        @Deprecated
-        public Provider<MinimalExternalModuleDependency> getOkhttp3() {
-            org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
-            return create("glide.okhttp3");
-        }
-
-    }
-
-    public static class VersionAccessors extends VersionFactory  {
-
-        public VersionAccessors(ProviderFactory providers, DefaultVersionCatalog config) { super(providers, config); }
-
-        /**
-         * Version alias <b>activity</b> with value <b>1.10.1</b>
-         * <p>
-         * If the version is a rich version and cannot be represented as a
-         * single version string, an empty string is returned.
-         * <p>
-         * This version was declared in catalog libs.versions.toml
-         */
-        public Provider<String> getActivity() { return getVersion("activity"); }
-
-        /**
-         * Version alias <b>agp</b> with value <b>8.8.0</b>
-         * <p>
-         * If the version is a rich version and cannot be represented as a
-         * single version string, an empty string is returned.
-         * <p>
-         * This version was declared in catalog libs.versions.toml
-         */
-        public Provider<String> getAgp() { return getVersion("agp"); }
-
-        /**
-         * Version alias <b>appcompat</b> with value <b>1.7.0</b>
-         * <p>
-         * If the version is a rich version and cannot be represented as a
-         * single version string, an empty string is returned.
-         * <p>
-         * This version was declared in catalog libs.versions.toml
-         */
-        public Provider<String> getAppcompat() { return getVersion("appcompat"); }
-
-        /**
-         * Version alias <b>circleimageview</b> with value <b>3.0.0</b>
-         * <p>
-         * If the version is a rich version and cannot be represented as a
-         * single version string, an empty string is returned.
-         * <p>
-         * This version was declared in catalog libs.versions.toml
-         */
-        public Provider<String> getCircleimageview() { return getVersion("circleimageview"); }
-
-        /**
-         * Version alias <b>constraintlayout</b> with value <b>2.2.1</b>
-         * <p>
-         * If the version is a rich version and cannot be represented as a
-         * single version string, an empty string is returned.
-         * <p>
-         * This version was declared in catalog libs.versions.toml
-         */
-        public Provider<String> getConstraintlayout() { return getVersion("constraintlayout"); }
-
-        /**
-         * Version alias <b>credentials</b> with value <b>1.5.0</b>
-         * <p>
-         * If the version is a rich version and cannot be represented as a
-         * single version string, an empty string is returned.
-         * <p>
-         * This version was declared in catalog libs.versions.toml
-         */
-        public Provider<String> getCredentials() { return getVersion("credentials"); }
-
-        /**
-         * Version alias <b>espressoCore</b> with value <b>3.6.1</b>
-         * <p>
-         * If the version is a rich version and cannot be represented as a
-         * single version string, an empty string is returned.
-         * <p>
-         * This version was declared in catalog libs.versions.toml
-         */
-        public Provider<String> getEspressoCore() { return getVersion("espressoCore"); }
-
-        /**
-         * Version alias <b>googleid</b> with value <b>1.5.0</b>
-         * <p>
-         * If the version is a rich version and cannot be represented as a
-         * single version string, an empty string is returned.
-         * <p>
-         * This version was declared in catalog libs.versions.toml
-         */
-        public Provider<String> getGoogleid() { return getVersion("googleid"); }
-
-        /**
-         * Version alias <b>junit</b> with value <b>4.13.2</b>
-         * <p>
-         * If the version is a rich version and cannot be represented as a
-         * single version string, an empty string is returned.
-         * <p>
-         * This version was declared in catalog libs.versions.toml
-         */
-        public Provider<String> getJunit() { return getVersion("junit"); }
-
-        /**
-         * Version alias <b>junitVersion</b> with value <b>1.2.1</b>
-         * <p>
-         * If the version is a rich version and cannot be represented as a
-         * single version string, an empty string is returned.
-         * <p>
-         * This version was declared in catalog libs.versions.toml
-         */
-        public Provider<String> getJunitVersion() { return getVersion("junitVersion"); }
-
-        /**
-         * Version alias <b>material</b> with value <b>1.12.0</b>
-         * <p>
-         * If the version is a rich version and cannot be represented as a
-         * single version string, an empty string is returned.
-         * <p>
-         * This version was declared in catalog libs.versions.toml
-         */
-        public Provider<String> getMaterial() { return getVersion("material"); }
-
-        /**
-         * Version alias <b>picasso</b> with value <b>2.5.2</b>
-         * <p>
-         * If the version is a rich version and cannot be represented as a
-         * single version string, an empty string is returned.
-         * <p>
-         * This version was declared in catalog libs.versions.toml
-         */
-        public Provider<String> getPicasso() { return getVersion("picasso"); }
-
-        /**
-         * Version alias <b>volley</b> with value <b>1.2.1</b>
-         * <p>
-         * If the version is a rich version and cannot be represented as a
-         * single version string, an empty string is returned.
-         * <p>
-         * This version was declared in catalog libs.versions.toml
-         */
-        public Provider<String> getVolley() { return getVersion("volley"); }
-
-    }
-
-    /**
-     * @deprecated Will be removed in Gradle 9.0.
-     */
-    @Deprecated
-    public static class BundleAccessors extends BundleFactory {
-
-        public BundleAccessors(ObjectFactory objects, ProviderFactory providers, DefaultVersionCatalog config, ImmutableAttributesFactory attributesFactory, CapabilityNotationParser capabilityNotationParser) { super(objects, providers, config, attributesFactory, capabilityNotationParser); }
-
-    }
-
-    public static class PluginAccessors extends PluginFactory {
-        private final AndroidPluginAccessors paccForAndroidPluginAccessors = new AndroidPluginAccessors(providers, config);
-
-        public PluginAccessors(ProviderFactory providers, DefaultVersionCatalog config) { super(providers, config); }
-
-        /**
-         * Group of plugins at <b>plugins.android</b>
-         */
-        public AndroidPluginAccessors getAndroid() {
-            return paccForAndroidPluginAccessors;
-        }
-
-    }
-
-    public static class AndroidPluginAccessors extends PluginFactory {
-
-        public AndroidPluginAccessors(ProviderFactory providers, DefaultVersionCatalog config) { super(providers, config); }
-
-        /**
-         * Plugin provider for <b>android.application</b> with plugin id <b>com.android.application</b> and
-         * with version reference <b>agp</b>
-         * <p>
-         * This plugin was declared in catalog libs.versions.toml
-         */
-        public Provider<PluginDependency> getApplication() { return createPlugin("android.application"); }
-
-    }
-
-}
Index: .gradle/8.10.2/dependencies-accessors/b612d7925e67c933357fef2f4788dd32ba4e87fc/sources/org/gradle/accessors/dm/LibrariesForLibsInPluginsBlock.java
===================================================================
diff --git a/.gradle/8.10.2/dependencies-accessors/b612d7925e67c933357fef2f4788dd32ba4e87fc/sources/org/gradle/accessors/dm/LibrariesForLibsInPluginsBlock.java b/.gradle/8.10.2/dependencies-accessors/b612d7925e67c933357fef2f4788dd32ba4e87fc/sources/org/gradle/accessors/dm/LibrariesForLibsInPluginsBlock.java
deleted file mode 100644
--- a/.gradle/8.10.2/dependencies-accessors/b612d7925e67c933357fef2f4788dd32ba4e87fc/sources/org/gradle/accessors/dm/LibrariesForLibsInPluginsBlock.java	(revision ae433e1ac5ebbc2f83dc0bb022436f30fb4e6989)
+++ /dev/null	(revision ae433e1ac5ebbc2f83dc0bb022436f30fb4e6989)
@@ -1,529 +0,0 @@
-package org.gradle.accessors.dm;
-
-import org.gradle.api.NonNullApi;
-import org.gradle.api.artifacts.MinimalExternalModuleDependency;
-import org.gradle.plugin.use.PluginDependency;
-import org.gradle.api.artifacts.ExternalModuleDependencyBundle;
-import org.gradle.api.artifacts.MutableVersionConstraint;
-import org.gradle.api.provider.Provider;
-import org.gradle.api.model.ObjectFactory;
-import org.gradle.api.provider.ProviderFactory;
-import org.gradle.api.internal.catalog.AbstractExternalDependencyFactory;
-import org.gradle.api.internal.catalog.DefaultVersionCatalog;
-import java.util.Map;
-import org.gradle.api.internal.attributes.ImmutableAttributesFactory;
-import org.gradle.api.internal.artifacts.dsl.CapabilityNotationParser;
-import javax.inject.Inject;
-
-/**
- * A catalog of dependencies accessible via the {@code libs} extension.
- */
-@NonNullApi
-public class LibrariesForLibsInPluginsBlock extends AbstractExternalDependencyFactory {
-
-    private final AbstractExternalDependencyFactory owner = this;
-    private final EspressoLibraryAccessors laccForEspressoLibraryAccessors = new EspressoLibraryAccessors(owner);
-    private final ExtLibraryAccessors laccForExtLibraryAccessors = new ExtLibraryAccessors(owner);
-    private final GlideLibraryAccessors laccForGlideLibraryAccessors = new GlideLibraryAccessors(owner);
-    private final PlayLibraryAccessors laccForPlayLibraryAccessors = new PlayLibraryAccessors(owner);
-    private final VersionAccessors vaccForVersionAccessors = new VersionAccessors(providers, config);
-    private final BundleAccessors baccForBundleAccessors = new BundleAccessors(objects, providers, config, attributesFactory, capabilityNotationParser);
-    private final PluginAccessors paccForPluginAccessors = new PluginAccessors(providers, config);
-
-    @Inject
-    public LibrariesForLibsInPluginsBlock(DefaultVersionCatalog config, ProviderFactory providers, ObjectFactory objects, ImmutableAttributesFactory attributesFactory, CapabilityNotationParser capabilityNotationParser) {
-        super(config, providers, objects, attributesFactory, capabilityNotationParser);
-    }
-
-    /**
-     * Dependency provider for <b>activity</b> with <b>androidx.activity:activity</b> coordinates and
-     * with version reference <b>activity</b>
-     * <p>
-     * This dependency was declared in catalog libs.versions.toml
-     *
-     * @deprecated Will be removed in Gradle 9.0.
-     */
-    @Deprecated
-    public Provider<MinimalExternalModuleDependency> getActivity() {
-        org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
-        return create("activity");
-    }
-
-    /**
-     * Dependency provider for <b>appcompat</b> with <b>androidx.appcompat:appcompat</b> coordinates and
-     * with version reference <b>appcompat</b>
-     * <p>
-     * This dependency was declared in catalog libs.versions.toml
-     *
-     * @deprecated Will be removed in Gradle 9.0.
-     */
-    @Deprecated
-    public Provider<MinimalExternalModuleDependency> getAppcompat() {
-        org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
-        return create("appcompat");
-    }
-
-    /**
-     * Dependency provider for <b>circleimageview</b> with <b>de.hdodenhof:circleimageview</b> coordinates and
-     * with version reference <b>circleimageview</b>
-     * <p>
-     * This dependency was declared in catalog libs.versions.toml
-     *
-     * @deprecated Will be removed in Gradle 9.0.
-     */
-    @Deprecated
-    public Provider<MinimalExternalModuleDependency> getCircleimageview() {
-        org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
-        return create("circleimageview");
-    }
-
-    /**
-     * Dependency provider for <b>constraintlayout</b> with <b>androidx.constraintlayout:constraintlayout</b> coordinates and
-     * with version reference <b>constraintlayout</b>
-     * <p>
-     * This dependency was declared in catalog libs.versions.toml
-     *
-     * @deprecated Will be removed in Gradle 9.0.
-     */
-    @Deprecated
-    public Provider<MinimalExternalModuleDependency> getConstraintlayout() {
-        org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
-        return create("constraintlayout");
-    }
-
-    /**
-     * Dependency provider for <b>junit</b> with <b>junit:junit</b> coordinates and
-     * with version reference <b>junit</b>
-     * <p>
-     * This dependency was declared in catalog libs.versions.toml
-     *
-     * @deprecated Will be removed in Gradle 9.0.
-     */
-    @Deprecated
-    public Provider<MinimalExternalModuleDependency> getJunit() {
-        org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
-        return create("junit");
-    }
-
-    /**
-     * Dependency provider for <b>material</b> with <b>com.google.android.material:material</b> coordinates and
-     * with version reference <b>material</b>
-     * <p>
-     * This dependency was declared in catalog libs.versions.toml
-     *
-     * @deprecated Will be removed in Gradle 9.0.
-     */
-    @Deprecated
-    public Provider<MinimalExternalModuleDependency> getMaterial() {
-        org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
-        return create("material");
-    }
-
-    /**
-     * Dependency provider for <b>picasso</b> with <b>com.squareup.picasso:picasso</b> coordinates and
-     * with version reference <b>picasso</b>
-     * <p>
-     * This dependency was declared in catalog libs.versions.toml
-     *
-     * @deprecated Will be removed in Gradle 9.0.
-     */
-    @Deprecated
-    public Provider<MinimalExternalModuleDependency> getPicasso() {
-        org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
-        return create("picasso");
-    }
-
-    /**
-     * Dependency provider for <b>volley</b> with <b>com.android.volley:volley</b> coordinates and
-     * with version reference <b>volley</b>
-     * <p>
-     * This dependency was declared in catalog libs.versions.toml
-     *
-     * @deprecated Will be removed in Gradle 9.0.
-     */
-    @Deprecated
-    public Provider<MinimalExternalModuleDependency> getVolley() {
-        org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
-        return create("volley");
-    }
-
-    /**
-     * Group of libraries at <b>espresso</b>
-     *
-     * @deprecated Will be removed in Gradle 9.0.
-     */
-    @Deprecated
-    public EspressoLibraryAccessors getEspresso() {
-        org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
-        return laccForEspressoLibraryAccessors;
-    }
-
-    /**
-     * Group of libraries at <b>ext</b>
-     *
-     * @deprecated Will be removed in Gradle 9.0.
-     */
-    @Deprecated
-    public ExtLibraryAccessors getExt() {
-        org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
-        return laccForExtLibraryAccessors;
-    }
-
-    /**
-     * Group of libraries at <b>glide</b>
-     *
-     * @deprecated Will be removed in Gradle 9.0.
-     */
-    @Deprecated
-    public GlideLibraryAccessors getGlide() {
-        org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
-        return laccForGlideLibraryAccessors;
-    }
-
-    /**
-     * Group of libraries at <b>play</b>
-     *
-     * @deprecated Will be removed in Gradle 9.0.
-     */
-    @Deprecated
-    public PlayLibraryAccessors getPlay() {
-        org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
-        return laccForPlayLibraryAccessors;
-    }
-
-    /**
-     * Group of versions at <b>versions</b>
-     */
-    public VersionAccessors getVersions() {
-        return vaccForVersionAccessors;
-    }
-
-    /**
-     * Group of bundles at <b>bundles</b>
-     *
-     * @deprecated Will be removed in Gradle 9.0.
-     */
-    @Deprecated
-    public BundleAccessors getBundles() {
-        org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
-        return baccForBundleAccessors;
-    }
-
-    /**
-     * Group of plugins at <b>plugins</b>
-     */
-    public PluginAccessors getPlugins() {
-        return paccForPluginAccessors;
-    }
-
-    /**
-     * @deprecated Will be removed in Gradle 9.0.
-     */
-    @Deprecated
-    public static class EspressoLibraryAccessors extends SubDependencyFactory {
-
-        public EspressoLibraryAccessors(AbstractExternalDependencyFactory owner) { super(owner); }
-
-        /**
-         * Dependency provider for <b>core</b> with <b>androidx.test.espresso:espresso-core</b> coordinates and
-         * with version reference <b>espressoCore</b>
-         * <p>
-         * This dependency was declared in catalog libs.versions.toml
-         *
-         * @deprecated Will be removed in Gradle 9.0.
-         */
-        @Deprecated
-        public Provider<MinimalExternalModuleDependency> getCore() {
-            org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
-            return create("espresso.core");
-        }
-
-    }
-
-    /**
-     * @deprecated Will be removed in Gradle 9.0.
-     */
-    @Deprecated
-    public static class ExtLibraryAccessors extends SubDependencyFactory {
-
-        public ExtLibraryAccessors(AbstractExternalDependencyFactory owner) { super(owner); }
-
-        /**
-         * Dependency provider for <b>junit</b> with <b>androidx.test.ext:junit</b> coordinates and
-         * with version reference <b>junitVersion</b>
-         * <p>
-         * This dependency was declared in catalog libs.versions.toml
-         *
-         * @deprecated Will be removed in Gradle 9.0.
-         */
-        @Deprecated
-        public Provider<MinimalExternalModuleDependency> getJunit() {
-            org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
-            return create("ext.junit");
-        }
-
-    }
-
-    /**
-     * @deprecated Will be removed in Gradle 9.0.
-     */
-    @Deprecated
-    public static class GlideLibraryAccessors extends SubDependencyFactory implements DependencyNotationSupplier {
-
-        public GlideLibraryAccessors(AbstractExternalDependencyFactory owner) { super(owner); }
-
-        /**
-         * Dependency provider for <b>glide</b> with <b>com.github.bumptech.glide:glide</b> coordinates and
-         * with version <b>4.16.0</b>
-         * <p>
-         * This dependency was declared in catalog libs.versions.toml
-         *
-         * @deprecated Will be removed in Gradle 9.0.
-         */
-        @Deprecated
-        public Provider<MinimalExternalModuleDependency> asProvider() {
-            org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
-            return create("glide");
-        }
-
-        /**
-         * Dependency provider for <b>compiler</b> with <b>com.github.bumptech.glide:compiler</b> coordinates and
-         * with version <b>4.16.0</b>
-         * <p>
-         * This dependency was declared in catalog libs.versions.toml
-         *
-         * @deprecated Will be removed in Gradle 9.0.
-         */
-        @Deprecated
-        public Provider<MinimalExternalModuleDependency> getCompiler() {
-            org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
-            return create("glide.compiler");
-        }
-
-        /**
-         * Dependency provider for <b>okhttp3</b> with <b>com.github.bumptech.glide:okhttp3-integration</b> coordinates and
-         * with version <b>4.16.0</b>
-         * <p>
-         * This dependency was declared in catalog libs.versions.toml
-         *
-         * @deprecated Will be removed in Gradle 9.0.
-         */
-        @Deprecated
-        public Provider<MinimalExternalModuleDependency> getOkhttp3() {
-            org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
-            return create("glide.okhttp3");
-        }
-
-    }
-
-    /**
-     * @deprecated Will be removed in Gradle 9.0.
-     */
-    @Deprecated
-    public static class PlayLibraryAccessors extends SubDependencyFactory {
-        private final PlayServicesLibraryAccessors laccForPlayServicesLibraryAccessors = new PlayServicesLibraryAccessors(owner);
-
-        public PlayLibraryAccessors(AbstractExternalDependencyFactory owner) { super(owner); }
-
-        /**
-         * Group of libraries at <b>play.services</b>
-         *
-         * @deprecated Will be removed in Gradle 9.0.
-         */
-        @Deprecated
-        public PlayServicesLibraryAccessors getServices() {
-            org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
-            return laccForPlayServicesLibraryAccessors;
-        }
-
-    }
-
-    /**
-     * @deprecated Will be removed in Gradle 9.0.
-     */
-    @Deprecated
-    public static class PlayServicesLibraryAccessors extends SubDependencyFactory {
-
-        public PlayServicesLibraryAccessors(AbstractExternalDependencyFactory owner) { super(owner); }
-
-        /**
-         * Dependency provider for <b>auth</b> with <b>com.google.android.gms:play-services-auth</b> coordinates and
-         * with version reference <b>playServicesAuth</b>
-         * <p>
-         * This dependency was declared in catalog libs.versions.toml
-         *
-         * @deprecated Will be removed in Gradle 9.0.
-         */
-        @Deprecated
-        public Provider<MinimalExternalModuleDependency> getAuth() {
-            org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
-            return create("play.services.auth");
-        }
-
-    }
-
-    public static class VersionAccessors extends VersionFactory  {
-
-        public VersionAccessors(ProviderFactory providers, DefaultVersionCatalog config) { super(providers, config); }
-
-        /**
-         * Version alias <b>activity</b> with value <b>1.10.1</b>
-         * <p>
-         * If the version is a rich version and cannot be represented as a
-         * single version string, an empty string is returned.
-         * <p>
-         * This version was declared in catalog libs.versions.toml
-         */
-        public Provider<String> getActivity() { return getVersion("activity"); }
-
-        /**
-         * Version alias <b>agp</b> with value <b>8.8.0</b>
-         * <p>
-         * If the version is a rich version and cannot be represented as a
-         * single version string, an empty string is returned.
-         * <p>
-         * This version was declared in catalog libs.versions.toml
-         */
-        public Provider<String> getAgp() { return getVersion("agp"); }
-
-        /**
-         * Version alias <b>appcompat</b> with value <b>1.7.0</b>
-         * <p>
-         * If the version is a rich version and cannot be represented as a
-         * single version string, an empty string is returned.
-         * <p>
-         * This version was declared in catalog libs.versions.toml
-         */
-        public Provider<String> getAppcompat() { return getVersion("appcompat"); }
-
-        /**
-         * Version alias <b>circleimageview</b> with value <b>3.0.0</b>
-         * <p>
-         * If the version is a rich version and cannot be represented as a
-         * single version string, an empty string is returned.
-         * <p>
-         * This version was declared in catalog libs.versions.toml
-         */
-        public Provider<String> getCircleimageview() { return getVersion("circleimageview"); }
-
-        /**
-         * Version alias <b>constraintlayout</b> with value <b>2.2.1</b>
-         * <p>
-         * If the version is a rich version and cannot be represented as a
-         * single version string, an empty string is returned.
-         * <p>
-         * This version was declared in catalog libs.versions.toml
-         */
-        public Provider<String> getConstraintlayout() { return getVersion("constraintlayout"); }
-
-        /**
-         * Version alias <b>espressoCore</b> with value <b>3.6.1</b>
-         * <p>
-         * If the version is a rich version and cannot be represented as a
-         * single version string, an empty string is returned.
-         * <p>
-         * This version was declared in catalog libs.versions.toml
-         */
-        public Provider<String> getEspressoCore() { return getVersion("espressoCore"); }
-
-        /**
-         * Version alias <b>junit</b> with value <b>4.13.2</b>
-         * <p>
-         * If the version is a rich version and cannot be represented as a
-         * single version string, an empty string is returned.
-         * <p>
-         * This version was declared in catalog libs.versions.toml
-         */
-        public Provider<String> getJunit() { return getVersion("junit"); }
-
-        /**
-         * Version alias <b>junitVersion</b> with value <b>1.2.1</b>
-         * <p>
-         * If the version is a rich version and cannot be represented as a
-         * single version string, an empty string is returned.
-         * <p>
-         * This version was declared in catalog libs.versions.toml
-         */
-        public Provider<String> getJunitVersion() { return getVersion("junitVersion"); }
-
-        /**
-         * Version alias <b>material</b> with value <b>1.12.0</b>
-         * <p>
-         * If the version is a rich version and cannot be represented as a
-         * single version string, an empty string is returned.
-         * <p>
-         * This version was declared in catalog libs.versions.toml
-         */
-        public Provider<String> getMaterial() { return getVersion("material"); }
-
-        /**
-         * Version alias <b>picasso</b> with value <b>2.5.2</b>
-         * <p>
-         * If the version is a rich version and cannot be represented as a
-         * single version string, an empty string is returned.
-         * <p>
-         * This version was declared in catalog libs.versions.toml
-         */
-        public Provider<String> getPicasso() { return getVersion("picasso"); }
-
-        /**
-         * Version alias <b>playServicesAuth</b> with value <b>21.3.0</b>
-         * <p>
-         * If the version is a rich version and cannot be represented as a
-         * single version string, an empty string is returned.
-         * <p>
-         * This version was declared in catalog libs.versions.toml
-         */
-        public Provider<String> getPlayServicesAuth() { return getVersion("playServicesAuth"); }
-
-        /**
-         * Version alias <b>volley</b> with value <b>1.2.1</b>
-         * <p>
-         * If the version is a rich version and cannot be represented as a
-         * single version string, an empty string is returned.
-         * <p>
-         * This version was declared in catalog libs.versions.toml
-         */
-        public Provider<String> getVolley() { return getVersion("volley"); }
-
-    }
-
-    /**
-     * @deprecated Will be removed in Gradle 9.0.
-     */
-    @Deprecated
-    public static class BundleAccessors extends BundleFactory {
-
-        public BundleAccessors(ObjectFactory objects, ProviderFactory providers, DefaultVersionCatalog config, ImmutableAttributesFactory attributesFactory, CapabilityNotationParser capabilityNotationParser) { super(objects, providers, config, attributesFactory, capabilityNotationParser); }
-
-    }
-
-    public static class PluginAccessors extends PluginFactory {
-        private final AndroidPluginAccessors paccForAndroidPluginAccessors = new AndroidPluginAccessors(providers, config);
-
-        public PluginAccessors(ProviderFactory providers, DefaultVersionCatalog config) { super(providers, config); }
-
-        /**
-         * Group of plugins at <b>plugins.android</b>
-         */
-        public AndroidPluginAccessors getAndroid() {
-            return paccForAndroidPluginAccessors;
-        }
-
-    }
-
-    public static class AndroidPluginAccessors extends PluginFactory {
-
-        public AndroidPluginAccessors(ProviderFactory providers, DefaultVersionCatalog config) { super(providers, config); }
-
-        /**
-         * Plugin provider for <b>android.application</b> with plugin id <b>com.android.application</b> and
-         * with version reference <b>agp</b>
-         * <p>
-         * This plugin was declared in catalog libs.versions.toml
-         */
-        public Provider<PluginDependency> getApplication() { return createPlugin("android.application"); }
-
-    }
-
-}
Index: .gradle/8.10.2/dependencies-accessors/c5cd8a2fe1b1083f448ddccb7325cc4239c7f698/metadata.bin
===================================================================
diff --git a/.gradle/8.10.2/dependencies-accessors/c5cd8a2fe1b1083f448ddccb7325cc4239c7f698/metadata.bin b/.gradle/8.10.2/dependencies-accessors/c5cd8a2fe1b1083f448ddccb7325cc4239c7f698/metadata.bin
deleted file mode 100644
--- a/.gradle/8.10.2/dependencies-accessors/c5cd8a2fe1b1083f448ddccb7325cc4239c7f698/metadata.bin	(revision ae433e1ac5ebbc2f83dc0bb022436f30fb4e6989)
+++ /dev/null	(revision ae433e1ac5ebbc2f83dc0bb022436f30fb4e6989)
@@ -1,1 +0,0 @@
-�bfm7ashdvbfexlnn5kn34air6y���]~~�ϩ%�&��classes�(��;� �?Z�QI�sourcesX�Y�/b��k�e�
\ No newline at end of file
Index: .gradle/8.10.2/dependencies-accessors/b612d7925e67c933357fef2f4788dd32ba4e87fc/metadata.bin
===================================================================
diff --git a/.gradle/8.10.2/dependencies-accessors/b612d7925e67c933357fef2f4788dd32ba4e87fc/metadata.bin b/.gradle/8.10.2/dependencies-accessors/b612d7925e67c933357fef2f4788dd32ba4e87fc/metadata.bin
deleted file mode 100644
--- a/.gradle/8.10.2/dependencies-accessors/b612d7925e67c933357fef2f4788dd32ba4e87fc/metadata.bin	(revision ae433e1ac5ebbc2f83dc0bb022436f30fb4e6989)
+++ /dev/null	(revision ae433e1ac5ebbc2f83dc0bb022436f30fb4e6989)
@@ -1,1 +0,0 @@
-�ss4nqervdfa4zemw34ns2hgx34��J�ƙ0�֬�3����classes��փ��>�NzE���sources���?�3�J�^s�7z
\ No newline at end of file
Index: .gradle/8.10.2/dependencies-accessors/8ea2114bee6cc59b9af714a226215d7d883d4b0d/sources/org/gradle/accessors/dm/LibrariesForLibs.java
===================================================================
diff --git a/.gradle/8.10.2/dependencies-accessors/8ea2114bee6cc59b9af714a226215d7d883d4b0d/sources/org/gradle/accessors/dm/LibrariesForLibs.java b/.gradle/8.10.2/dependencies-accessors/8ea2114bee6cc59b9af714a226215d7d883d4b0d/sources/org/gradle/accessors/dm/LibrariesForLibs.java
deleted file mode 100644
--- a/.gradle/8.10.2/dependencies-accessors/8ea2114bee6cc59b9af714a226215d7d883d4b0d/sources/org/gradle/accessors/dm/LibrariesForLibs.java	(revision ae433e1ac5ebbc2f83dc0bb022436f30fb4e6989)
+++ /dev/null	(revision ae433e1ac5ebbc2f83dc0bb022436f30fb4e6989)
@@ -1,469 +0,0 @@
-package org.gradle.accessors.dm;
-
-import org.gradle.api.NonNullApi;
-import org.gradle.api.artifacts.MinimalExternalModuleDependency;
-import org.gradle.plugin.use.PluginDependency;
-import org.gradle.api.artifacts.ExternalModuleDependencyBundle;
-import org.gradle.api.artifacts.MutableVersionConstraint;
-import org.gradle.api.provider.Provider;
-import org.gradle.api.model.ObjectFactory;
-import org.gradle.api.provider.ProviderFactory;
-import org.gradle.api.internal.catalog.AbstractExternalDependencyFactory;
-import org.gradle.api.internal.catalog.DefaultVersionCatalog;
-import java.util.Map;
-import org.gradle.api.internal.attributes.ImmutableAttributesFactory;
-import org.gradle.api.internal.artifacts.dsl.CapabilityNotationParser;
-import javax.inject.Inject;
-
-/**
- * A catalog of dependencies accessible via the {@code libs} extension.
- */
-@NonNullApi
-public class LibrariesForLibs extends AbstractExternalDependencyFactory {
-
-    private final AbstractExternalDependencyFactory owner = this;
-    private final CredentialsLibraryAccessors laccForCredentialsLibraryAccessors = new CredentialsLibraryAccessors(owner);
-    private final EspressoLibraryAccessors laccForEspressoLibraryAccessors = new EspressoLibraryAccessors(owner);
-    private final ExtLibraryAccessors laccForExtLibraryAccessors = new ExtLibraryAccessors(owner);
-    private final GlideLibraryAccessors laccForGlideLibraryAccessors = new GlideLibraryAccessors(owner);
-    private final VersionAccessors vaccForVersionAccessors = new VersionAccessors(providers, config);
-    private final BundleAccessors baccForBundleAccessors = new BundleAccessors(objects, providers, config, attributesFactory, capabilityNotationParser);
-    private final PluginAccessors paccForPluginAccessors = new PluginAccessors(providers, config);
-
-    @Inject
-    public LibrariesForLibs(DefaultVersionCatalog config, ProviderFactory providers, ObjectFactory objects, ImmutableAttributesFactory attributesFactory, CapabilityNotationParser capabilityNotationParser) {
-        super(config, providers, objects, attributesFactory, capabilityNotationParser);
-    }
-
-    /**
-     * Dependency provider for <b>activity</b> with <b>androidx.activity:activity</b> coordinates and
-     * with version reference <b>activity</b>
-     * <p>
-     * This dependency was declared in catalog libs.versions.toml
-     */
-    public Provider<MinimalExternalModuleDependency> getActivity() {
-        return create("activity");
-    }
-
-    /**
-     * Dependency provider for <b>appcompat</b> with <b>androidx.appcompat:appcompat</b> coordinates and
-     * with version reference <b>appcompat</b>
-     * <p>
-     * This dependency was declared in catalog libs.versions.toml
-     */
-    public Provider<MinimalExternalModuleDependency> getAppcompat() {
-        return create("appcompat");
-    }
-
-    /**
-     * Dependency provider for <b>circleimageview</b> with <b>de.hdodenhof:circleimageview</b> coordinates and
-     * with version reference <b>circleimageview</b>
-     * <p>
-     * This dependency was declared in catalog libs.versions.toml
-     */
-    public Provider<MinimalExternalModuleDependency> getCircleimageview() {
-        return create("circleimageview");
-    }
-
-    /**
-     * Dependency provider for <b>constraintlayout</b> with <b>androidx.constraintlayout:constraintlayout</b> coordinates and
-     * with version reference <b>constraintlayout</b>
-     * <p>
-     * This dependency was declared in catalog libs.versions.toml
-     */
-    public Provider<MinimalExternalModuleDependency> getConstraintlayout() {
-        return create("constraintlayout");
-    }
-
-    /**
-     * Dependency provider for <b>googleid</b> with <b>com.google.android.libraries.identity.googleid:googleid</b> coordinates and
-     * with version reference <b>googleid</b>
-     * <p>
-     * This dependency was declared in catalog libs.versions.toml
-     */
-    public Provider<MinimalExternalModuleDependency> getGoogleid() {
-        return create("googleid");
-    }
-
-    /**
-     * Dependency provider for <b>junit</b> with <b>junit:junit</b> coordinates and
-     * with version reference <b>junit</b>
-     * <p>
-     * This dependency was declared in catalog libs.versions.toml
-     */
-    public Provider<MinimalExternalModuleDependency> getJunit() {
-        return create("junit");
-    }
-
-    /**
-     * Dependency provider for <b>material</b> with <b>com.google.android.material:material</b> coordinates and
-     * with version reference <b>material</b>
-     * <p>
-     * This dependency was declared in catalog libs.versions.toml
-     */
-    public Provider<MinimalExternalModuleDependency> getMaterial() {
-        return create("material");
-    }
-
-    /**
-     * Dependency provider for <b>picasso</b> with <b>com.squareup.picasso:picasso</b> coordinates and
-     * with version reference <b>picasso</b>
-     * <p>
-     * This dependency was declared in catalog libs.versions.toml
-     */
-    public Provider<MinimalExternalModuleDependency> getPicasso() {
-        return create("picasso");
-    }
-
-    /**
-     * Dependency provider for <b>volley</b> with <b>com.android.volley:volley</b> coordinates and
-     * with version reference <b>volley</b>
-     * <p>
-     * This dependency was declared in catalog libs.versions.toml
-     */
-    public Provider<MinimalExternalModuleDependency> getVolley() {
-        return create("volley");
-    }
-
-    /**
-     * Group of libraries at <b>credentials</b>
-     */
-    public CredentialsLibraryAccessors getCredentials() {
-        return laccForCredentialsLibraryAccessors;
-    }
-
-    /**
-     * Group of libraries at <b>espresso</b>
-     */
-    public EspressoLibraryAccessors getEspresso() {
-        return laccForEspressoLibraryAccessors;
-    }
-
-    /**
-     * Group of libraries at <b>ext</b>
-     */
-    public ExtLibraryAccessors getExt() {
-        return laccForExtLibraryAccessors;
-    }
-
-    /**
-     * Group of libraries at <b>glide</b>
-     */
-    public GlideLibraryAccessors getGlide() {
-        return laccForGlideLibraryAccessors;
-    }
-
-    /**
-     * Group of versions at <b>versions</b>
-     */
-    public VersionAccessors getVersions() {
-        return vaccForVersionAccessors;
-    }
-
-    /**
-     * Group of bundles at <b>bundles</b>
-     */
-    public BundleAccessors getBundles() {
-        return baccForBundleAccessors;
-    }
-
-    /**
-     * Group of plugins at <b>plugins</b>
-     */
-    public PluginAccessors getPlugins() {
-        return paccForPluginAccessors;
-    }
-
-    public static class CredentialsLibraryAccessors extends SubDependencyFactory implements DependencyNotationSupplier {
-        private final CredentialsPlayLibraryAccessors laccForCredentialsPlayLibraryAccessors = new CredentialsPlayLibraryAccessors(owner);
-
-        public CredentialsLibraryAccessors(AbstractExternalDependencyFactory owner) { super(owner); }
-
-        /**
-         * Dependency provider for <b>credentials</b> with <b>androidx.credentials:credentials</b> coordinates and
-         * with version reference <b>credentials</b>
-         * <p>
-         * This dependency was declared in catalog libs.versions.toml
-         */
-        public Provider<MinimalExternalModuleDependency> asProvider() {
-            return create("credentials");
-        }
-
-        /**
-         * Group of libraries at <b>credentials.play</b>
-         */
-        public CredentialsPlayLibraryAccessors getPlay() {
-            return laccForCredentialsPlayLibraryAccessors;
-        }
-
-    }
-
-    public static class CredentialsPlayLibraryAccessors extends SubDependencyFactory {
-        private final CredentialsPlayServicesLibraryAccessors laccForCredentialsPlayServicesLibraryAccessors = new CredentialsPlayServicesLibraryAccessors(owner);
-
-        public CredentialsPlayLibraryAccessors(AbstractExternalDependencyFactory owner) { super(owner); }
-
-        /**
-         * Group of libraries at <b>credentials.play.services</b>
-         */
-        public CredentialsPlayServicesLibraryAccessors getServices() {
-            return laccForCredentialsPlayServicesLibraryAccessors;
-        }
-
-    }
-
-    public static class CredentialsPlayServicesLibraryAccessors extends SubDependencyFactory {
-
-        public CredentialsPlayServicesLibraryAccessors(AbstractExternalDependencyFactory owner) { super(owner); }
-
-        /**
-         * Dependency provider for <b>auth</b> with <b>androidx.credentials:credentials-play-services-auth</b> coordinates and
-         * with version reference <b>credentials</b>
-         * <p>
-         * This dependency was declared in catalog libs.versions.toml
-         */
-        public Provider<MinimalExternalModuleDependency> getAuth() {
-            return create("credentials.play.services.auth");
-        }
-
-    }
-
-    public static class EspressoLibraryAccessors extends SubDependencyFactory {
-
-        public EspressoLibraryAccessors(AbstractExternalDependencyFactory owner) { super(owner); }
-
-        /**
-         * Dependency provider for <b>core</b> with <b>androidx.test.espresso:espresso-core</b> coordinates and
-         * with version reference <b>espressoCore</b>
-         * <p>
-         * This dependency was declared in catalog libs.versions.toml
-         */
-        public Provider<MinimalExternalModuleDependency> getCore() {
-            return create("espresso.core");
-        }
-
-    }
-
-    public static class ExtLibraryAccessors extends SubDependencyFactory {
-
-        public ExtLibraryAccessors(AbstractExternalDependencyFactory owner) { super(owner); }
-
-        /**
-         * Dependency provider for <b>junit</b> with <b>androidx.test.ext:junit</b> coordinates and
-         * with version reference <b>junitVersion</b>
-         * <p>
-         * This dependency was declared in catalog libs.versions.toml
-         */
-        public Provider<MinimalExternalModuleDependency> getJunit() {
-            return create("ext.junit");
-        }
-
-    }
-
-    public static class GlideLibraryAccessors extends SubDependencyFactory implements DependencyNotationSupplier {
-
-        public GlideLibraryAccessors(AbstractExternalDependencyFactory owner) { super(owner); }
-
-        /**
-         * Dependency provider for <b>glide</b> with <b>com.github.bumptech.glide:glide</b> coordinates and
-         * with version <b>4.16.0</b>
-         * <p>
-         * This dependency was declared in catalog libs.versions.toml
-         */
-        public Provider<MinimalExternalModuleDependency> asProvider() {
-            return create("glide");
-        }
-
-        /**
-         * Dependency provider for <b>compiler</b> with <b>com.github.bumptech.glide:compiler</b> coordinates and
-         * with version <b>4.16.0</b>
-         * <p>
-         * This dependency was declared in catalog libs.versions.toml
-         */
-        public Provider<MinimalExternalModuleDependency> getCompiler() {
-            return create("glide.compiler");
-        }
-
-        /**
-         * Dependency provider for <b>okhttp3</b> with <b>com.github.bumptech.glide:okhttp3-integration</b> coordinates and
-         * with version <b>4.16.0</b>
-         * <p>
-         * This dependency was declared in catalog libs.versions.toml
-         */
-        public Provider<MinimalExternalModuleDependency> getOkhttp3() {
-            return create("glide.okhttp3");
-        }
-
-    }
-
-    public static class VersionAccessors extends VersionFactory  {
-
-        public VersionAccessors(ProviderFactory providers, DefaultVersionCatalog config) { super(providers, config); }
-
-        /**
-         * Version alias <b>activity</b> with value <b>1.10.1</b>
-         * <p>
-         * If the version is a rich version and cannot be represented as a
-         * single version string, an empty string is returned.
-         * <p>
-         * This version was declared in catalog libs.versions.toml
-         */
-        public Provider<String> getActivity() { return getVersion("activity"); }
-
-        /**
-         * Version alias <b>agp</b> with value <b>8.8.0</b>
-         * <p>
-         * If the version is a rich version and cannot be represented as a
-         * single version string, an empty string is returned.
-         * <p>
-         * This version was declared in catalog libs.versions.toml
-         */
-        public Provider<String> getAgp() { return getVersion("agp"); }
-
-        /**
-         * Version alias <b>appcompat</b> with value <b>1.7.0</b>
-         * <p>
-         * If the version is a rich version and cannot be represented as a
-         * single version string, an empty string is returned.
-         * <p>
-         * This version was declared in catalog libs.versions.toml
-         */
-        public Provider<String> getAppcompat() { return getVersion("appcompat"); }
-
-        /**
-         * Version alias <b>circleimageview</b> with value <b>3.0.0</b>
-         * <p>
-         * If the version is a rich version and cannot be represented as a
-         * single version string, an empty string is returned.
-         * <p>
-         * This version was declared in catalog libs.versions.toml
-         */
-        public Provider<String> getCircleimageview() { return getVersion("circleimageview"); }
-
-        /**
-         * Version alias <b>constraintlayout</b> with value <b>2.2.1</b>
-         * <p>
-         * If the version is a rich version and cannot be represented as a
-         * single version string, an empty string is returned.
-         * <p>
-         * This version was declared in catalog libs.versions.toml
-         */
-        public Provider<String> getConstraintlayout() { return getVersion("constraintlayout"); }
-
-        /**
-         * Version alias <b>credentials</b> with value <b>1.5.0</b>
-         * <p>
-         * If the version is a rich version and cannot be represented as a
-         * single version string, an empty string is returned.
-         * <p>
-         * This version was declared in catalog libs.versions.toml
-         */
-        public Provider<String> getCredentials() { return getVersion("credentials"); }
-
-        /**
-         * Version alias <b>espressoCore</b> with value <b>3.6.1</b>
-         * <p>
-         * If the version is a rich version and cannot be represented as a
-         * single version string, an empty string is returned.
-         * <p>
-         * This version was declared in catalog libs.versions.toml
-         */
-        public Provider<String> getEspressoCore() { return getVersion("espressoCore"); }
-
-        /**
-         * Version alias <b>googleid</b> with value <b>1.5.0</b>
-         * <p>
-         * If the version is a rich version and cannot be represented as a
-         * single version string, an empty string is returned.
-         * <p>
-         * This version was declared in catalog libs.versions.toml
-         */
-        public Provider<String> getGoogleid() { return getVersion("googleid"); }
-
-        /**
-         * Version alias <b>junit</b> with value <b>4.13.2</b>
-         * <p>
-         * If the version is a rich version and cannot be represented as a
-         * single version string, an empty string is returned.
-         * <p>
-         * This version was declared in catalog libs.versions.toml
-         */
-        public Provider<String> getJunit() { return getVersion("junit"); }
-
-        /**
-         * Version alias <b>junitVersion</b> with value <b>1.2.1</b>
-         * <p>
-         * If the version is a rich version and cannot be represented as a
-         * single version string, an empty string is returned.
-         * <p>
-         * This version was declared in catalog libs.versions.toml
-         */
-        public Provider<String> getJunitVersion() { return getVersion("junitVersion"); }
-
-        /**
-         * Version alias <b>material</b> with value <b>1.12.0</b>
-         * <p>
-         * If the version is a rich version and cannot be represented as a
-         * single version string, an empty string is returned.
-         * <p>
-         * This version was declared in catalog libs.versions.toml
-         */
-        public Provider<String> getMaterial() { return getVersion("material"); }
-
-        /**
-         * Version alias <b>picasso</b> with value <b>2.5.2</b>
-         * <p>
-         * If the version is a rich version and cannot be represented as a
-         * single version string, an empty string is returned.
-         * <p>
-         * This version was declared in catalog libs.versions.toml
-         */
-        public Provider<String> getPicasso() { return getVersion("picasso"); }
-
-        /**
-         * Version alias <b>volley</b> with value <b>1.2.1</b>
-         * <p>
-         * If the version is a rich version and cannot be represented as a
-         * single version string, an empty string is returned.
-         * <p>
-         * This version was declared in catalog libs.versions.toml
-         */
-        public Provider<String> getVolley() { return getVersion("volley"); }
-
-    }
-
-    public static class BundleAccessors extends BundleFactory {
-
-        public BundleAccessors(ObjectFactory objects, ProviderFactory providers, DefaultVersionCatalog config, ImmutableAttributesFactory attributesFactory, CapabilityNotationParser capabilityNotationParser) { super(objects, providers, config, attributesFactory, capabilityNotationParser); }
-
-    }
-
-    public static class PluginAccessors extends PluginFactory {
-        private final AndroidPluginAccessors paccForAndroidPluginAccessors = new AndroidPluginAccessors(providers, config);
-
-        public PluginAccessors(ProviderFactory providers, DefaultVersionCatalog config) { super(providers, config); }
-
-        /**
-         * Group of plugins at <b>plugins.android</b>
-         */
-        public AndroidPluginAccessors getAndroid() {
-            return paccForAndroidPluginAccessors;
-        }
-
-    }
-
-    public static class AndroidPluginAccessors extends PluginFactory {
-
-        public AndroidPluginAccessors(ProviderFactory providers, DefaultVersionCatalog config) { super(providers, config); }
-
-        /**
-         * Plugin provider for <b>android.application</b> with plugin id <b>com.android.application</b> and
-         * with version reference <b>agp</b>
-         * <p>
-         * This plugin was declared in catalog libs.versions.toml
-         */
-        public Provider<PluginDependency> getApplication() { return createPlugin("android.application"); }
-
-    }
-
-}
Index: .gradle/8.10.2/dependencies-accessors/e5fcb7d79d0dd211eb8566d84565d43d8c6197b9/sources/org/gradle/accessors/dm/LibrariesForLibs.java
===================================================================
diff --git a/.gradle/8.10.2/dependencies-accessors/e5fcb7d79d0dd211eb8566d84565d43d8c6197b9/sources/org/gradle/accessors/dm/LibrariesForLibs.java b/.gradle/8.10.2/dependencies-accessors/e5fcb7d79d0dd211eb8566d84565d43d8c6197b9/sources/org/gradle/accessors/dm/LibrariesForLibs.java
deleted file mode 100644
--- a/.gradle/8.10.2/dependencies-accessors/e5fcb7d79d0dd211eb8566d84565d43d8c6197b9/sources/org/gradle/accessors/dm/LibrariesForLibs.java	(revision ae433e1ac5ebbc2f83dc0bb022436f30fb4e6989)
+++ /dev/null	(revision ae433e1ac5ebbc2f83dc0bb022436f30fb4e6989)
@@ -1,489 +0,0 @@
-package org.gradle.accessors.dm;
-
-import org.gradle.api.NonNullApi;
-import org.gradle.api.artifacts.MinimalExternalModuleDependency;
-import org.gradle.plugin.use.PluginDependency;
-import org.gradle.api.artifacts.ExternalModuleDependencyBundle;
-import org.gradle.api.artifacts.MutableVersionConstraint;
-import org.gradle.api.provider.Provider;
-import org.gradle.api.model.ObjectFactory;
-import org.gradle.api.provider.ProviderFactory;
-import org.gradle.api.internal.catalog.AbstractExternalDependencyFactory;
-import org.gradle.api.internal.catalog.DefaultVersionCatalog;
-import java.util.Map;
-import org.gradle.api.internal.attributes.ImmutableAttributesFactory;
-import org.gradle.api.internal.artifacts.dsl.CapabilityNotationParser;
-import javax.inject.Inject;
-
-/**
- * A catalog of dependencies accessible via the {@code libs} extension.
- */
-@NonNullApi
-public class LibrariesForLibs extends AbstractExternalDependencyFactory {
-
-    private final AbstractExternalDependencyFactory owner = this;
-    private final CredentialsLibraryAccessors laccForCredentialsLibraryAccessors = new CredentialsLibraryAccessors(owner);
-    private final EspressoLibraryAccessors laccForEspressoLibraryAccessors = new EspressoLibraryAccessors(owner);
-    private final ExtLibraryAccessors laccForExtLibraryAccessors = new ExtLibraryAccessors(owner);
-    private final GlideLibraryAccessors laccForGlideLibraryAccessors = new GlideLibraryAccessors(owner);
-    private final VersionAccessors vaccForVersionAccessors = new VersionAccessors(providers, config);
-    private final BundleAccessors baccForBundleAccessors = new BundleAccessors(objects, providers, config, attributesFactory, capabilityNotationParser);
-    private final PluginAccessors paccForPluginAccessors = new PluginAccessors(providers, config);
-
-    @Inject
-    public LibrariesForLibs(DefaultVersionCatalog config, ProviderFactory providers, ObjectFactory objects, ImmutableAttributesFactory attributesFactory, CapabilityNotationParser capabilityNotationParser) {
-        super(config, providers, objects, attributesFactory, capabilityNotationParser);
-    }
-
-    /**
-     * Dependency provider for <b>activity</b> with <b>androidx.activity:activity</b> coordinates and
-     * with version reference <b>activity</b>
-     * <p>
-     * This dependency was declared in catalog libs.versions.toml
-     */
-    public Provider<MinimalExternalModuleDependency> getActivity() {
-        return create("activity");
-    }
-
-    /**
-     * Dependency provider for <b>appcompat</b> with <b>androidx.appcompat:appcompat</b> coordinates and
-     * with version reference <b>appcompat</b>
-     * <p>
-     * This dependency was declared in catalog libs.versions.toml
-     */
-    public Provider<MinimalExternalModuleDependency> getAppcompat() {
-        return create("appcompat");
-    }
-
-    /**
-     * Dependency provider for <b>circleimageview</b> with <b>de.hdodenhof:circleimageview</b> coordinates and
-     * with version reference <b>circleimageview</b>
-     * <p>
-     * This dependency was declared in catalog libs.versions.toml
-     */
-    public Provider<MinimalExternalModuleDependency> getCircleimageview() {
-        return create("circleimageview");
-    }
-
-    /**
-     * Dependency provider for <b>constraintlayout</b> with <b>androidx.constraintlayout:constraintlayout</b> coordinates and
-     * with version reference <b>constraintlayout</b>
-     * <p>
-     * This dependency was declared in catalog libs.versions.toml
-     */
-    public Provider<MinimalExternalModuleDependency> getConstraintlayout() {
-        return create("constraintlayout");
-    }
-
-    /**
-     * Dependency provider for <b>core</b> with <b>androidx.core:core</b> coordinates and
-     * with version reference <b>core</b>
-     * <p>
-     * This dependency was declared in catalog libs.versions.toml
-     */
-    public Provider<MinimalExternalModuleDependency> getCore() {
-        return create("core");
-    }
-
-    /**
-     * Dependency provider for <b>googleid</b> with <b>com.google.android.libraries.identity.googleid:googleid</b> coordinates and
-     * with version reference <b>googleid</b>
-     * <p>
-     * This dependency was declared in catalog libs.versions.toml
-     */
-    public Provider<MinimalExternalModuleDependency> getGoogleid() {
-        return create("googleid");
-    }
-
-    /**
-     * Dependency provider for <b>junit</b> with <b>junit:junit</b> coordinates and
-     * with version reference <b>junit</b>
-     * <p>
-     * This dependency was declared in catalog libs.versions.toml
-     */
-    public Provider<MinimalExternalModuleDependency> getJunit() {
-        return create("junit");
-    }
-
-    /**
-     * Dependency provider for <b>material</b> with <b>com.google.android.material:material</b> coordinates and
-     * with version reference <b>material</b>
-     * <p>
-     * This dependency was declared in catalog libs.versions.toml
-     */
-    public Provider<MinimalExternalModuleDependency> getMaterial() {
-        return create("material");
-    }
-
-    /**
-     * Dependency provider for <b>picasso</b> with <b>com.squareup.picasso:picasso</b> coordinates and
-     * with version reference <b>picasso</b>
-     * <p>
-     * This dependency was declared in catalog libs.versions.toml
-     */
-    public Provider<MinimalExternalModuleDependency> getPicasso() {
-        return create("picasso");
-    }
-
-    /**
-     * Dependency provider for <b>volley</b> with <b>com.android.volley:volley</b> coordinates and
-     * with version reference <b>volley</b>
-     * <p>
-     * This dependency was declared in catalog libs.versions.toml
-     */
-    public Provider<MinimalExternalModuleDependency> getVolley() {
-        return create("volley");
-    }
-
-    /**
-     * Group of libraries at <b>credentials</b>
-     */
-    public CredentialsLibraryAccessors getCredentials() {
-        return laccForCredentialsLibraryAccessors;
-    }
-
-    /**
-     * Group of libraries at <b>espresso</b>
-     */
-    public EspressoLibraryAccessors getEspresso() {
-        return laccForEspressoLibraryAccessors;
-    }
-
-    /**
-     * Group of libraries at <b>ext</b>
-     */
-    public ExtLibraryAccessors getExt() {
-        return laccForExtLibraryAccessors;
-    }
-
-    /**
-     * Group of libraries at <b>glide</b>
-     */
-    public GlideLibraryAccessors getGlide() {
-        return laccForGlideLibraryAccessors;
-    }
-
-    /**
-     * Group of versions at <b>versions</b>
-     */
-    public VersionAccessors getVersions() {
-        return vaccForVersionAccessors;
-    }
-
-    /**
-     * Group of bundles at <b>bundles</b>
-     */
-    public BundleAccessors getBundles() {
-        return baccForBundleAccessors;
-    }
-
-    /**
-     * Group of plugins at <b>plugins</b>
-     */
-    public PluginAccessors getPlugins() {
-        return paccForPluginAccessors;
-    }
-
-    public static class CredentialsLibraryAccessors extends SubDependencyFactory implements DependencyNotationSupplier {
-        private final CredentialsPlayLibraryAccessors laccForCredentialsPlayLibraryAccessors = new CredentialsPlayLibraryAccessors(owner);
-
-        public CredentialsLibraryAccessors(AbstractExternalDependencyFactory owner) { super(owner); }
-
-        /**
-         * Dependency provider for <b>credentials</b> with <b>androidx.credentials:credentials</b> coordinates and
-         * with version reference <b>credentials</b>
-         * <p>
-         * This dependency was declared in catalog libs.versions.toml
-         */
-        public Provider<MinimalExternalModuleDependency> asProvider() {
-            return create("credentials");
-        }
-
-        /**
-         * Group of libraries at <b>credentials.play</b>
-         */
-        public CredentialsPlayLibraryAccessors getPlay() {
-            return laccForCredentialsPlayLibraryAccessors;
-        }
-
-    }
-
-    public static class CredentialsPlayLibraryAccessors extends SubDependencyFactory {
-        private final CredentialsPlayServicesLibraryAccessors laccForCredentialsPlayServicesLibraryAccessors = new CredentialsPlayServicesLibraryAccessors(owner);
-
-        public CredentialsPlayLibraryAccessors(AbstractExternalDependencyFactory owner) { super(owner); }
-
-        /**
-         * Group of libraries at <b>credentials.play.services</b>
-         */
-        public CredentialsPlayServicesLibraryAccessors getServices() {
-            return laccForCredentialsPlayServicesLibraryAccessors;
-        }
-
-    }
-
-    public static class CredentialsPlayServicesLibraryAccessors extends SubDependencyFactory {
-
-        public CredentialsPlayServicesLibraryAccessors(AbstractExternalDependencyFactory owner) { super(owner); }
-
-        /**
-         * Dependency provider for <b>auth</b> with <b>androidx.credentials:credentials-play-services-auth</b> coordinates and
-         * with version reference <b>credentials</b>
-         * <p>
-         * This dependency was declared in catalog libs.versions.toml
-         */
-        public Provider<MinimalExternalModuleDependency> getAuth() {
-            return create("credentials.play.services.auth");
-        }
-
-    }
-
-    public static class EspressoLibraryAccessors extends SubDependencyFactory {
-
-        public EspressoLibraryAccessors(AbstractExternalDependencyFactory owner) { super(owner); }
-
-        /**
-         * Dependency provider for <b>core</b> with <b>androidx.test.espresso:espresso-core</b> coordinates and
-         * with version reference <b>espressoCore</b>
-         * <p>
-         * This dependency was declared in catalog libs.versions.toml
-         */
-        public Provider<MinimalExternalModuleDependency> getCore() {
-            return create("espresso.core");
-        }
-
-    }
-
-    public static class ExtLibraryAccessors extends SubDependencyFactory {
-
-        public ExtLibraryAccessors(AbstractExternalDependencyFactory owner) { super(owner); }
-
-        /**
-         * Dependency provider for <b>junit</b> with <b>androidx.test.ext:junit</b> coordinates and
-         * with version reference <b>junitVersion</b>
-         * <p>
-         * This dependency was declared in catalog libs.versions.toml
-         */
-        public Provider<MinimalExternalModuleDependency> getJunit() {
-            return create("ext.junit");
-        }
-
-    }
-
-    public static class GlideLibraryAccessors extends SubDependencyFactory implements DependencyNotationSupplier {
-
-        public GlideLibraryAccessors(AbstractExternalDependencyFactory owner) { super(owner); }
-
-        /**
-         * Dependency provider for <b>glide</b> with <b>com.github.bumptech.glide:glide</b> coordinates and
-         * with version <b>4.16.0</b>
-         * <p>
-         * This dependency was declared in catalog libs.versions.toml
-         */
-        public Provider<MinimalExternalModuleDependency> asProvider() {
-            return create("glide");
-        }
-
-        /**
-         * Dependency provider for <b>compiler</b> with <b>com.github.bumptech.glide:compiler</b> coordinates and
-         * with version <b>4.16.0</b>
-         * <p>
-         * This dependency was declared in catalog libs.versions.toml
-         */
-        public Provider<MinimalExternalModuleDependency> getCompiler() {
-            return create("glide.compiler");
-        }
-
-        /**
-         * Dependency provider for <b>okhttp3</b> with <b>com.github.bumptech.glide:okhttp3-integration</b> coordinates and
-         * with version <b>4.16.0</b>
-         * <p>
-         * This dependency was declared in catalog libs.versions.toml
-         */
-        public Provider<MinimalExternalModuleDependency> getOkhttp3() {
-            return create("glide.okhttp3");
-        }
-
-    }
-
-    public static class VersionAccessors extends VersionFactory  {
-
-        public VersionAccessors(ProviderFactory providers, DefaultVersionCatalog config) { super(providers, config); }
-
-        /**
-         * Version alias <b>activity</b> with value <b>1.10.1</b>
-         * <p>
-         * If the version is a rich version and cannot be represented as a
-         * single version string, an empty string is returned.
-         * <p>
-         * This version was declared in catalog libs.versions.toml
-         */
-        public Provider<String> getActivity() { return getVersion("activity"); }
-
-        /**
-         * Version alias <b>agp</b> with value <b>8.8.0</b>
-         * <p>
-         * If the version is a rich version and cannot be represented as a
-         * single version string, an empty string is returned.
-         * <p>
-         * This version was declared in catalog libs.versions.toml
-         */
-        public Provider<String> getAgp() { return getVersion("agp"); }
-
-        /**
-         * Version alias <b>appcompat</b> with value <b>1.7.0</b>
-         * <p>
-         * If the version is a rich version and cannot be represented as a
-         * single version string, an empty string is returned.
-         * <p>
-         * This version was declared in catalog libs.versions.toml
-         */
-        public Provider<String> getAppcompat() { return getVersion("appcompat"); }
-
-        /**
-         * Version alias <b>circleimageview</b> with value <b>3.0.0</b>
-         * <p>
-         * If the version is a rich version and cannot be represented as a
-         * single version string, an empty string is returned.
-         * <p>
-         * This version was declared in catalog libs.versions.toml
-         */
-        public Provider<String> getCircleimageview() { return getVersion("circleimageview"); }
-
-        /**
-         * Version alias <b>constraintlayout</b> with value <b>2.2.1</b>
-         * <p>
-         * If the version is a rich version and cannot be represented as a
-         * single version string, an empty string is returned.
-         * <p>
-         * This version was declared in catalog libs.versions.toml
-         */
-        public Provider<String> getConstraintlayout() { return getVersion("constraintlayout"); }
-
-        /**
-         * Version alias <b>core</b> with value <b>1.13.0</b>
-         * <p>
-         * If the version is a rich version and cannot be represented as a
-         * single version string, an empty string is returned.
-         * <p>
-         * This version was declared in catalog libs.versions.toml
-         */
-        public Provider<String> getCore() { return getVersion("core"); }
-
-        /**
-         * Version alias <b>credentials</b> with value <b>1.5.0</b>
-         * <p>
-         * If the version is a rich version and cannot be represented as a
-         * single version string, an empty string is returned.
-         * <p>
-         * This version was declared in catalog libs.versions.toml
-         */
-        public Provider<String> getCredentials() { return getVersion("credentials"); }
-
-        /**
-         * Version alias <b>espressoCore</b> with value <b>3.6.1</b>
-         * <p>
-         * If the version is a rich version and cannot be represented as a
-         * single version string, an empty string is returned.
-         * <p>
-         * This version was declared in catalog libs.versions.toml
-         */
-        public Provider<String> getEspressoCore() { return getVersion("espressoCore"); }
-
-        /**
-         * Version alias <b>googleid</b> with value <b>1.1.1</b>
-         * <p>
-         * If the version is a rich version and cannot be represented as a
-         * single version string, an empty string is returned.
-         * <p>
-         * This version was declared in catalog libs.versions.toml
-         */
-        public Provider<String> getGoogleid() { return getVersion("googleid"); }
-
-        /**
-         * Version alias <b>junit</b> with value <b>4.13.2</b>
-         * <p>
-         * If the version is a rich version and cannot be represented as a
-         * single version string, an empty string is returned.
-         * <p>
-         * This version was declared in catalog libs.versions.toml
-         */
-        public Provider<String> getJunit() { return getVersion("junit"); }
-
-        /**
-         * Version alias <b>junitVersion</b> with value <b>1.2.1</b>
-         * <p>
-         * If the version is a rich version and cannot be represented as a
-         * single version string, an empty string is returned.
-         * <p>
-         * This version was declared in catalog libs.versions.toml
-         */
-        public Provider<String> getJunitVersion() { return getVersion("junitVersion"); }
-
-        /**
-         * Version alias <b>material</b> with value <b>1.12.0</b>
-         * <p>
-         * If the version is a rich version and cannot be represented as a
-         * single version string, an empty string is returned.
-         * <p>
-         * This version was declared in catalog libs.versions.toml
-         */
-        public Provider<String> getMaterial() { return getVersion("material"); }
-
-        /**
-         * Version alias <b>picasso</b> with value <b>2.5.2</b>
-         * <p>
-         * If the version is a rich version and cannot be represented as a
-         * single version string, an empty string is returned.
-         * <p>
-         * This version was declared in catalog libs.versions.toml
-         */
-        public Provider<String> getPicasso() { return getVersion("picasso"); }
-
-        /**
-         * Version alias <b>volley</b> with value <b>1.2.1</b>
-         * <p>
-         * If the version is a rich version and cannot be represented as a
-         * single version string, an empty string is returned.
-         * <p>
-         * This version was declared in catalog libs.versions.toml
-         */
-        public Provider<String> getVolley() { return getVersion("volley"); }
-
-    }
-
-    public static class BundleAccessors extends BundleFactory {
-
-        public BundleAccessors(ObjectFactory objects, ProviderFactory providers, DefaultVersionCatalog config, ImmutableAttributesFactory attributesFactory, CapabilityNotationParser capabilityNotationParser) { super(objects, providers, config, attributesFactory, capabilityNotationParser); }
-
-    }
-
-    public static class PluginAccessors extends PluginFactory {
-        private final AndroidPluginAccessors paccForAndroidPluginAccessors = new AndroidPluginAccessors(providers, config);
-
-        public PluginAccessors(ProviderFactory providers, DefaultVersionCatalog config) { super(providers, config); }
-
-        /**
-         * Group of plugins at <b>plugins.android</b>
-         */
-        public AndroidPluginAccessors getAndroid() {
-            return paccForAndroidPluginAccessors;
-        }
-
-    }
-
-    public static class AndroidPluginAccessors extends PluginFactory {
-
-        public AndroidPluginAccessors(ProviderFactory providers, DefaultVersionCatalog config) { super(providers, config); }
-
-        /**
-         * Plugin provider for <b>android.application</b> with plugin id <b>com.android.application</b> and
-         * with version reference <b>agp</b>
-         * <p>
-         * This plugin was declared in catalog libs.versions.toml
-         */
-        public Provider<PluginDependency> getApplication() { return createPlugin("android.application"); }
-
-    }
-
-}
Index: .gradle/8.10.2/dependencies-accessors/c5cd8a2fe1b1083f448ddccb7325cc4239c7f698/sources/org/gradle/accessors/dm/LibrariesForLibsInPluginsBlock.java
===================================================================
diff --git a/.gradle/8.10.2/dependencies-accessors/c5cd8a2fe1b1083f448ddccb7325cc4239c7f698/sources/org/gradle/accessors/dm/LibrariesForLibsInPluginsBlock.java b/.gradle/8.10.2/dependencies-accessors/c5cd8a2fe1b1083f448ddccb7325cc4239c7f698/sources/org/gradle/accessors/dm/LibrariesForLibsInPluginsBlock.java
deleted file mode 100644
--- a/.gradle/8.10.2/dependencies-accessors/c5cd8a2fe1b1083f448ddccb7325cc4239c7f698/sources/org/gradle/accessors/dm/LibrariesForLibsInPluginsBlock.java	(revision ae433e1ac5ebbc2f83dc0bb022436f30fb4e6989)
+++ /dev/null	(revision ae433e1ac5ebbc2f83dc0bb022436f30fb4e6989)
@@ -1,461 +0,0 @@
-package org.gradle.accessors.dm;
-
-import org.gradle.api.NonNullApi;
-import org.gradle.api.artifacts.MinimalExternalModuleDependency;
-import org.gradle.plugin.use.PluginDependency;
-import org.gradle.api.artifacts.ExternalModuleDependencyBundle;
-import org.gradle.api.artifacts.MutableVersionConstraint;
-import org.gradle.api.provider.Provider;
-import org.gradle.api.model.ObjectFactory;
-import org.gradle.api.provider.ProviderFactory;
-import org.gradle.api.internal.catalog.AbstractExternalDependencyFactory;
-import org.gradle.api.internal.catalog.DefaultVersionCatalog;
-import java.util.Map;
-import org.gradle.api.internal.attributes.ImmutableAttributesFactory;
-import org.gradle.api.internal.artifacts.dsl.CapabilityNotationParser;
-import javax.inject.Inject;
-
-/**
- * A catalog of dependencies accessible via the {@code libs} extension.
- */
-@NonNullApi
-public class LibrariesForLibsInPluginsBlock extends AbstractExternalDependencyFactory {
-
-    private final AbstractExternalDependencyFactory owner = this;
-    private final EspressoLibraryAccessors laccForEspressoLibraryAccessors = new EspressoLibraryAccessors(owner);
-    private final ExtLibraryAccessors laccForExtLibraryAccessors = new ExtLibraryAccessors(owner);
-    private final GlideLibraryAccessors laccForGlideLibraryAccessors = new GlideLibraryAccessors(owner);
-    private final VersionAccessors vaccForVersionAccessors = new VersionAccessors(providers, config);
-    private final BundleAccessors baccForBundleAccessors = new BundleAccessors(objects, providers, config, attributesFactory, capabilityNotationParser);
-    private final PluginAccessors paccForPluginAccessors = new PluginAccessors(providers, config);
-
-    @Inject
-    public LibrariesForLibsInPluginsBlock(DefaultVersionCatalog config, ProviderFactory providers, ObjectFactory objects, ImmutableAttributesFactory attributesFactory, CapabilityNotationParser capabilityNotationParser) {
-        super(config, providers, objects, attributesFactory, capabilityNotationParser);
-    }
-
-    /**
-     * Dependency provider for <b>activity</b> with <b>androidx.activity:activity</b> coordinates and
-     * with version reference <b>activity</b>
-     * <p>
-     * This dependency was declared in catalog libs.versions.toml
-     *
-     * @deprecated Will be removed in Gradle 9.0.
-     */
-    @Deprecated
-    public Provider<MinimalExternalModuleDependency> getActivity() {
-        org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
-        return create("activity");
-    }
-
-    /**
-     * Dependency provider for <b>appcompat</b> with <b>androidx.appcompat:appcompat</b> coordinates and
-     * with version reference <b>appcompat</b>
-     * <p>
-     * This dependency was declared in catalog libs.versions.toml
-     *
-     * @deprecated Will be removed in Gradle 9.0.
-     */
-    @Deprecated
-    public Provider<MinimalExternalModuleDependency> getAppcompat() {
-        org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
-        return create("appcompat");
-    }
-
-    /**
-     * Dependency provider for <b>circleimageview</b> with <b>de.hdodenhof:circleimageview</b> coordinates and
-     * with version reference <b>circleimageview</b>
-     * <p>
-     * This dependency was declared in catalog libs.versions.toml
-     *
-     * @deprecated Will be removed in Gradle 9.0.
-     */
-    @Deprecated
-    public Provider<MinimalExternalModuleDependency> getCircleimageview() {
-        org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
-        return create("circleimageview");
-    }
-
-    /**
-     * Dependency provider for <b>constraintlayout</b> with <b>androidx.constraintlayout:constraintlayout</b> coordinates and
-     * with version reference <b>constraintlayout</b>
-     * <p>
-     * This dependency was declared in catalog libs.versions.toml
-     *
-     * @deprecated Will be removed in Gradle 9.0.
-     */
-    @Deprecated
-    public Provider<MinimalExternalModuleDependency> getConstraintlayout() {
-        org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
-        return create("constraintlayout");
-    }
-
-    /**
-     * Dependency provider for <b>junit</b> with <b>junit:junit</b> coordinates and
-     * with version reference <b>junit</b>
-     * <p>
-     * This dependency was declared in catalog libs.versions.toml
-     *
-     * @deprecated Will be removed in Gradle 9.0.
-     */
-    @Deprecated
-    public Provider<MinimalExternalModuleDependency> getJunit() {
-        org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
-        return create("junit");
-    }
-
-    /**
-     * Dependency provider for <b>material</b> with <b>com.google.android.material:material</b> coordinates and
-     * with version reference <b>material</b>
-     * <p>
-     * This dependency was declared in catalog libs.versions.toml
-     *
-     * @deprecated Will be removed in Gradle 9.0.
-     */
-    @Deprecated
-    public Provider<MinimalExternalModuleDependency> getMaterial() {
-        org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
-        return create("material");
-    }
-
-    /**
-     * Dependency provider for <b>picasso</b> with <b>com.squareup.picasso:picasso</b> coordinates and
-     * with version reference <b>picasso</b>
-     * <p>
-     * This dependency was declared in catalog libs.versions.toml
-     *
-     * @deprecated Will be removed in Gradle 9.0.
-     */
-    @Deprecated
-    public Provider<MinimalExternalModuleDependency> getPicasso() {
-        org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
-        return create("picasso");
-    }
-
-    /**
-     * Dependency provider for <b>volley</b> with <b>com.android.volley:volley</b> coordinates and
-     * with version reference <b>volley</b>
-     * <p>
-     * This dependency was declared in catalog libs.versions.toml
-     *
-     * @deprecated Will be removed in Gradle 9.0.
-     */
-    @Deprecated
-    public Provider<MinimalExternalModuleDependency> getVolley() {
-        org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
-        return create("volley");
-    }
-
-    /**
-     * Group of libraries at <b>espresso</b>
-     *
-     * @deprecated Will be removed in Gradle 9.0.
-     */
-    @Deprecated
-    public EspressoLibraryAccessors getEspresso() {
-        org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
-        return laccForEspressoLibraryAccessors;
-    }
-
-    /**
-     * Group of libraries at <b>ext</b>
-     *
-     * @deprecated Will be removed in Gradle 9.0.
-     */
-    @Deprecated
-    public ExtLibraryAccessors getExt() {
-        org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
-        return laccForExtLibraryAccessors;
-    }
-
-    /**
-     * Group of libraries at <b>glide</b>
-     *
-     * @deprecated Will be removed in Gradle 9.0.
-     */
-    @Deprecated
-    public GlideLibraryAccessors getGlide() {
-        org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
-        return laccForGlideLibraryAccessors;
-    }
-
-    /**
-     * Group of versions at <b>versions</b>
-     */
-    public VersionAccessors getVersions() {
-        return vaccForVersionAccessors;
-    }
-
-    /**
-     * Group of bundles at <b>bundles</b>
-     *
-     * @deprecated Will be removed in Gradle 9.0.
-     */
-    @Deprecated
-    public BundleAccessors getBundles() {
-        org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
-        return baccForBundleAccessors;
-    }
-
-    /**
-     * Group of plugins at <b>plugins</b>
-     */
-    public PluginAccessors getPlugins() {
-        return paccForPluginAccessors;
-    }
-
-    /**
-     * @deprecated Will be removed in Gradle 9.0.
-     */
-    @Deprecated
-    public static class EspressoLibraryAccessors extends SubDependencyFactory {
-
-        public EspressoLibraryAccessors(AbstractExternalDependencyFactory owner) { super(owner); }
-
-        /**
-         * Dependency provider for <b>core</b> with <b>androidx.test.espresso:espresso-core</b> coordinates and
-         * with version reference <b>espressoCore</b>
-         * <p>
-         * This dependency was declared in catalog libs.versions.toml
-         *
-         * @deprecated Will be removed in Gradle 9.0.
-         */
-        @Deprecated
-        public Provider<MinimalExternalModuleDependency> getCore() {
-            org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
-            return create("espresso.core");
-        }
-
-    }
-
-    /**
-     * @deprecated Will be removed in Gradle 9.0.
-     */
-    @Deprecated
-    public static class ExtLibraryAccessors extends SubDependencyFactory {
-
-        public ExtLibraryAccessors(AbstractExternalDependencyFactory owner) { super(owner); }
-
-        /**
-         * Dependency provider for <b>junit</b> with <b>androidx.test.ext:junit</b> coordinates and
-         * with version reference <b>junitVersion</b>
-         * <p>
-         * This dependency was declared in catalog libs.versions.toml
-         *
-         * @deprecated Will be removed in Gradle 9.0.
-         */
-        @Deprecated
-        public Provider<MinimalExternalModuleDependency> getJunit() {
-            org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
-            return create("ext.junit");
-        }
-
-    }
-
-    /**
-     * @deprecated Will be removed in Gradle 9.0.
-     */
-    @Deprecated
-    public static class GlideLibraryAccessors extends SubDependencyFactory implements DependencyNotationSupplier {
-
-        public GlideLibraryAccessors(AbstractExternalDependencyFactory owner) { super(owner); }
-
-        /**
-         * Dependency provider for <b>glide</b> with <b>com.github.bumptech.glide:glide</b> coordinates and
-         * with version <b>4.16.0</b>
-         * <p>
-         * This dependency was declared in catalog libs.versions.toml
-         *
-         * @deprecated Will be removed in Gradle 9.0.
-         */
-        @Deprecated
-        public Provider<MinimalExternalModuleDependency> asProvider() {
-            org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
-            return create("glide");
-        }
-
-        /**
-         * Dependency provider for <b>compiler</b> with <b>com.github.bumptech.glide:compiler</b> coordinates and
-         * with version <b>4.16.0</b>
-         * <p>
-         * This dependency was declared in catalog libs.versions.toml
-         *
-         * @deprecated Will be removed in Gradle 9.0.
-         */
-        @Deprecated
-        public Provider<MinimalExternalModuleDependency> getCompiler() {
-            org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
-            return create("glide.compiler");
-        }
-
-        /**
-         * Dependency provider for <b>okhttp3</b> with <b>com.github.bumptech.glide:okhttp3-integration</b> coordinates and
-         * with version <b>4.16.0</b>
-         * <p>
-         * This dependency was declared in catalog libs.versions.toml
-         *
-         * @deprecated Will be removed in Gradle 9.0.
-         */
-        @Deprecated
-        public Provider<MinimalExternalModuleDependency> getOkhttp3() {
-            org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
-            return create("glide.okhttp3");
-        }
-
-    }
-
-    public static class VersionAccessors extends VersionFactory  {
-
-        public VersionAccessors(ProviderFactory providers, DefaultVersionCatalog config) { super(providers, config); }
-
-        /**
-         * Version alias <b>activity</b> with value <b>1.10.1</b>
-         * <p>
-         * If the version is a rich version and cannot be represented as a
-         * single version string, an empty string is returned.
-         * <p>
-         * This version was declared in catalog libs.versions.toml
-         */
-        public Provider<String> getActivity() { return getVersion("activity"); }
-
-        /**
-         * Version alias <b>agp</b> with value <b>8.8.0</b>
-         * <p>
-         * If the version is a rich version and cannot be represented as a
-         * single version string, an empty string is returned.
-         * <p>
-         * This version was declared in catalog libs.versions.toml
-         */
-        public Provider<String> getAgp() { return getVersion("agp"); }
-
-        /**
-         * Version alias <b>appcompat</b> with value <b>1.7.0</b>
-         * <p>
-         * If the version is a rich version and cannot be represented as a
-         * single version string, an empty string is returned.
-         * <p>
-         * This version was declared in catalog libs.versions.toml
-         */
-        public Provider<String> getAppcompat() { return getVersion("appcompat"); }
-
-        /**
-         * Version alias <b>circleimageview</b> with value <b>3.0.0</b>
-         * <p>
-         * If the version is a rich version and cannot be represented as a
-         * single version string, an empty string is returned.
-         * <p>
-         * This version was declared in catalog libs.versions.toml
-         */
-        public Provider<String> getCircleimageview() { return getVersion("circleimageview"); }
-
-        /**
-         * Version alias <b>constraintlayout</b> with value <b>2.2.1</b>
-         * <p>
-         * If the version is a rich version and cannot be represented as a
-         * single version string, an empty string is returned.
-         * <p>
-         * This version was declared in catalog libs.versions.toml
-         */
-        public Provider<String> getConstraintlayout() { return getVersion("constraintlayout"); }
-
-        /**
-         * Version alias <b>espressoCore</b> with value <b>3.6.1</b>
-         * <p>
-         * If the version is a rich version and cannot be represented as a
-         * single version string, an empty string is returned.
-         * <p>
-         * This version was declared in catalog libs.versions.toml
-         */
-        public Provider<String> getEspressoCore() { return getVersion("espressoCore"); }
-
-        /**
-         * Version alias <b>junit</b> with value <b>4.13.2</b>
-         * <p>
-         * If the version is a rich version and cannot be represented as a
-         * single version string, an empty string is returned.
-         * <p>
-         * This version was declared in catalog libs.versions.toml
-         */
-        public Provider<String> getJunit() { return getVersion("junit"); }
-
-        /**
-         * Version alias <b>junitVersion</b> with value <b>1.2.1</b>
-         * <p>
-         * If the version is a rich version and cannot be represented as a
-         * single version string, an empty string is returned.
-         * <p>
-         * This version was declared in catalog libs.versions.toml
-         */
-        public Provider<String> getJunitVersion() { return getVersion("junitVersion"); }
-
-        /**
-         * Version alias <b>material</b> with value <b>1.12.0</b>
-         * <p>
-         * If the version is a rich version and cannot be represented as a
-         * single version string, an empty string is returned.
-         * <p>
-         * This version was declared in catalog libs.versions.toml
-         */
-        public Provider<String> getMaterial() { return getVersion("material"); }
-
-        /**
-         * Version alias <b>picasso</b> with value <b>2.5.2</b>
-         * <p>
-         * If the version is a rich version and cannot be represented as a
-         * single version string, an empty string is returned.
-         * <p>
-         * This version was declared in catalog libs.versions.toml
-         */
-        public Provider<String> getPicasso() { return getVersion("picasso"); }
-
-        /**
-         * Version alias <b>volley</b> with value <b>1.2.1</b>
-         * <p>
-         * If the version is a rich version and cannot be represented as a
-         * single version string, an empty string is returned.
-         * <p>
-         * This version was declared in catalog libs.versions.toml
-         */
-        public Provider<String> getVolley() { return getVersion("volley"); }
-
-    }
-
-    /**
-     * @deprecated Will be removed in Gradle 9.0.
-     */
-    @Deprecated
-    public static class BundleAccessors extends BundleFactory {
-
-        public BundleAccessors(ObjectFactory objects, ProviderFactory providers, DefaultVersionCatalog config, ImmutableAttributesFactory attributesFactory, CapabilityNotationParser capabilityNotationParser) { super(objects, providers, config, attributesFactory, capabilityNotationParser); }
-
-    }
-
-    public static class PluginAccessors extends PluginFactory {
-        private final AndroidPluginAccessors paccForAndroidPluginAccessors = new AndroidPluginAccessors(providers, config);
-
-        public PluginAccessors(ProviderFactory providers, DefaultVersionCatalog config) { super(providers, config); }
-
-        /**
-         * Group of plugins at <b>plugins.android</b>
-         */
-        public AndroidPluginAccessors getAndroid() {
-            return paccForAndroidPluginAccessors;
-        }
-
-    }
-
-    public static class AndroidPluginAccessors extends PluginFactory {
-
-        public AndroidPluginAccessors(ProviderFactory providers, DefaultVersionCatalog config) { super(providers, config); }
-
-        /**
-         * Plugin provider for <b>android.application</b> with plugin id <b>com.android.application</b> and
-         * with version reference <b>agp</b>
-         * <p>
-         * This plugin was declared in catalog libs.versions.toml
-         */
-        public Provider<PluginDependency> getApplication() { return createPlugin("android.application"); }
-
-    }
-
-}
Index: .gradle/8.10.2/dependencies-accessors/e5fcb7d79d0dd211eb8566d84565d43d8c6197b9/sources/org/gradle/accessors/dm/LibrariesForLibsInPluginsBlock.java
===================================================================
diff --git a/.gradle/8.10.2/dependencies-accessors/e5fcb7d79d0dd211eb8566d84565d43d8c6197b9/sources/org/gradle/accessors/dm/LibrariesForLibsInPluginsBlock.java b/.gradle/8.10.2/dependencies-accessors/e5fcb7d79d0dd211eb8566d84565d43d8c6197b9/sources/org/gradle/accessors/dm/LibrariesForLibsInPluginsBlock.java
deleted file mode 100644
--- a/.gradle/8.10.2/dependencies-accessors/e5fcb7d79d0dd211eb8566d84565d43d8c6197b9/sources/org/gradle/accessors/dm/LibrariesForLibsInPluginsBlock.java	(revision ae433e1ac5ebbc2f83dc0bb022436f30fb4e6989)
+++ /dev/null	(revision ae433e1ac5ebbc2f83dc0bb022436f30fb4e6989)
@@ -1,613 +0,0 @@
-package org.gradle.accessors.dm;
-
-import org.gradle.api.NonNullApi;
-import org.gradle.api.artifacts.MinimalExternalModuleDependency;
-import org.gradle.plugin.use.PluginDependency;
-import org.gradle.api.artifacts.ExternalModuleDependencyBundle;
-import org.gradle.api.artifacts.MutableVersionConstraint;
-import org.gradle.api.provider.Provider;
-import org.gradle.api.model.ObjectFactory;
-import org.gradle.api.provider.ProviderFactory;
-import org.gradle.api.internal.catalog.AbstractExternalDependencyFactory;
-import org.gradle.api.internal.catalog.DefaultVersionCatalog;
-import java.util.Map;
-import org.gradle.api.internal.attributes.ImmutableAttributesFactory;
-import org.gradle.api.internal.artifacts.dsl.CapabilityNotationParser;
-import javax.inject.Inject;
-
-/**
- * A catalog of dependencies accessible via the {@code libs} extension.
- */
-@NonNullApi
-public class LibrariesForLibsInPluginsBlock extends AbstractExternalDependencyFactory {
-
-    private final AbstractExternalDependencyFactory owner = this;
-    private final CredentialsLibraryAccessors laccForCredentialsLibraryAccessors = new CredentialsLibraryAccessors(owner);
-    private final EspressoLibraryAccessors laccForEspressoLibraryAccessors = new EspressoLibraryAccessors(owner);
-    private final ExtLibraryAccessors laccForExtLibraryAccessors = new ExtLibraryAccessors(owner);
-    private final GlideLibraryAccessors laccForGlideLibraryAccessors = new GlideLibraryAccessors(owner);
-    private final VersionAccessors vaccForVersionAccessors = new VersionAccessors(providers, config);
-    private final BundleAccessors baccForBundleAccessors = new BundleAccessors(objects, providers, config, attributesFactory, capabilityNotationParser);
-    private final PluginAccessors paccForPluginAccessors = new PluginAccessors(providers, config);
-
-    @Inject
-    public LibrariesForLibsInPluginsBlock(DefaultVersionCatalog config, ProviderFactory providers, ObjectFactory objects, ImmutableAttributesFactory attributesFactory, CapabilityNotationParser capabilityNotationParser) {
-        super(config, providers, objects, attributesFactory, capabilityNotationParser);
-    }
-
-    /**
-     * Dependency provider for <b>activity</b> with <b>androidx.activity:activity</b> coordinates and
-     * with version reference <b>activity</b>
-     * <p>
-     * This dependency was declared in catalog libs.versions.toml
-     *
-     * @deprecated Will be removed in Gradle 9.0.
-     */
-    @Deprecated
-    public Provider<MinimalExternalModuleDependency> getActivity() {
-        org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
-        return create("activity");
-    }
-
-    /**
-     * Dependency provider for <b>appcompat</b> with <b>androidx.appcompat:appcompat</b> coordinates and
-     * with version reference <b>appcompat</b>
-     * <p>
-     * This dependency was declared in catalog libs.versions.toml
-     *
-     * @deprecated Will be removed in Gradle 9.0.
-     */
-    @Deprecated
-    public Provider<MinimalExternalModuleDependency> getAppcompat() {
-        org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
-        return create("appcompat");
-    }
-
-    /**
-     * Dependency provider for <b>circleimageview</b> with <b>de.hdodenhof:circleimageview</b> coordinates and
-     * with version reference <b>circleimageview</b>
-     * <p>
-     * This dependency was declared in catalog libs.versions.toml
-     *
-     * @deprecated Will be removed in Gradle 9.0.
-     */
-    @Deprecated
-    public Provider<MinimalExternalModuleDependency> getCircleimageview() {
-        org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
-        return create("circleimageview");
-    }
-
-    /**
-     * Dependency provider for <b>constraintlayout</b> with <b>androidx.constraintlayout:constraintlayout</b> coordinates and
-     * with version reference <b>constraintlayout</b>
-     * <p>
-     * This dependency was declared in catalog libs.versions.toml
-     *
-     * @deprecated Will be removed in Gradle 9.0.
-     */
-    @Deprecated
-    public Provider<MinimalExternalModuleDependency> getConstraintlayout() {
-        org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
-        return create("constraintlayout");
-    }
-
-    /**
-     * Dependency provider for <b>core</b> with <b>androidx.core:core</b> coordinates and
-     * with version reference <b>core</b>
-     * <p>
-     * This dependency was declared in catalog libs.versions.toml
-     *
-     * @deprecated Will be removed in Gradle 9.0.
-     */
-    @Deprecated
-    public Provider<MinimalExternalModuleDependency> getCore() {
-        org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
-        return create("core");
-    }
-
-    /**
-     * Dependency provider for <b>googleid</b> with <b>com.google.android.libraries.identity.googleid:googleid</b> coordinates and
-     * with version reference <b>googleid</b>
-     * <p>
-     * This dependency was declared in catalog libs.versions.toml
-     *
-     * @deprecated Will be removed in Gradle 9.0.
-     */
-    @Deprecated
-    public Provider<MinimalExternalModuleDependency> getGoogleid() {
-        org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
-        return create("googleid");
-    }
-
-    /**
-     * Dependency provider for <b>junit</b> with <b>junit:junit</b> coordinates and
-     * with version reference <b>junit</b>
-     * <p>
-     * This dependency was declared in catalog libs.versions.toml
-     *
-     * @deprecated Will be removed in Gradle 9.0.
-     */
-    @Deprecated
-    public Provider<MinimalExternalModuleDependency> getJunit() {
-        org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
-        return create("junit");
-    }
-
-    /**
-     * Dependency provider for <b>material</b> with <b>com.google.android.material:material</b> coordinates and
-     * with version reference <b>material</b>
-     * <p>
-     * This dependency was declared in catalog libs.versions.toml
-     *
-     * @deprecated Will be removed in Gradle 9.0.
-     */
-    @Deprecated
-    public Provider<MinimalExternalModuleDependency> getMaterial() {
-        org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
-        return create("material");
-    }
-
-    /**
-     * Dependency provider for <b>picasso</b> with <b>com.squareup.picasso:picasso</b> coordinates and
-     * with version reference <b>picasso</b>
-     * <p>
-     * This dependency was declared in catalog libs.versions.toml
-     *
-     * @deprecated Will be removed in Gradle 9.0.
-     */
-    @Deprecated
-    public Provider<MinimalExternalModuleDependency> getPicasso() {
-        org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
-        return create("picasso");
-    }
-
-    /**
-     * Dependency provider for <b>volley</b> with <b>com.android.volley:volley</b> coordinates and
-     * with version reference <b>volley</b>
-     * <p>
-     * This dependency was declared in catalog libs.versions.toml
-     *
-     * @deprecated Will be removed in Gradle 9.0.
-     */
-    @Deprecated
-    public Provider<MinimalExternalModuleDependency> getVolley() {
-        org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
-        return create("volley");
-    }
-
-    /**
-     * Group of libraries at <b>credentials</b>
-     *
-     * @deprecated Will be removed in Gradle 9.0.
-     */
-    @Deprecated
-    public CredentialsLibraryAccessors getCredentials() {
-        org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
-        return laccForCredentialsLibraryAccessors;
-    }
-
-    /**
-     * Group of libraries at <b>espresso</b>
-     *
-     * @deprecated Will be removed in Gradle 9.0.
-     */
-    @Deprecated
-    public EspressoLibraryAccessors getEspresso() {
-        org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
-        return laccForEspressoLibraryAccessors;
-    }
-
-    /**
-     * Group of libraries at <b>ext</b>
-     *
-     * @deprecated Will be removed in Gradle 9.0.
-     */
-    @Deprecated
-    public ExtLibraryAccessors getExt() {
-        org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
-        return laccForExtLibraryAccessors;
-    }
-
-    /**
-     * Group of libraries at <b>glide</b>
-     *
-     * @deprecated Will be removed in Gradle 9.0.
-     */
-    @Deprecated
-    public GlideLibraryAccessors getGlide() {
-        org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
-        return laccForGlideLibraryAccessors;
-    }
-
-    /**
-     * Group of versions at <b>versions</b>
-     */
-    public VersionAccessors getVersions() {
-        return vaccForVersionAccessors;
-    }
-
-    /**
-     * Group of bundles at <b>bundles</b>
-     *
-     * @deprecated Will be removed in Gradle 9.0.
-     */
-    @Deprecated
-    public BundleAccessors getBundles() {
-        org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
-        return baccForBundleAccessors;
-    }
-
-    /**
-     * Group of plugins at <b>plugins</b>
-     */
-    public PluginAccessors getPlugins() {
-        return paccForPluginAccessors;
-    }
-
-    /**
-     * @deprecated Will be removed in Gradle 9.0.
-     */
-    @Deprecated
-    public static class CredentialsLibraryAccessors extends SubDependencyFactory implements DependencyNotationSupplier {
-        private final CredentialsPlayLibraryAccessors laccForCredentialsPlayLibraryAccessors = new CredentialsPlayLibraryAccessors(owner);
-
-        public CredentialsLibraryAccessors(AbstractExternalDependencyFactory owner) { super(owner); }
-
-        /**
-         * Dependency provider for <b>credentials</b> with <b>androidx.credentials:credentials</b> coordinates and
-         * with version reference <b>credentials</b>
-         * <p>
-         * This dependency was declared in catalog libs.versions.toml
-         *
-         * @deprecated Will be removed in Gradle 9.0.
-         */
-        @Deprecated
-        public Provider<MinimalExternalModuleDependency> asProvider() {
-            org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
-            return create("credentials");
-        }
-
-        /**
-         * Group of libraries at <b>credentials.play</b>
-         *
-         * @deprecated Will be removed in Gradle 9.0.
-         */
-        @Deprecated
-        public CredentialsPlayLibraryAccessors getPlay() {
-            org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
-            return laccForCredentialsPlayLibraryAccessors;
-        }
-
-    }
-
-    /**
-     * @deprecated Will be removed in Gradle 9.0.
-     */
-    @Deprecated
-    public static class CredentialsPlayLibraryAccessors extends SubDependencyFactory {
-        private final CredentialsPlayServicesLibraryAccessors laccForCredentialsPlayServicesLibraryAccessors = new CredentialsPlayServicesLibraryAccessors(owner);
-
-        public CredentialsPlayLibraryAccessors(AbstractExternalDependencyFactory owner) { super(owner); }
-
-        /**
-         * Group of libraries at <b>credentials.play.services</b>
-         *
-         * @deprecated Will be removed in Gradle 9.0.
-         */
-        @Deprecated
-        public CredentialsPlayServicesLibraryAccessors getServices() {
-            org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
-            return laccForCredentialsPlayServicesLibraryAccessors;
-        }
-
-    }
-
-    /**
-     * @deprecated Will be removed in Gradle 9.0.
-     */
-    @Deprecated
-    public static class CredentialsPlayServicesLibraryAccessors extends SubDependencyFactory {
-
-        public CredentialsPlayServicesLibraryAccessors(AbstractExternalDependencyFactory owner) { super(owner); }
-
-        /**
-         * Dependency provider for <b>auth</b> with <b>androidx.credentials:credentials-play-services-auth</b> coordinates and
-         * with version reference <b>credentials</b>
-         * <p>
-         * This dependency was declared in catalog libs.versions.toml
-         *
-         * @deprecated Will be removed in Gradle 9.0.
-         */
-        @Deprecated
-        public Provider<MinimalExternalModuleDependency> getAuth() {
-            org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
-            return create("credentials.play.services.auth");
-        }
-
-    }
-
-    /**
-     * @deprecated Will be removed in Gradle 9.0.
-     */
-    @Deprecated
-    public static class EspressoLibraryAccessors extends SubDependencyFactory {
-
-        public EspressoLibraryAccessors(AbstractExternalDependencyFactory owner) { super(owner); }
-
-        /**
-         * Dependency provider for <b>core</b> with <b>androidx.test.espresso:espresso-core</b> coordinates and
-         * with version reference <b>espressoCore</b>
-         * <p>
-         * This dependency was declared in catalog libs.versions.toml
-         *
-         * @deprecated Will be removed in Gradle 9.0.
-         */
-        @Deprecated
-        public Provider<MinimalExternalModuleDependency> getCore() {
-            org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
-            return create("espresso.core");
-        }
-
-    }
-
-    /**
-     * @deprecated Will be removed in Gradle 9.0.
-     */
-    @Deprecated
-    public static class ExtLibraryAccessors extends SubDependencyFactory {
-
-        public ExtLibraryAccessors(AbstractExternalDependencyFactory owner) { super(owner); }
-
-        /**
-         * Dependency provider for <b>junit</b> with <b>androidx.test.ext:junit</b> coordinates and
-         * with version reference <b>junitVersion</b>
-         * <p>
-         * This dependency was declared in catalog libs.versions.toml
-         *
-         * @deprecated Will be removed in Gradle 9.0.
-         */
-        @Deprecated
-        public Provider<MinimalExternalModuleDependency> getJunit() {
-            org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
-            return create("ext.junit");
-        }
-
-    }
-
-    /**
-     * @deprecated Will be removed in Gradle 9.0.
-     */
-    @Deprecated
-    public static class GlideLibraryAccessors extends SubDependencyFactory implements DependencyNotationSupplier {
-
-        public GlideLibraryAccessors(AbstractExternalDependencyFactory owner) { super(owner); }
-
-        /**
-         * Dependency provider for <b>glide</b> with <b>com.github.bumptech.glide:glide</b> coordinates and
-         * with version <b>4.16.0</b>
-         * <p>
-         * This dependency was declared in catalog libs.versions.toml
-         *
-         * @deprecated Will be removed in Gradle 9.0.
-         */
-        @Deprecated
-        public Provider<MinimalExternalModuleDependency> asProvider() {
-            org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
-            return create("glide");
-        }
-
-        /**
-         * Dependency provider for <b>compiler</b> with <b>com.github.bumptech.glide:compiler</b> coordinates and
-         * with version <b>4.16.0</b>
-         * <p>
-         * This dependency was declared in catalog libs.versions.toml
-         *
-         * @deprecated Will be removed in Gradle 9.0.
-         */
-        @Deprecated
-        public Provider<MinimalExternalModuleDependency> getCompiler() {
-            org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
-            return create("glide.compiler");
-        }
-
-        /**
-         * Dependency provider for <b>okhttp3</b> with <b>com.github.bumptech.glide:okhttp3-integration</b> coordinates and
-         * with version <b>4.16.0</b>
-         * <p>
-         * This dependency was declared in catalog libs.versions.toml
-         *
-         * @deprecated Will be removed in Gradle 9.0.
-         */
-        @Deprecated
-        public Provider<MinimalExternalModuleDependency> getOkhttp3() {
-            org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
-            return create("glide.okhttp3");
-        }
-
-    }
-
-    public static class VersionAccessors extends VersionFactory  {
-
-        public VersionAccessors(ProviderFactory providers, DefaultVersionCatalog config) { super(providers, config); }
-
-        /**
-         * Version alias <b>activity</b> with value <b>1.10.1</b>
-         * <p>
-         * If the version is a rich version and cannot be represented as a
-         * single version string, an empty string is returned.
-         * <p>
-         * This version was declared in catalog libs.versions.toml
-         */
-        public Provider<String> getActivity() { return getVersion("activity"); }
-
-        /**
-         * Version alias <b>agp</b> with value <b>8.8.0</b>
-         * <p>
-         * If the version is a rich version and cannot be represented as a
-         * single version string, an empty string is returned.
-         * <p>
-         * This version was declared in catalog libs.versions.toml
-         */
-        public Provider<String> getAgp() { return getVersion("agp"); }
-
-        /**
-         * Version alias <b>appcompat</b> with value <b>1.7.0</b>
-         * <p>
-         * If the version is a rich version and cannot be represented as a
-         * single version string, an empty string is returned.
-         * <p>
-         * This version was declared in catalog libs.versions.toml
-         */
-        public Provider<String> getAppcompat() { return getVersion("appcompat"); }
-
-        /**
-         * Version alias <b>circleimageview</b> with value <b>3.0.0</b>
-         * <p>
-         * If the version is a rich version and cannot be represented as a
-         * single version string, an empty string is returned.
-         * <p>
-         * This version was declared in catalog libs.versions.toml
-         */
-        public Provider<String> getCircleimageview() { return getVersion("circleimageview"); }
-
-        /**
-         * Version alias <b>constraintlayout</b> with value <b>2.2.1</b>
-         * <p>
-         * If the version is a rich version and cannot be represented as a
-         * single version string, an empty string is returned.
-         * <p>
-         * This version was declared in catalog libs.versions.toml
-         */
-        public Provider<String> getConstraintlayout() { return getVersion("constraintlayout"); }
-
-        /**
-         * Version alias <b>core</b> with value <b>1.13.0</b>
-         * <p>
-         * If the version is a rich version and cannot be represented as a
-         * single version string, an empty string is returned.
-         * <p>
-         * This version was declared in catalog libs.versions.toml
-         */
-        public Provider<String> getCore() { return getVersion("core"); }
-
-        /**
-         * Version alias <b>credentials</b> with value <b>1.5.0</b>
-         * <p>
-         * If the version is a rich version and cannot be represented as a
-         * single version string, an empty string is returned.
-         * <p>
-         * This version was declared in catalog libs.versions.toml
-         */
-        public Provider<String> getCredentials() { return getVersion("credentials"); }
-
-        /**
-         * Version alias <b>espressoCore</b> with value <b>3.6.1</b>
-         * <p>
-         * If the version is a rich version and cannot be represented as a
-         * single version string, an empty string is returned.
-         * <p>
-         * This version was declared in catalog libs.versions.toml
-         */
-        public Provider<String> getEspressoCore() { return getVersion("espressoCore"); }
-
-        /**
-         * Version alias <b>googleid</b> with value <b>1.1.1</b>
-         * <p>
-         * If the version is a rich version and cannot be represented as a
-         * single version string, an empty string is returned.
-         * <p>
-         * This version was declared in catalog libs.versions.toml
-         */
-        public Provider<String> getGoogleid() { return getVersion("googleid"); }
-
-        /**
-         * Version alias <b>junit</b> with value <b>4.13.2</b>
-         * <p>
-         * If the version is a rich version and cannot be represented as a
-         * single version string, an empty string is returned.
-         * <p>
-         * This version was declared in catalog libs.versions.toml
-         */
-        public Provider<String> getJunit() { return getVersion("junit"); }
-
-        /**
-         * Version alias <b>junitVersion</b> with value <b>1.2.1</b>
-         * <p>
-         * If the version is a rich version and cannot be represented as a
-         * single version string, an empty string is returned.
-         * <p>
-         * This version was declared in catalog libs.versions.toml
-         */
-        public Provider<String> getJunitVersion() { return getVersion("junitVersion"); }
-
-        /**
-         * Version alias <b>material</b> with value <b>1.12.0</b>
-         * <p>
-         * If the version is a rich version and cannot be represented as a
-         * single version string, an empty string is returned.
-         * <p>
-         * This version was declared in catalog libs.versions.toml
-         */
-        public Provider<String> getMaterial() { return getVersion("material"); }
-
-        /**
-         * Version alias <b>picasso</b> with value <b>2.5.2</b>
-         * <p>
-         * If the version is a rich version and cannot be represented as a
-         * single version string, an empty string is returned.
-         * <p>
-         * This version was declared in catalog libs.versions.toml
-         */
-        public Provider<String> getPicasso() { return getVersion("picasso"); }
-
-        /**
-         * Version alias <b>volley</b> with value <b>1.2.1</b>
-         * <p>
-         * If the version is a rich version and cannot be represented as a
-         * single version string, an empty string is returned.
-         * <p>
-         * This version was declared in catalog libs.versions.toml
-         */
-        public Provider<String> getVolley() { return getVersion("volley"); }
-
-    }
-
-    /**
-     * @deprecated Will be removed in Gradle 9.0.
-     */
-    @Deprecated
-    public static class BundleAccessors extends BundleFactory {
-
-        public BundleAccessors(ObjectFactory objects, ProviderFactory providers, DefaultVersionCatalog config, ImmutableAttributesFactory attributesFactory, CapabilityNotationParser capabilityNotationParser) { super(objects, providers, config, attributesFactory, capabilityNotationParser); }
-
-    }
-
-    public static class PluginAccessors extends PluginFactory {
-        private final AndroidPluginAccessors paccForAndroidPluginAccessors = new AndroidPluginAccessors(providers, config);
-
-        public PluginAccessors(ProviderFactory providers, DefaultVersionCatalog config) { super(providers, config); }
-
-        /**
-         * Group of plugins at <b>plugins.android</b>
-         */
-        public AndroidPluginAccessors getAndroid() {
-            return paccForAndroidPluginAccessors;
-        }
-
-    }
-
-    public static class AndroidPluginAccessors extends PluginFactory {
-
-        public AndroidPluginAccessors(ProviderFactory providers, DefaultVersionCatalog config) { super(providers, config); }
-
-        /**
-         * Plugin provider for <b>android.application</b> with plugin id <b>com.android.application</b> and
-         * with version reference <b>agp</b>
-         * <p>
-         * This plugin was declared in catalog libs.versions.toml
-         */
-        public Provider<PluginDependency> getApplication() { return createPlugin("android.application"); }
-
-    }
-
-}
Index: .gradle/8.10.2/dependencies-accessors/d234bd1a5da98e4123f8ad3669bc07c5dcfd0093/sources/org/gradle/accessors/dm/LibrariesForLibs.java
===================================================================
diff --git a/.gradle/8.10.2/dependencies-accessors/d234bd1a5da98e4123f8ad3669bc07c5dcfd0093/sources/org/gradle/accessors/dm/LibrariesForLibs.java b/.gradle/8.10.2/dependencies-accessors/d234bd1a5da98e4123f8ad3669bc07c5dcfd0093/sources/org/gradle/accessors/dm/LibrariesForLibs.java
deleted file mode 100644
--- a/.gradle/8.10.2/dependencies-accessors/d234bd1a5da98e4123f8ad3669bc07c5dcfd0093/sources/org/gradle/accessors/dm/LibrariesForLibs.java	(revision ae433e1ac5ebbc2f83dc0bb022436f30fb4e6989)
+++ /dev/null	(revision ae433e1ac5ebbc2f83dc0bb022436f30fb4e6989)
@@ -1,445 +0,0 @@
-package org.gradle.accessors.dm;
-
-import org.gradle.api.NonNullApi;
-import org.gradle.api.artifacts.MinimalExternalModuleDependency;
-import org.gradle.plugin.use.PluginDependency;
-import org.gradle.api.artifacts.ExternalModuleDependencyBundle;
-import org.gradle.api.artifacts.MutableVersionConstraint;
-import org.gradle.api.provider.Provider;
-import org.gradle.api.model.ObjectFactory;
-import org.gradle.api.provider.ProviderFactory;
-import org.gradle.api.internal.catalog.AbstractExternalDependencyFactory;
-import org.gradle.api.internal.catalog.DefaultVersionCatalog;
-import java.util.Map;
-import org.gradle.api.internal.attributes.ImmutableAttributesFactory;
-import org.gradle.api.internal.artifacts.dsl.CapabilityNotationParser;
-import javax.inject.Inject;
-
-/**
- * A catalog of dependencies accessible via the {@code libs} extension.
- */
-@NonNullApi
-public class LibrariesForLibs extends AbstractExternalDependencyFactory {
-
-    private final AbstractExternalDependencyFactory owner = this;
-    private final EspressoLibraryAccessors laccForEspressoLibraryAccessors = new EspressoLibraryAccessors(owner);
-    private final ExtLibraryAccessors laccForExtLibraryAccessors = new ExtLibraryAccessors(owner);
-    private final GlideLibraryAccessors laccForGlideLibraryAccessors = new GlideLibraryAccessors(owner);
-    private final PlayLibraryAccessors laccForPlayLibraryAccessors = new PlayLibraryAccessors(owner);
-    private final VersionAccessors vaccForVersionAccessors = new VersionAccessors(providers, config);
-    private final BundleAccessors baccForBundleAccessors = new BundleAccessors(objects, providers, config, attributesFactory, capabilityNotationParser);
-    private final PluginAccessors paccForPluginAccessors = new PluginAccessors(providers, config);
-
-    @Inject
-    public LibrariesForLibs(DefaultVersionCatalog config, ProviderFactory providers, ObjectFactory objects, ImmutableAttributesFactory attributesFactory, CapabilityNotationParser capabilityNotationParser) {
-        super(config, providers, objects, attributesFactory, capabilityNotationParser);
-    }
-
-    /**
-     * Dependency provider for <b>activity</b> with <b>androidx.activity:activity</b> coordinates and
-     * with version reference <b>activity</b>
-     * <p>
-     * This dependency was declared in catalog libs.versions.toml
-     */
-    public Provider<MinimalExternalModuleDependency> getActivity() {
-        return create("activity");
-    }
-
-    /**
-     * Dependency provider for <b>appcompat</b> with <b>androidx.appcompat:appcompat</b> coordinates and
-     * with version reference <b>appcompat</b>
-     * <p>
-     * This dependency was declared in catalog libs.versions.toml
-     */
-    public Provider<MinimalExternalModuleDependency> getAppcompat() {
-        return create("appcompat");
-    }
-
-    /**
-     * Dependency provider for <b>circleimageview</b> with <b>de.hdodenhof:circleimageview</b> coordinates and
-     * with version reference <b>circleimageview</b>
-     * <p>
-     * This dependency was declared in catalog libs.versions.toml
-     */
-    public Provider<MinimalExternalModuleDependency> getCircleimageview() {
-        return create("circleimageview");
-    }
-
-    /**
-     * Dependency provider for <b>constraintlayout</b> with <b>androidx.constraintlayout:constraintlayout</b> coordinates and
-     * with version reference <b>constraintlayout</b>
-     * <p>
-     * This dependency was declared in catalog libs.versions.toml
-     */
-    public Provider<MinimalExternalModuleDependency> getConstraintlayout() {
-        return create("constraintlayout");
-    }
-
-    /**
-     * Dependency provider for <b>core</b> with <b>androidx.core:core</b> coordinates and
-     * with version reference <b>core</b>
-     * <p>
-     * This dependency was declared in catalog libs.versions.toml
-     */
-    public Provider<MinimalExternalModuleDependency> getCore() {
-        return create("core");
-    }
-
-    /**
-     * Dependency provider for <b>junit</b> with <b>junit:junit</b> coordinates and
-     * with version reference <b>junit</b>
-     * <p>
-     * This dependency was declared in catalog libs.versions.toml
-     */
-    public Provider<MinimalExternalModuleDependency> getJunit() {
-        return create("junit");
-    }
-
-    /**
-     * Dependency provider for <b>material</b> with <b>com.google.android.material:material</b> coordinates and
-     * with version reference <b>material</b>
-     * <p>
-     * This dependency was declared in catalog libs.versions.toml
-     */
-    public Provider<MinimalExternalModuleDependency> getMaterial() {
-        return create("material");
-    }
-
-    /**
-     * Dependency provider for <b>picasso</b> with <b>com.squareup.picasso:picasso</b> coordinates and
-     * with version reference <b>picasso</b>
-     * <p>
-     * This dependency was declared in catalog libs.versions.toml
-     */
-    public Provider<MinimalExternalModuleDependency> getPicasso() {
-        return create("picasso");
-    }
-
-    /**
-     * Dependency provider for <b>volley</b> with <b>com.android.volley:volley</b> coordinates and
-     * with version reference <b>volley</b>
-     * <p>
-     * This dependency was declared in catalog libs.versions.toml
-     */
-    public Provider<MinimalExternalModuleDependency> getVolley() {
-        return create("volley");
-    }
-
-    /**
-     * Group of libraries at <b>espresso</b>
-     */
-    public EspressoLibraryAccessors getEspresso() {
-        return laccForEspressoLibraryAccessors;
-    }
-
-    /**
-     * Group of libraries at <b>ext</b>
-     */
-    public ExtLibraryAccessors getExt() {
-        return laccForExtLibraryAccessors;
-    }
-
-    /**
-     * Group of libraries at <b>glide</b>
-     */
-    public GlideLibraryAccessors getGlide() {
-        return laccForGlideLibraryAccessors;
-    }
-
-    /**
-     * Group of libraries at <b>play</b>
-     */
-    public PlayLibraryAccessors getPlay() {
-        return laccForPlayLibraryAccessors;
-    }
-
-    /**
-     * Group of versions at <b>versions</b>
-     */
-    public VersionAccessors getVersions() {
-        return vaccForVersionAccessors;
-    }
-
-    /**
-     * Group of bundles at <b>bundles</b>
-     */
-    public BundleAccessors getBundles() {
-        return baccForBundleAccessors;
-    }
-
-    /**
-     * Group of plugins at <b>plugins</b>
-     */
-    public PluginAccessors getPlugins() {
-        return paccForPluginAccessors;
-    }
-
-    public static class EspressoLibraryAccessors extends SubDependencyFactory {
-
-        public EspressoLibraryAccessors(AbstractExternalDependencyFactory owner) { super(owner); }
-
-        /**
-         * Dependency provider for <b>core</b> with <b>androidx.test.espresso:espresso-core</b> coordinates and
-         * with version reference <b>espressoCore</b>
-         * <p>
-         * This dependency was declared in catalog libs.versions.toml
-         */
-        public Provider<MinimalExternalModuleDependency> getCore() {
-            return create("espresso.core");
-        }
-
-    }
-
-    public static class ExtLibraryAccessors extends SubDependencyFactory {
-
-        public ExtLibraryAccessors(AbstractExternalDependencyFactory owner) { super(owner); }
-
-        /**
-         * Dependency provider for <b>junit</b> with <b>androidx.test.ext:junit</b> coordinates and
-         * with version reference <b>junitVersion</b>
-         * <p>
-         * This dependency was declared in catalog libs.versions.toml
-         */
-        public Provider<MinimalExternalModuleDependency> getJunit() {
-            return create("ext.junit");
-        }
-
-    }
-
-    public static class GlideLibraryAccessors extends SubDependencyFactory implements DependencyNotationSupplier {
-
-        public GlideLibraryAccessors(AbstractExternalDependencyFactory owner) { super(owner); }
-
-        /**
-         * Dependency provider for <b>glide</b> with <b>com.github.bumptech.glide:glide</b> coordinates and
-         * with version <b>4.16.0</b>
-         * <p>
-         * This dependency was declared in catalog libs.versions.toml
-         */
-        public Provider<MinimalExternalModuleDependency> asProvider() {
-            return create("glide");
-        }
-
-        /**
-         * Dependency provider for <b>compiler</b> with <b>com.github.bumptech.glide:compiler</b> coordinates and
-         * with version <b>4.16.0</b>
-         * <p>
-         * This dependency was declared in catalog libs.versions.toml
-         */
-        public Provider<MinimalExternalModuleDependency> getCompiler() {
-            return create("glide.compiler");
-        }
-
-        /**
-         * Dependency provider for <b>okhttp3</b> with <b>com.github.bumptech.glide:okhttp3-integration</b> coordinates and
-         * with version <b>4.16.0</b>
-         * <p>
-         * This dependency was declared in catalog libs.versions.toml
-         */
-        public Provider<MinimalExternalModuleDependency> getOkhttp3() {
-            return create("glide.okhttp3");
-        }
-
-    }
-
-    public static class PlayLibraryAccessors extends SubDependencyFactory {
-        private final PlayServicesLibraryAccessors laccForPlayServicesLibraryAccessors = new PlayServicesLibraryAccessors(owner);
-
-        public PlayLibraryAccessors(AbstractExternalDependencyFactory owner) { super(owner); }
-
-        /**
-         * Group of libraries at <b>play.services</b>
-         */
-        public PlayServicesLibraryAccessors getServices() {
-            return laccForPlayServicesLibraryAccessors;
-        }
-
-    }
-
-    public static class PlayServicesLibraryAccessors extends SubDependencyFactory {
-
-        public PlayServicesLibraryAccessors(AbstractExternalDependencyFactory owner) { super(owner); }
-
-        /**
-         * Dependency provider for <b>auth</b> with <b>com.google.android.gms:play-services-auth</b> coordinates and
-         * with version reference <b>playServicesAuth</b>
-         * <p>
-         * This dependency was declared in catalog libs.versions.toml
-         */
-        public Provider<MinimalExternalModuleDependency> getAuth() {
-            return create("play.services.auth");
-        }
-
-    }
-
-    public static class VersionAccessors extends VersionFactory  {
-
-        public VersionAccessors(ProviderFactory providers, DefaultVersionCatalog config) { super(providers, config); }
-
-        /**
-         * Version alias <b>activity</b> with value <b>1.10.1</b>
-         * <p>
-         * If the version is a rich version and cannot be represented as a
-         * single version string, an empty string is returned.
-         * <p>
-         * This version was declared in catalog libs.versions.toml
-         */
-        public Provider<String> getActivity() { return getVersion("activity"); }
-
-        /**
-         * Version alias <b>agp</b> with value <b>8.8.0</b>
-         * <p>
-         * If the version is a rich version and cannot be represented as a
-         * single version string, an empty string is returned.
-         * <p>
-         * This version was declared in catalog libs.versions.toml
-         */
-        public Provider<String> getAgp() { return getVersion("agp"); }
-
-        /**
-         * Version alias <b>appcompat</b> with value <b>1.7.0</b>
-         * <p>
-         * If the version is a rich version and cannot be represented as a
-         * single version string, an empty string is returned.
-         * <p>
-         * This version was declared in catalog libs.versions.toml
-         */
-        public Provider<String> getAppcompat() { return getVersion("appcompat"); }
-
-        /**
-         * Version alias <b>circleimageview</b> with value <b>3.0.0</b>
-         * <p>
-         * If the version is a rich version and cannot be represented as a
-         * single version string, an empty string is returned.
-         * <p>
-         * This version was declared in catalog libs.versions.toml
-         */
-        public Provider<String> getCircleimageview() { return getVersion("circleimageview"); }
-
-        /**
-         * Version alias <b>constraintlayout</b> with value <b>2.2.1</b>
-         * <p>
-         * If the version is a rich version and cannot be represented as a
-         * single version string, an empty string is returned.
-         * <p>
-         * This version was declared in catalog libs.versions.toml
-         */
-        public Provider<String> getConstraintlayout() { return getVersion("constraintlayout"); }
-
-        /**
-         * Version alias <b>core</b> with value <b>1.16.0</b>
-         * <p>
-         * If the version is a rich version and cannot be represented as a
-         * single version string, an empty string is returned.
-         * <p>
-         * This version was declared in catalog libs.versions.toml
-         */
-        public Provider<String> getCore() { return getVersion("core"); }
-
-        /**
-         * Version alias <b>espressoCore</b> with value <b>3.6.1</b>
-         * <p>
-         * If the version is a rich version and cannot be represented as a
-         * single version string, an empty string is returned.
-         * <p>
-         * This version was declared in catalog libs.versions.toml
-         */
-        public Provider<String> getEspressoCore() { return getVersion("espressoCore"); }
-
-        /**
-         * Version alias <b>junit</b> with value <b>4.13.2</b>
-         * <p>
-         * If the version is a rich version and cannot be represented as a
-         * single version string, an empty string is returned.
-         * <p>
-         * This version was declared in catalog libs.versions.toml
-         */
-        public Provider<String> getJunit() { return getVersion("junit"); }
-
-        /**
-         * Version alias <b>junitVersion</b> with value <b>1.2.1</b>
-         * <p>
-         * If the version is a rich version and cannot be represented as a
-         * single version string, an empty string is returned.
-         * <p>
-         * This version was declared in catalog libs.versions.toml
-         */
-        public Provider<String> getJunitVersion() { return getVersion("junitVersion"); }
-
-        /**
-         * Version alias <b>material</b> with value <b>1.12.0</b>
-         * <p>
-         * If the version is a rich version and cannot be represented as a
-         * single version string, an empty string is returned.
-         * <p>
-         * This version was declared in catalog libs.versions.toml
-         */
-        public Provider<String> getMaterial() { return getVersion("material"); }
-
-        /**
-         * Version alias <b>picasso</b> with value <b>2.5.2</b>
-         * <p>
-         * If the version is a rich version and cannot be represented as a
-         * single version string, an empty string is returned.
-         * <p>
-         * This version was declared in catalog libs.versions.toml
-         */
-        public Provider<String> getPicasso() { return getVersion("picasso"); }
-
-        /**
-         * Version alias <b>playServicesAuth</b> with value <b>21.3.0</b>
-         * <p>
-         * If the version is a rich version and cannot be represented as a
-         * single version string, an empty string is returned.
-         * <p>
-         * This version was declared in catalog libs.versions.toml
-         */
-        public Provider<String> getPlayServicesAuth() { return getVersion("playServicesAuth"); }
-
-        /**
-         * Version alias <b>volley</b> with value <b>1.2.1</b>
-         * <p>
-         * If the version is a rich version and cannot be represented as a
-         * single version string, an empty string is returned.
-         * <p>
-         * This version was declared in catalog libs.versions.toml
-         */
-        public Provider<String> getVolley() { return getVersion("volley"); }
-
-    }
-
-    public static class BundleAccessors extends BundleFactory {
-
-        public BundleAccessors(ObjectFactory objects, ProviderFactory providers, DefaultVersionCatalog config, ImmutableAttributesFactory attributesFactory, CapabilityNotationParser capabilityNotationParser) { super(objects, providers, config, attributesFactory, capabilityNotationParser); }
-
-    }
-
-    public static class PluginAccessors extends PluginFactory {
-        private final AndroidPluginAccessors paccForAndroidPluginAccessors = new AndroidPluginAccessors(providers, config);
-
-        public PluginAccessors(ProviderFactory providers, DefaultVersionCatalog config) { super(providers, config); }
-
-        /**
-         * Group of plugins at <b>plugins.android</b>
-         */
-        public AndroidPluginAccessors getAndroid() {
-            return paccForAndroidPluginAccessors;
-        }
-
-    }
-
-    public static class AndroidPluginAccessors extends PluginFactory {
-
-        public AndroidPluginAccessors(ProviderFactory providers, DefaultVersionCatalog config) { super(providers, config); }
-
-        /**
-         * Plugin provider for <b>android.application</b> with plugin id <b>com.android.application</b> and
-         * with version reference <b>agp</b>
-         * <p>
-         * This plugin was declared in catalog libs.versions.toml
-         */
-        public Provider<PluginDependency> getApplication() { return createPlugin("android.application"); }
-
-    }
-
-}
Index: .gradle/8.10.2/dependencies-accessors/b612d7925e67c933357fef2f4788dd32ba4e87fc/sources/org/gradle/accessors/dm/LibrariesForLibs.java
===================================================================
diff --git a/.gradle/8.10.2/dependencies-accessors/b612d7925e67c933357fef2f4788dd32ba4e87fc/sources/org/gradle/accessors/dm/LibrariesForLibs.java b/.gradle/8.10.2/dependencies-accessors/b612d7925e67c933357fef2f4788dd32ba4e87fc/sources/org/gradle/accessors/dm/LibrariesForLibs.java
deleted file mode 100644
--- a/.gradle/8.10.2/dependencies-accessors/b612d7925e67c933357fef2f4788dd32ba4e87fc/sources/org/gradle/accessors/dm/LibrariesForLibs.java	(revision ae433e1ac5ebbc2f83dc0bb022436f30fb4e6989)
+++ /dev/null	(revision ae433e1ac5ebbc2f83dc0bb022436f30fb4e6989)
@@ -1,425 +0,0 @@
-package org.gradle.accessors.dm;
-
-import org.gradle.api.NonNullApi;
-import org.gradle.api.artifacts.MinimalExternalModuleDependency;
-import org.gradle.plugin.use.PluginDependency;
-import org.gradle.api.artifacts.ExternalModuleDependencyBundle;
-import org.gradle.api.artifacts.MutableVersionConstraint;
-import org.gradle.api.provider.Provider;
-import org.gradle.api.model.ObjectFactory;
-import org.gradle.api.provider.ProviderFactory;
-import org.gradle.api.internal.catalog.AbstractExternalDependencyFactory;
-import org.gradle.api.internal.catalog.DefaultVersionCatalog;
-import java.util.Map;
-import org.gradle.api.internal.attributes.ImmutableAttributesFactory;
-import org.gradle.api.internal.artifacts.dsl.CapabilityNotationParser;
-import javax.inject.Inject;
-
-/**
- * A catalog of dependencies accessible via the {@code libs} extension.
- */
-@NonNullApi
-public class LibrariesForLibs extends AbstractExternalDependencyFactory {
-
-    private final AbstractExternalDependencyFactory owner = this;
-    private final EspressoLibraryAccessors laccForEspressoLibraryAccessors = new EspressoLibraryAccessors(owner);
-    private final ExtLibraryAccessors laccForExtLibraryAccessors = new ExtLibraryAccessors(owner);
-    private final GlideLibraryAccessors laccForGlideLibraryAccessors = new GlideLibraryAccessors(owner);
-    private final PlayLibraryAccessors laccForPlayLibraryAccessors = new PlayLibraryAccessors(owner);
-    private final VersionAccessors vaccForVersionAccessors = new VersionAccessors(providers, config);
-    private final BundleAccessors baccForBundleAccessors = new BundleAccessors(objects, providers, config, attributesFactory, capabilityNotationParser);
-    private final PluginAccessors paccForPluginAccessors = new PluginAccessors(providers, config);
-
-    @Inject
-    public LibrariesForLibs(DefaultVersionCatalog config, ProviderFactory providers, ObjectFactory objects, ImmutableAttributesFactory attributesFactory, CapabilityNotationParser capabilityNotationParser) {
-        super(config, providers, objects, attributesFactory, capabilityNotationParser);
-    }
-
-    /**
-     * Dependency provider for <b>activity</b> with <b>androidx.activity:activity</b> coordinates and
-     * with version reference <b>activity</b>
-     * <p>
-     * This dependency was declared in catalog libs.versions.toml
-     */
-    public Provider<MinimalExternalModuleDependency> getActivity() {
-        return create("activity");
-    }
-
-    /**
-     * Dependency provider for <b>appcompat</b> with <b>androidx.appcompat:appcompat</b> coordinates and
-     * with version reference <b>appcompat</b>
-     * <p>
-     * This dependency was declared in catalog libs.versions.toml
-     */
-    public Provider<MinimalExternalModuleDependency> getAppcompat() {
-        return create("appcompat");
-    }
-
-    /**
-     * Dependency provider for <b>circleimageview</b> with <b>de.hdodenhof:circleimageview</b> coordinates and
-     * with version reference <b>circleimageview</b>
-     * <p>
-     * This dependency was declared in catalog libs.versions.toml
-     */
-    public Provider<MinimalExternalModuleDependency> getCircleimageview() {
-        return create("circleimageview");
-    }
-
-    /**
-     * Dependency provider for <b>constraintlayout</b> with <b>androidx.constraintlayout:constraintlayout</b> coordinates and
-     * with version reference <b>constraintlayout</b>
-     * <p>
-     * This dependency was declared in catalog libs.versions.toml
-     */
-    public Provider<MinimalExternalModuleDependency> getConstraintlayout() {
-        return create("constraintlayout");
-    }
-
-    /**
-     * Dependency provider for <b>junit</b> with <b>junit:junit</b> coordinates and
-     * with version reference <b>junit</b>
-     * <p>
-     * This dependency was declared in catalog libs.versions.toml
-     */
-    public Provider<MinimalExternalModuleDependency> getJunit() {
-        return create("junit");
-    }
-
-    /**
-     * Dependency provider for <b>material</b> with <b>com.google.android.material:material</b> coordinates and
-     * with version reference <b>material</b>
-     * <p>
-     * This dependency was declared in catalog libs.versions.toml
-     */
-    public Provider<MinimalExternalModuleDependency> getMaterial() {
-        return create("material");
-    }
-
-    /**
-     * Dependency provider for <b>picasso</b> with <b>com.squareup.picasso:picasso</b> coordinates and
-     * with version reference <b>picasso</b>
-     * <p>
-     * This dependency was declared in catalog libs.versions.toml
-     */
-    public Provider<MinimalExternalModuleDependency> getPicasso() {
-        return create("picasso");
-    }
-
-    /**
-     * Dependency provider for <b>volley</b> with <b>com.android.volley:volley</b> coordinates and
-     * with version reference <b>volley</b>
-     * <p>
-     * This dependency was declared in catalog libs.versions.toml
-     */
-    public Provider<MinimalExternalModuleDependency> getVolley() {
-        return create("volley");
-    }
-
-    /**
-     * Group of libraries at <b>espresso</b>
-     */
-    public EspressoLibraryAccessors getEspresso() {
-        return laccForEspressoLibraryAccessors;
-    }
-
-    /**
-     * Group of libraries at <b>ext</b>
-     */
-    public ExtLibraryAccessors getExt() {
-        return laccForExtLibraryAccessors;
-    }
-
-    /**
-     * Group of libraries at <b>glide</b>
-     */
-    public GlideLibraryAccessors getGlide() {
-        return laccForGlideLibraryAccessors;
-    }
-
-    /**
-     * Group of libraries at <b>play</b>
-     */
-    public PlayLibraryAccessors getPlay() {
-        return laccForPlayLibraryAccessors;
-    }
-
-    /**
-     * Group of versions at <b>versions</b>
-     */
-    public VersionAccessors getVersions() {
-        return vaccForVersionAccessors;
-    }
-
-    /**
-     * Group of bundles at <b>bundles</b>
-     */
-    public BundleAccessors getBundles() {
-        return baccForBundleAccessors;
-    }
-
-    /**
-     * Group of plugins at <b>plugins</b>
-     */
-    public PluginAccessors getPlugins() {
-        return paccForPluginAccessors;
-    }
-
-    public static class EspressoLibraryAccessors extends SubDependencyFactory {
-
-        public EspressoLibraryAccessors(AbstractExternalDependencyFactory owner) { super(owner); }
-
-        /**
-         * Dependency provider for <b>core</b> with <b>androidx.test.espresso:espresso-core</b> coordinates and
-         * with version reference <b>espressoCore</b>
-         * <p>
-         * This dependency was declared in catalog libs.versions.toml
-         */
-        public Provider<MinimalExternalModuleDependency> getCore() {
-            return create("espresso.core");
-        }
-
-    }
-
-    public static class ExtLibraryAccessors extends SubDependencyFactory {
-
-        public ExtLibraryAccessors(AbstractExternalDependencyFactory owner) { super(owner); }
-
-        /**
-         * Dependency provider for <b>junit</b> with <b>androidx.test.ext:junit</b> coordinates and
-         * with version reference <b>junitVersion</b>
-         * <p>
-         * This dependency was declared in catalog libs.versions.toml
-         */
-        public Provider<MinimalExternalModuleDependency> getJunit() {
-            return create("ext.junit");
-        }
-
-    }
-
-    public static class GlideLibraryAccessors extends SubDependencyFactory implements DependencyNotationSupplier {
-
-        public GlideLibraryAccessors(AbstractExternalDependencyFactory owner) { super(owner); }
-
-        /**
-         * Dependency provider for <b>glide</b> with <b>com.github.bumptech.glide:glide</b> coordinates and
-         * with version <b>4.16.0</b>
-         * <p>
-         * This dependency was declared in catalog libs.versions.toml
-         */
-        public Provider<MinimalExternalModuleDependency> asProvider() {
-            return create("glide");
-        }
-
-        /**
-         * Dependency provider for <b>compiler</b> with <b>com.github.bumptech.glide:compiler</b> coordinates and
-         * with version <b>4.16.0</b>
-         * <p>
-         * This dependency was declared in catalog libs.versions.toml
-         */
-        public Provider<MinimalExternalModuleDependency> getCompiler() {
-            return create("glide.compiler");
-        }
-
-        /**
-         * Dependency provider for <b>okhttp3</b> with <b>com.github.bumptech.glide:okhttp3-integration</b> coordinates and
-         * with version <b>4.16.0</b>
-         * <p>
-         * This dependency was declared in catalog libs.versions.toml
-         */
-        public Provider<MinimalExternalModuleDependency> getOkhttp3() {
-            return create("glide.okhttp3");
-        }
-
-    }
-
-    public static class PlayLibraryAccessors extends SubDependencyFactory {
-        private final PlayServicesLibraryAccessors laccForPlayServicesLibraryAccessors = new PlayServicesLibraryAccessors(owner);
-
-        public PlayLibraryAccessors(AbstractExternalDependencyFactory owner) { super(owner); }
-
-        /**
-         * Group of libraries at <b>play.services</b>
-         */
-        public PlayServicesLibraryAccessors getServices() {
-            return laccForPlayServicesLibraryAccessors;
-        }
-
-    }
-
-    public static class PlayServicesLibraryAccessors extends SubDependencyFactory {
-
-        public PlayServicesLibraryAccessors(AbstractExternalDependencyFactory owner) { super(owner); }
-
-        /**
-         * Dependency provider for <b>auth</b> with <b>com.google.android.gms:play-services-auth</b> coordinates and
-         * with version reference <b>playServicesAuth</b>
-         * <p>
-         * This dependency was declared in catalog libs.versions.toml
-         */
-        public Provider<MinimalExternalModuleDependency> getAuth() {
-            return create("play.services.auth");
-        }
-
-    }
-
-    public static class VersionAccessors extends VersionFactory  {
-
-        public VersionAccessors(ProviderFactory providers, DefaultVersionCatalog config) { super(providers, config); }
-
-        /**
-         * Version alias <b>activity</b> with value <b>1.10.1</b>
-         * <p>
-         * If the version is a rich version and cannot be represented as a
-         * single version string, an empty string is returned.
-         * <p>
-         * This version was declared in catalog libs.versions.toml
-         */
-        public Provider<String> getActivity() { return getVersion("activity"); }
-
-        /**
-         * Version alias <b>agp</b> with value <b>8.8.0</b>
-         * <p>
-         * If the version is a rich version and cannot be represented as a
-         * single version string, an empty string is returned.
-         * <p>
-         * This version was declared in catalog libs.versions.toml
-         */
-        public Provider<String> getAgp() { return getVersion("agp"); }
-
-        /**
-         * Version alias <b>appcompat</b> with value <b>1.7.0</b>
-         * <p>
-         * If the version is a rich version and cannot be represented as a
-         * single version string, an empty string is returned.
-         * <p>
-         * This version was declared in catalog libs.versions.toml
-         */
-        public Provider<String> getAppcompat() { return getVersion("appcompat"); }
-
-        /**
-         * Version alias <b>circleimageview</b> with value <b>3.0.0</b>
-         * <p>
-         * If the version is a rich version and cannot be represented as a
-         * single version string, an empty string is returned.
-         * <p>
-         * This version was declared in catalog libs.versions.toml
-         */
-        public Provider<String> getCircleimageview() { return getVersion("circleimageview"); }
-
-        /**
-         * Version alias <b>constraintlayout</b> with value <b>2.2.1</b>
-         * <p>
-         * If the version is a rich version and cannot be represented as a
-         * single version string, an empty string is returned.
-         * <p>
-         * This version was declared in catalog libs.versions.toml
-         */
-        public Provider<String> getConstraintlayout() { return getVersion("constraintlayout"); }
-
-        /**
-         * Version alias <b>espressoCore</b> with value <b>3.6.1</b>
-         * <p>
-         * If the version is a rich version and cannot be represented as a
-         * single version string, an empty string is returned.
-         * <p>
-         * This version was declared in catalog libs.versions.toml
-         */
-        public Provider<String> getEspressoCore() { return getVersion("espressoCore"); }
-
-        /**
-         * Version alias <b>junit</b> with value <b>4.13.2</b>
-         * <p>
-         * If the version is a rich version and cannot be represented as a
-         * single version string, an empty string is returned.
-         * <p>
-         * This version was declared in catalog libs.versions.toml
-         */
-        public Provider<String> getJunit() { return getVersion("junit"); }
-
-        /**
-         * Version alias <b>junitVersion</b> with value <b>1.2.1</b>
-         * <p>
-         * If the version is a rich version and cannot be represented as a
-         * single version string, an empty string is returned.
-         * <p>
-         * This version was declared in catalog libs.versions.toml
-         */
-        public Provider<String> getJunitVersion() { return getVersion("junitVersion"); }
-
-        /**
-         * Version alias <b>material</b> with value <b>1.12.0</b>
-         * <p>
-         * If the version is a rich version and cannot be represented as a
-         * single version string, an empty string is returned.
-         * <p>
-         * This version was declared in catalog libs.versions.toml
-         */
-        public Provider<String> getMaterial() { return getVersion("material"); }
-
-        /**
-         * Version alias <b>picasso</b> with value <b>2.5.2</b>
-         * <p>
-         * If the version is a rich version and cannot be represented as a
-         * single version string, an empty string is returned.
-         * <p>
-         * This version was declared in catalog libs.versions.toml
-         */
-        public Provider<String> getPicasso() { return getVersion("picasso"); }
-
-        /**
-         * Version alias <b>playServicesAuth</b> with value <b>21.3.0</b>
-         * <p>
-         * If the version is a rich version and cannot be represented as a
-         * single version string, an empty string is returned.
-         * <p>
-         * This version was declared in catalog libs.versions.toml
-         */
-        public Provider<String> getPlayServicesAuth() { return getVersion("playServicesAuth"); }
-
-        /**
-         * Version alias <b>volley</b> with value <b>1.2.1</b>
-         * <p>
-         * If the version is a rich version and cannot be represented as a
-         * single version string, an empty string is returned.
-         * <p>
-         * This version was declared in catalog libs.versions.toml
-         */
-        public Provider<String> getVolley() { return getVersion("volley"); }
-
-    }
-
-    public static class BundleAccessors extends BundleFactory {
-
-        public BundleAccessors(ObjectFactory objects, ProviderFactory providers, DefaultVersionCatalog config, ImmutableAttributesFactory attributesFactory, CapabilityNotationParser capabilityNotationParser) { super(objects, providers, config, attributesFactory, capabilityNotationParser); }
-
-    }
-
-    public static class PluginAccessors extends PluginFactory {
-        private final AndroidPluginAccessors paccForAndroidPluginAccessors = new AndroidPluginAccessors(providers, config);
-
-        public PluginAccessors(ProviderFactory providers, DefaultVersionCatalog config) { super(providers, config); }
-
-        /**
-         * Group of plugins at <b>plugins.android</b>
-         */
-        public AndroidPluginAccessors getAndroid() {
-            return paccForAndroidPluginAccessors;
-        }
-
-    }
-
-    public static class AndroidPluginAccessors extends PluginFactory {
-
-        public AndroidPluginAccessors(ProviderFactory providers, DefaultVersionCatalog config) { super(providers, config); }
-
-        /**
-         * Plugin provider for <b>android.application</b> with plugin id <b>com.android.application</b> and
-         * with version reference <b>agp</b>
-         * <p>
-         * This plugin was declared in catalog libs.versions.toml
-         */
-        public Provider<PluginDependency> getApplication() { return createPlugin("android.application"); }
-
-    }
-
-}
Index: .gradle/8.10.2/dependencies-accessors/e5fcb7d79d0dd211eb8566d84565d43d8c6197b9/metadata.bin
===================================================================
diff --git a/.gradle/8.10.2/dependencies-accessors/e5fcb7d79d0dd211eb8566d84565d43d8c6197b9/metadata.bin b/.gradle/8.10.2/dependencies-accessors/e5fcb7d79d0dd211eb8566d84565d43d8c6197b9/metadata.bin
deleted file mode 100644
--- a/.gradle/8.10.2/dependencies-accessors/e5fcb7d79d0dd211eb8566d84565d43d8c6197b9/metadata.bin	(revision ae433e1ac5ebbc2f83dc0bb022436f30fb4e6989)
+++ /dev/null	(revision ae433e1ac5ebbc2f83dc0bb022436f30fb4e6989)
@@ -1,2 +0,0 @@
-�wk7skdes5ndqhkmheum3nb2owa���6���k�آ�*�j���classesB��Ѽ1��0
-y#Z�eǈsources��z��`���$��k�
\ No newline at end of file
Index: .gradle/8.10.2/dependencies-accessors/c5cd8a2fe1b1083f448ddccb7325cc4239c7f698/sources/org/gradle/accessors/dm/LibrariesForLibs.java
===================================================================
diff --git a/.gradle/8.10.2/dependencies-accessors/c5cd8a2fe1b1083f448ddccb7325cc4239c7f698/sources/org/gradle/accessors/dm/LibrariesForLibs.java b/.gradle/8.10.2/dependencies-accessors/c5cd8a2fe1b1083f448ddccb7325cc4239c7f698/sources/org/gradle/accessors/dm/LibrariesForLibs.java
deleted file mode 100644
--- a/.gradle/8.10.2/dependencies-accessors/c5cd8a2fe1b1083f448ddccb7325cc4239c7f698/sources/org/gradle/accessors/dm/LibrariesForLibs.java	(revision ae433e1ac5ebbc2f83dc0bb022436f30fb4e6989)
+++ /dev/null	(revision ae433e1ac5ebbc2f83dc0bb022436f30fb4e6989)
@@ -1,377 +0,0 @@
-package org.gradle.accessors.dm;
-
-import org.gradle.api.NonNullApi;
-import org.gradle.api.artifacts.MinimalExternalModuleDependency;
-import org.gradle.plugin.use.PluginDependency;
-import org.gradle.api.artifacts.ExternalModuleDependencyBundle;
-import org.gradle.api.artifacts.MutableVersionConstraint;
-import org.gradle.api.provider.Provider;
-import org.gradle.api.model.ObjectFactory;
-import org.gradle.api.provider.ProviderFactory;
-import org.gradle.api.internal.catalog.AbstractExternalDependencyFactory;
-import org.gradle.api.internal.catalog.DefaultVersionCatalog;
-import java.util.Map;
-import org.gradle.api.internal.attributes.ImmutableAttributesFactory;
-import org.gradle.api.internal.artifacts.dsl.CapabilityNotationParser;
-import javax.inject.Inject;
-
-/**
- * A catalog of dependencies accessible via the {@code libs} extension.
- */
-@NonNullApi
-public class LibrariesForLibs extends AbstractExternalDependencyFactory {
-
-    private final AbstractExternalDependencyFactory owner = this;
-    private final EspressoLibraryAccessors laccForEspressoLibraryAccessors = new EspressoLibraryAccessors(owner);
-    private final ExtLibraryAccessors laccForExtLibraryAccessors = new ExtLibraryAccessors(owner);
-    private final GlideLibraryAccessors laccForGlideLibraryAccessors = new GlideLibraryAccessors(owner);
-    private final VersionAccessors vaccForVersionAccessors = new VersionAccessors(providers, config);
-    private final BundleAccessors baccForBundleAccessors = new BundleAccessors(objects, providers, config, attributesFactory, capabilityNotationParser);
-    private final PluginAccessors paccForPluginAccessors = new PluginAccessors(providers, config);
-
-    @Inject
-    public LibrariesForLibs(DefaultVersionCatalog config, ProviderFactory providers, ObjectFactory objects, ImmutableAttributesFactory attributesFactory, CapabilityNotationParser capabilityNotationParser) {
-        super(config, providers, objects, attributesFactory, capabilityNotationParser);
-    }
-
-    /**
-     * Dependency provider for <b>activity</b> with <b>androidx.activity:activity</b> coordinates and
-     * with version reference <b>activity</b>
-     * <p>
-     * This dependency was declared in catalog libs.versions.toml
-     */
-    public Provider<MinimalExternalModuleDependency> getActivity() {
-        return create("activity");
-    }
-
-    /**
-     * Dependency provider for <b>appcompat</b> with <b>androidx.appcompat:appcompat</b> coordinates and
-     * with version reference <b>appcompat</b>
-     * <p>
-     * This dependency was declared in catalog libs.versions.toml
-     */
-    public Provider<MinimalExternalModuleDependency> getAppcompat() {
-        return create("appcompat");
-    }
-
-    /**
-     * Dependency provider for <b>circleimageview</b> with <b>de.hdodenhof:circleimageview</b> coordinates and
-     * with version reference <b>circleimageview</b>
-     * <p>
-     * This dependency was declared in catalog libs.versions.toml
-     */
-    public Provider<MinimalExternalModuleDependency> getCircleimageview() {
-        return create("circleimageview");
-    }
-
-    /**
-     * Dependency provider for <b>constraintlayout</b> with <b>androidx.constraintlayout:constraintlayout</b> coordinates and
-     * with version reference <b>constraintlayout</b>
-     * <p>
-     * This dependency was declared in catalog libs.versions.toml
-     */
-    public Provider<MinimalExternalModuleDependency> getConstraintlayout() {
-        return create("constraintlayout");
-    }
-
-    /**
-     * Dependency provider for <b>junit</b> with <b>junit:junit</b> coordinates and
-     * with version reference <b>junit</b>
-     * <p>
-     * This dependency was declared in catalog libs.versions.toml
-     */
-    public Provider<MinimalExternalModuleDependency> getJunit() {
-        return create("junit");
-    }
-
-    /**
-     * Dependency provider for <b>material</b> with <b>com.google.android.material:material</b> coordinates and
-     * with version reference <b>material</b>
-     * <p>
-     * This dependency was declared in catalog libs.versions.toml
-     */
-    public Provider<MinimalExternalModuleDependency> getMaterial() {
-        return create("material");
-    }
-
-    /**
-     * Dependency provider for <b>picasso</b> with <b>com.squareup.picasso:picasso</b> coordinates and
-     * with version reference <b>picasso</b>
-     * <p>
-     * This dependency was declared in catalog libs.versions.toml
-     */
-    public Provider<MinimalExternalModuleDependency> getPicasso() {
-        return create("picasso");
-    }
-
-    /**
-     * Dependency provider for <b>volley</b> with <b>com.android.volley:volley</b> coordinates and
-     * with version reference <b>volley</b>
-     * <p>
-     * This dependency was declared in catalog libs.versions.toml
-     */
-    public Provider<MinimalExternalModuleDependency> getVolley() {
-        return create("volley");
-    }
-
-    /**
-     * Group of libraries at <b>espresso</b>
-     */
-    public EspressoLibraryAccessors getEspresso() {
-        return laccForEspressoLibraryAccessors;
-    }
-
-    /**
-     * Group of libraries at <b>ext</b>
-     */
-    public ExtLibraryAccessors getExt() {
-        return laccForExtLibraryAccessors;
-    }
-
-    /**
-     * Group of libraries at <b>glide</b>
-     */
-    public GlideLibraryAccessors getGlide() {
-        return laccForGlideLibraryAccessors;
-    }
-
-    /**
-     * Group of versions at <b>versions</b>
-     */
-    public VersionAccessors getVersions() {
-        return vaccForVersionAccessors;
-    }
-
-    /**
-     * Group of bundles at <b>bundles</b>
-     */
-    public BundleAccessors getBundles() {
-        return baccForBundleAccessors;
-    }
-
-    /**
-     * Group of plugins at <b>plugins</b>
-     */
-    public PluginAccessors getPlugins() {
-        return paccForPluginAccessors;
-    }
-
-    public static class EspressoLibraryAccessors extends SubDependencyFactory {
-
-        public EspressoLibraryAccessors(AbstractExternalDependencyFactory owner) { super(owner); }
-
-        /**
-         * Dependency provider for <b>core</b> with <b>androidx.test.espresso:espresso-core</b> coordinates and
-         * with version reference <b>espressoCore</b>
-         * <p>
-         * This dependency was declared in catalog libs.versions.toml
-         */
-        public Provider<MinimalExternalModuleDependency> getCore() {
-            return create("espresso.core");
-        }
-
-    }
-
-    public static class ExtLibraryAccessors extends SubDependencyFactory {
-
-        public ExtLibraryAccessors(AbstractExternalDependencyFactory owner) { super(owner); }
-
-        /**
-         * Dependency provider for <b>junit</b> with <b>androidx.test.ext:junit</b> coordinates and
-         * with version reference <b>junitVersion</b>
-         * <p>
-         * This dependency was declared in catalog libs.versions.toml
-         */
-        public Provider<MinimalExternalModuleDependency> getJunit() {
-            return create("ext.junit");
-        }
-
-    }
-
-    public static class GlideLibraryAccessors extends SubDependencyFactory implements DependencyNotationSupplier {
-
-        public GlideLibraryAccessors(AbstractExternalDependencyFactory owner) { super(owner); }
-
-        /**
-         * Dependency provider for <b>glide</b> with <b>com.github.bumptech.glide:glide</b> coordinates and
-         * with version <b>4.16.0</b>
-         * <p>
-         * This dependency was declared in catalog libs.versions.toml
-         */
-        public Provider<MinimalExternalModuleDependency> asProvider() {
-            return create("glide");
-        }
-
-        /**
-         * Dependency provider for <b>compiler</b> with <b>com.github.bumptech.glide:compiler</b> coordinates and
-         * with version <b>4.16.0</b>
-         * <p>
-         * This dependency was declared in catalog libs.versions.toml
-         */
-        public Provider<MinimalExternalModuleDependency> getCompiler() {
-            return create("glide.compiler");
-        }
-
-        /**
-         * Dependency provider for <b>okhttp3</b> with <b>com.github.bumptech.glide:okhttp3-integration</b> coordinates and
-         * with version <b>4.16.0</b>
-         * <p>
-         * This dependency was declared in catalog libs.versions.toml
-         */
-        public Provider<MinimalExternalModuleDependency> getOkhttp3() {
-            return create("glide.okhttp3");
-        }
-
-    }
-
-    public static class VersionAccessors extends VersionFactory  {
-
-        public VersionAccessors(ProviderFactory providers, DefaultVersionCatalog config) { super(providers, config); }
-
-        /**
-         * Version alias <b>activity</b> with value <b>1.10.1</b>
-         * <p>
-         * If the version is a rich version and cannot be represented as a
-         * single version string, an empty string is returned.
-         * <p>
-         * This version was declared in catalog libs.versions.toml
-         */
-        public Provider<String> getActivity() { return getVersion("activity"); }
-
-        /**
-         * Version alias <b>agp</b> with value <b>8.8.0</b>
-         * <p>
-         * If the version is a rich version and cannot be represented as a
-         * single version string, an empty string is returned.
-         * <p>
-         * This version was declared in catalog libs.versions.toml
-         */
-        public Provider<String> getAgp() { return getVersion("agp"); }
-
-        /**
-         * Version alias <b>appcompat</b> with value <b>1.7.0</b>
-         * <p>
-         * If the version is a rich version and cannot be represented as a
-         * single version string, an empty string is returned.
-         * <p>
-         * This version was declared in catalog libs.versions.toml
-         */
-        public Provider<String> getAppcompat() { return getVersion("appcompat"); }
-
-        /**
-         * Version alias <b>circleimageview</b> with value <b>3.0.0</b>
-         * <p>
-         * If the version is a rich version and cannot be represented as a
-         * single version string, an empty string is returned.
-         * <p>
-         * This version was declared in catalog libs.versions.toml
-         */
-        public Provider<String> getCircleimageview() { return getVersion("circleimageview"); }
-
-        /**
-         * Version alias <b>constraintlayout</b> with value <b>2.2.1</b>
-         * <p>
-         * If the version is a rich version and cannot be represented as a
-         * single version string, an empty string is returned.
-         * <p>
-         * This version was declared in catalog libs.versions.toml
-         */
-        public Provider<String> getConstraintlayout() { return getVersion("constraintlayout"); }
-
-        /**
-         * Version alias <b>espressoCore</b> with value <b>3.6.1</b>
-         * <p>
-         * If the version is a rich version and cannot be represented as a
-         * single version string, an empty string is returned.
-         * <p>
-         * This version was declared in catalog libs.versions.toml
-         */
-        public Provider<String> getEspressoCore() { return getVersion("espressoCore"); }
-
-        /**
-         * Version alias <b>junit</b> with value <b>4.13.2</b>
-         * <p>
-         * If the version is a rich version and cannot be represented as a
-         * single version string, an empty string is returned.
-         * <p>
-         * This version was declared in catalog libs.versions.toml
-         */
-        public Provider<String> getJunit() { return getVersion("junit"); }
-
-        /**
-         * Version alias <b>junitVersion</b> with value <b>1.2.1</b>
-         * <p>
-         * If the version is a rich version and cannot be represented as a
-         * single version string, an empty string is returned.
-         * <p>
-         * This version was declared in catalog libs.versions.toml
-         */
-        public Provider<String> getJunitVersion() { return getVersion("junitVersion"); }
-
-        /**
-         * Version alias <b>material</b> with value <b>1.12.0</b>
-         * <p>
-         * If the version is a rich version and cannot be represented as a
-         * single version string, an empty string is returned.
-         * <p>
-         * This version was declared in catalog libs.versions.toml
-         */
-        public Provider<String> getMaterial() { return getVersion("material"); }
-
-        /**
-         * Version alias <b>picasso</b> with value <b>2.5.2</b>
-         * <p>
-         * If the version is a rich version and cannot be represented as a
-         * single version string, an empty string is returned.
-         * <p>
-         * This version was declared in catalog libs.versions.toml
-         */
-        public Provider<String> getPicasso() { return getVersion("picasso"); }
-
-        /**
-         * Version alias <b>volley</b> with value <b>1.2.1</b>
-         * <p>
-         * If the version is a rich version and cannot be represented as a
-         * single version string, an empty string is returned.
-         * <p>
-         * This version was declared in catalog libs.versions.toml
-         */
-        public Provider<String> getVolley() { return getVersion("volley"); }
-
-    }
-
-    public static class BundleAccessors extends BundleFactory {
-
-        public BundleAccessors(ObjectFactory objects, ProviderFactory providers, DefaultVersionCatalog config, ImmutableAttributesFactory attributesFactory, CapabilityNotationParser capabilityNotationParser) { super(objects, providers, config, attributesFactory, capabilityNotationParser); }
-
-    }
-
-    public static class PluginAccessors extends PluginFactory {
-        private final AndroidPluginAccessors paccForAndroidPluginAccessors = new AndroidPluginAccessors(providers, config);
-
-        public PluginAccessors(ProviderFactory providers, DefaultVersionCatalog config) { super(providers, config); }
-
-        /**
-         * Group of plugins at <b>plugins.android</b>
-         */
-        public AndroidPluginAccessors getAndroid() {
-            return paccForAndroidPluginAccessors;
-        }
-
-    }
-
-    public static class AndroidPluginAccessors extends PluginFactory {
-
-        public AndroidPluginAccessors(ProviderFactory providers, DefaultVersionCatalog config) { super(providers, config); }
-
-        /**
-         * Plugin provider for <b>android.application</b> with plugin id <b>com.android.application</b> and
-         * with version reference <b>agp</b>
-         * <p>
-         * This plugin was declared in catalog libs.versions.toml
-         */
-        public Provider<PluginDependency> getApplication() { return createPlugin("android.application"); }
-
-    }
-
-}
Index: .gradle/8.10.2/dependencies-accessors/d234bd1a5da98e4123f8ad3669bc07c5dcfd0093/metadata.bin
===================================================================
diff --git a/.gradle/8.10.2/dependencies-accessors/d234bd1a5da98e4123f8ad3669bc07c5dcfd0093/metadata.bin b/.gradle/8.10.2/dependencies-accessors/d234bd1a5da98e4123f8ad3669bc07c5dcfd0093/metadata.bin
deleted file mode 100644
--- a/.gradle/8.10.2/dependencies-accessors/d234bd1a5da98e4123f8ad3669bc07c5dcfd0093/metadata.bin	(revision ae433e1ac5ebbc2f83dc0bb022436f30fb4e6989)
+++ /dev/null	(revision ae433e1ac5ebbc2f83dc0bb022436f30fb4e6989)
@@ -1,1 +0,0 @@
-�ayl7lex4cngpvopoyihptrctuu�q��`��Z���y�퐃��classesV,�[�&X�iS�R��sources�R|�ܑ	�ۡ�-
\ No newline at end of file
Index: .gradle/8.10.2/dependencies-accessors/4cca7aba00e9e100339e6421b5bd840347d77de8/sources/org/gradle/accessors/dm/LibrariesForLibsInPluginsBlock.java
===================================================================
diff --git a/.gradle/8.10.2/dependencies-accessors/4cca7aba00e9e100339e6421b5bd840347d77de8/sources/org/gradle/accessors/dm/LibrariesForLibsInPluginsBlock.java b/.gradle/8.10.2/dependencies-accessors/4cca7aba00e9e100339e6421b5bd840347d77de8/sources/org/gradle/accessors/dm/LibrariesForLibsInPluginsBlock.java
deleted file mode 100644
--- a/.gradle/8.10.2/dependencies-accessors/4cca7aba00e9e100339e6421b5bd840347d77de8/sources/org/gradle/accessors/dm/LibrariesForLibsInPluginsBlock.java	(revision ae433e1ac5ebbc2f83dc0bb022436f30fb4e6989)
+++ /dev/null	(revision ae433e1ac5ebbc2f83dc0bb022436f30fb4e6989)
@@ -1,579 +0,0 @@
-package org.gradle.accessors.dm;
-
-import org.gradle.api.NonNullApi;
-import org.gradle.api.artifacts.MinimalExternalModuleDependency;
-import org.gradle.plugin.use.PluginDependency;
-import org.gradle.api.artifacts.ExternalModuleDependencyBundle;
-import org.gradle.api.artifacts.MutableVersionConstraint;
-import org.gradle.api.provider.Provider;
-import org.gradle.api.model.ObjectFactory;
-import org.gradle.api.provider.ProviderFactory;
-import org.gradle.api.internal.catalog.AbstractExternalDependencyFactory;
-import org.gradle.api.internal.catalog.DefaultVersionCatalog;
-import java.util.Map;
-import org.gradle.api.internal.attributes.ImmutableAttributesFactory;
-import org.gradle.api.internal.artifacts.dsl.CapabilityNotationParser;
-import javax.inject.Inject;
-
-/**
- * A catalog of dependencies accessible via the {@code libs} extension.
- */
-@NonNullApi
-public class LibrariesForLibsInPluginsBlock extends AbstractExternalDependencyFactory {
-
-    private final AbstractExternalDependencyFactory owner = this;
-    private final CredentialsLibraryAccessors laccForCredentialsLibraryAccessors = new CredentialsLibraryAccessors(owner);
-    private final EspressoLibraryAccessors laccForEspressoLibraryAccessors = new EspressoLibraryAccessors(owner);
-    private final ExtLibraryAccessors laccForExtLibraryAccessors = new ExtLibraryAccessors(owner);
-    private final GlideLibraryAccessors laccForGlideLibraryAccessors = new GlideLibraryAccessors(owner);
-    private final VersionAccessors vaccForVersionAccessors = new VersionAccessors(providers, config);
-    private final BundleAccessors baccForBundleAccessors = new BundleAccessors(objects, providers, config, attributesFactory, capabilityNotationParser);
-    private final PluginAccessors paccForPluginAccessors = new PluginAccessors(providers, config);
-
-    @Inject
-    public LibrariesForLibsInPluginsBlock(DefaultVersionCatalog config, ProviderFactory providers, ObjectFactory objects, ImmutableAttributesFactory attributesFactory, CapabilityNotationParser capabilityNotationParser) {
-        super(config, providers, objects, attributesFactory, capabilityNotationParser);
-    }
-
-    /**
-     * Dependency provider for <b>activity</b> with <b>androidx.activity:activity</b> coordinates and
-     * with version reference <b>activity</b>
-     * <p>
-     * This dependency was declared in catalog libs.versions.toml
-     *
-     * @deprecated Will be removed in Gradle 9.0.
-     */
-    @Deprecated
-    public Provider<MinimalExternalModuleDependency> getActivity() {
-        org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
-        return create("activity");
-    }
-
-    /**
-     * Dependency provider for <b>appcompat</b> with <b>androidx.appcompat:appcompat</b> coordinates and
-     * with version reference <b>appcompat</b>
-     * <p>
-     * This dependency was declared in catalog libs.versions.toml
-     *
-     * @deprecated Will be removed in Gradle 9.0.
-     */
-    @Deprecated
-    public Provider<MinimalExternalModuleDependency> getAppcompat() {
-        org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
-        return create("appcompat");
-    }
-
-    /**
-     * Dependency provider for <b>circleimageview</b> with <b>de.hdodenhof:circleimageview</b> coordinates and
-     * with version reference <b>circleimageview</b>
-     * <p>
-     * This dependency was declared in catalog libs.versions.toml
-     *
-     * @deprecated Will be removed in Gradle 9.0.
-     */
-    @Deprecated
-    public Provider<MinimalExternalModuleDependency> getCircleimageview() {
-        org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
-        return create("circleimageview");
-    }
-
-    /**
-     * Dependency provider for <b>constraintlayout</b> with <b>androidx.constraintlayout:constraintlayout</b> coordinates and
-     * with version reference <b>constraintlayout</b>
-     * <p>
-     * This dependency was declared in catalog libs.versions.toml
-     *
-     * @deprecated Will be removed in Gradle 9.0.
-     */
-    @Deprecated
-    public Provider<MinimalExternalModuleDependency> getConstraintlayout() {
-        org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
-        return create("constraintlayout");
-    }
-
-    /**
-     * Dependency provider for <b>googleid</b> with <b>com.google.android.libraries.identity.googleid:googleid</b> coordinates and
-     * with version reference <b>credentials</b>
-     * <p>
-     * This dependency was declared in catalog libs.versions.toml
-     *
-     * @deprecated Will be removed in Gradle 9.0.
-     */
-    @Deprecated
-    public Provider<MinimalExternalModuleDependency> getGoogleid() {
-        org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
-        return create("googleid");
-    }
-
-    /**
-     * Dependency provider for <b>junit</b> with <b>junit:junit</b> coordinates and
-     * with version reference <b>junit</b>
-     * <p>
-     * This dependency was declared in catalog libs.versions.toml
-     *
-     * @deprecated Will be removed in Gradle 9.0.
-     */
-    @Deprecated
-    public Provider<MinimalExternalModuleDependency> getJunit() {
-        org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
-        return create("junit");
-    }
-
-    /**
-     * Dependency provider for <b>material</b> with <b>com.google.android.material:material</b> coordinates and
-     * with version reference <b>material</b>
-     * <p>
-     * This dependency was declared in catalog libs.versions.toml
-     *
-     * @deprecated Will be removed in Gradle 9.0.
-     */
-    @Deprecated
-    public Provider<MinimalExternalModuleDependency> getMaterial() {
-        org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
-        return create("material");
-    }
-
-    /**
-     * Dependency provider for <b>picasso</b> with <b>com.squareup.picasso:picasso</b> coordinates and
-     * with version reference <b>picasso</b>
-     * <p>
-     * This dependency was declared in catalog libs.versions.toml
-     *
-     * @deprecated Will be removed in Gradle 9.0.
-     */
-    @Deprecated
-    public Provider<MinimalExternalModuleDependency> getPicasso() {
-        org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
-        return create("picasso");
-    }
-
-    /**
-     * Dependency provider for <b>volley</b> with <b>com.android.volley:volley</b> coordinates and
-     * with version reference <b>volley</b>
-     * <p>
-     * This dependency was declared in catalog libs.versions.toml
-     *
-     * @deprecated Will be removed in Gradle 9.0.
-     */
-    @Deprecated
-    public Provider<MinimalExternalModuleDependency> getVolley() {
-        org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
-        return create("volley");
-    }
-
-    /**
-     * Group of libraries at <b>credentials</b>
-     *
-     * @deprecated Will be removed in Gradle 9.0.
-     */
-    @Deprecated
-    public CredentialsLibraryAccessors getCredentials() {
-        org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
-        return laccForCredentialsLibraryAccessors;
-    }
-
-    /**
-     * Group of libraries at <b>espresso</b>
-     *
-     * @deprecated Will be removed in Gradle 9.0.
-     */
-    @Deprecated
-    public EspressoLibraryAccessors getEspresso() {
-        org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
-        return laccForEspressoLibraryAccessors;
-    }
-
-    /**
-     * Group of libraries at <b>ext</b>
-     *
-     * @deprecated Will be removed in Gradle 9.0.
-     */
-    @Deprecated
-    public ExtLibraryAccessors getExt() {
-        org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
-        return laccForExtLibraryAccessors;
-    }
-
-    /**
-     * Group of libraries at <b>glide</b>
-     *
-     * @deprecated Will be removed in Gradle 9.0.
-     */
-    @Deprecated
-    public GlideLibraryAccessors getGlide() {
-        org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
-        return laccForGlideLibraryAccessors;
-    }
-
-    /**
-     * Group of versions at <b>versions</b>
-     */
-    public VersionAccessors getVersions() {
-        return vaccForVersionAccessors;
-    }
-
-    /**
-     * Group of bundles at <b>bundles</b>
-     *
-     * @deprecated Will be removed in Gradle 9.0.
-     */
-    @Deprecated
-    public BundleAccessors getBundles() {
-        org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
-        return baccForBundleAccessors;
-    }
-
-    /**
-     * Group of plugins at <b>plugins</b>
-     */
-    public PluginAccessors getPlugins() {
-        return paccForPluginAccessors;
-    }
-
-    /**
-     * @deprecated Will be removed in Gradle 9.0.
-     */
-    @Deprecated
-    public static class CredentialsLibraryAccessors extends SubDependencyFactory implements DependencyNotationSupplier {
-        private final CredentialsPlayLibraryAccessors laccForCredentialsPlayLibraryAccessors = new CredentialsPlayLibraryAccessors(owner);
-
-        public CredentialsLibraryAccessors(AbstractExternalDependencyFactory owner) { super(owner); }
-
-        /**
-         * Dependency provider for <b>credentials</b> with <b>androidx.credentials:credentials</b> coordinates and
-         * with version reference <b>credentials</b>
-         * <p>
-         * This dependency was declared in catalog libs.versions.toml
-         *
-         * @deprecated Will be removed in Gradle 9.0.
-         */
-        @Deprecated
-        public Provider<MinimalExternalModuleDependency> asProvider() {
-            org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
-            return create("credentials");
-        }
-
-        /**
-         * Group of libraries at <b>credentials.play</b>
-         *
-         * @deprecated Will be removed in Gradle 9.0.
-         */
-        @Deprecated
-        public CredentialsPlayLibraryAccessors getPlay() {
-            org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
-            return laccForCredentialsPlayLibraryAccessors;
-        }
-
-    }
-
-    /**
-     * @deprecated Will be removed in Gradle 9.0.
-     */
-    @Deprecated
-    public static class CredentialsPlayLibraryAccessors extends SubDependencyFactory {
-        private final CredentialsPlayServicesLibraryAccessors laccForCredentialsPlayServicesLibraryAccessors = new CredentialsPlayServicesLibraryAccessors(owner);
-
-        public CredentialsPlayLibraryAccessors(AbstractExternalDependencyFactory owner) { super(owner); }
-
-        /**
-         * Group of libraries at <b>credentials.play.services</b>
-         *
-         * @deprecated Will be removed in Gradle 9.0.
-         */
-        @Deprecated
-        public CredentialsPlayServicesLibraryAccessors getServices() {
-            org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
-            return laccForCredentialsPlayServicesLibraryAccessors;
-        }
-
-    }
-
-    /**
-     * @deprecated Will be removed in Gradle 9.0.
-     */
-    @Deprecated
-    public static class CredentialsPlayServicesLibraryAccessors extends SubDependencyFactory {
-
-        public CredentialsPlayServicesLibraryAccessors(AbstractExternalDependencyFactory owner) { super(owner); }
-
-        /**
-         * Dependency provider for <b>auth</b> with <b>androidx.credentials:credentials-play-services-auth</b> coordinates and
-         * with version reference <b>credentials</b>
-         * <p>
-         * This dependency was declared in catalog libs.versions.toml
-         *
-         * @deprecated Will be removed in Gradle 9.0.
-         */
-        @Deprecated
-        public Provider<MinimalExternalModuleDependency> getAuth() {
-            org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
-            return create("credentials.play.services.auth");
-        }
-
-    }
-
-    /**
-     * @deprecated Will be removed in Gradle 9.0.
-     */
-    @Deprecated
-    public static class EspressoLibraryAccessors extends SubDependencyFactory {
-
-        public EspressoLibraryAccessors(AbstractExternalDependencyFactory owner) { super(owner); }
-
-        /**
-         * Dependency provider for <b>core</b> with <b>androidx.test.espresso:espresso-core</b> coordinates and
-         * with version reference <b>espressoCore</b>
-         * <p>
-         * This dependency was declared in catalog libs.versions.toml
-         *
-         * @deprecated Will be removed in Gradle 9.0.
-         */
-        @Deprecated
-        public Provider<MinimalExternalModuleDependency> getCore() {
-            org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
-            return create("espresso.core");
-        }
-
-    }
-
-    /**
-     * @deprecated Will be removed in Gradle 9.0.
-     */
-    @Deprecated
-    public static class ExtLibraryAccessors extends SubDependencyFactory {
-
-        public ExtLibraryAccessors(AbstractExternalDependencyFactory owner) { super(owner); }
-
-        /**
-         * Dependency provider for <b>junit</b> with <b>androidx.test.ext:junit</b> coordinates and
-         * with version reference <b>junitVersion</b>
-         * <p>
-         * This dependency was declared in catalog libs.versions.toml
-         *
-         * @deprecated Will be removed in Gradle 9.0.
-         */
-        @Deprecated
-        public Provider<MinimalExternalModuleDependency> getJunit() {
-            org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
-            return create("ext.junit");
-        }
-
-    }
-
-    /**
-     * @deprecated Will be removed in Gradle 9.0.
-     */
-    @Deprecated
-    public static class GlideLibraryAccessors extends SubDependencyFactory implements DependencyNotationSupplier {
-
-        public GlideLibraryAccessors(AbstractExternalDependencyFactory owner) { super(owner); }
-
-        /**
-         * Dependency provider for <b>glide</b> with <b>com.github.bumptech.glide:glide</b> coordinates and
-         * with version <b>4.16.0</b>
-         * <p>
-         * This dependency was declared in catalog libs.versions.toml
-         *
-         * @deprecated Will be removed in Gradle 9.0.
-         */
-        @Deprecated
-        public Provider<MinimalExternalModuleDependency> asProvider() {
-            org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
-            return create("glide");
-        }
-
-        /**
-         * Dependency provider for <b>compiler</b> with <b>com.github.bumptech.glide:compiler</b> coordinates and
-         * with version <b>4.16.0</b>
-         * <p>
-         * This dependency was declared in catalog libs.versions.toml
-         *
-         * @deprecated Will be removed in Gradle 9.0.
-         */
-        @Deprecated
-        public Provider<MinimalExternalModuleDependency> getCompiler() {
-            org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
-            return create("glide.compiler");
-        }
-
-        /**
-         * Dependency provider for <b>okhttp3</b> with <b>com.github.bumptech.glide:okhttp3-integration</b> coordinates and
-         * with version <b>4.16.0</b>
-         * <p>
-         * This dependency was declared in catalog libs.versions.toml
-         *
-         * @deprecated Will be removed in Gradle 9.0.
-         */
-        @Deprecated
-        public Provider<MinimalExternalModuleDependency> getOkhttp3() {
-            org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
-            return create("glide.okhttp3");
-        }
-
-    }
-
-    public static class VersionAccessors extends VersionFactory  {
-
-        public VersionAccessors(ProviderFactory providers, DefaultVersionCatalog config) { super(providers, config); }
-
-        /**
-         * Version alias <b>activity</b> with value <b>1.10.1</b>
-         * <p>
-         * If the version is a rich version and cannot be represented as a
-         * single version string, an empty string is returned.
-         * <p>
-         * This version was declared in catalog libs.versions.toml
-         */
-        public Provider<String> getActivity() { return getVersion("activity"); }
-
-        /**
-         * Version alias <b>agp</b> with value <b>8.8.0</b>
-         * <p>
-         * If the version is a rich version and cannot be represented as a
-         * single version string, an empty string is returned.
-         * <p>
-         * This version was declared in catalog libs.versions.toml
-         */
-        public Provider<String> getAgp() { return getVersion("agp"); }
-
-        /**
-         * Version alias <b>appcompat</b> with value <b>1.7.0</b>
-         * <p>
-         * If the version is a rich version and cannot be represented as a
-         * single version string, an empty string is returned.
-         * <p>
-         * This version was declared in catalog libs.versions.toml
-         */
-        public Provider<String> getAppcompat() { return getVersion("appcompat"); }
-
-        /**
-         * Version alias <b>circleimageview</b> with value <b>3.0.0</b>
-         * <p>
-         * If the version is a rich version and cannot be represented as a
-         * single version string, an empty string is returned.
-         * <p>
-         * This version was declared in catalog libs.versions.toml
-         */
-        public Provider<String> getCircleimageview() { return getVersion("circleimageview"); }
-
-        /**
-         * Version alias <b>constraintlayout</b> with value <b>2.2.1</b>
-         * <p>
-         * If the version is a rich version and cannot be represented as a
-         * single version string, an empty string is returned.
-         * <p>
-         * This version was declared in catalog libs.versions.toml
-         */
-        public Provider<String> getConstraintlayout() { return getVersion("constraintlayout"); }
-
-        /**
-         * Version alias <b>credentials</b> with value <b>1.5.0</b>
-         * <p>
-         * If the version is a rich version and cannot be represented as a
-         * single version string, an empty string is returned.
-         * <p>
-         * This version was declared in catalog libs.versions.toml
-         */
-        public Provider<String> getCredentials() { return getVersion("credentials"); }
-
-        /**
-         * Version alias <b>espressoCore</b> with value <b>3.6.1</b>
-         * <p>
-         * If the version is a rich version and cannot be represented as a
-         * single version string, an empty string is returned.
-         * <p>
-         * This version was declared in catalog libs.versions.toml
-         */
-        public Provider<String> getEspressoCore() { return getVersion("espressoCore"); }
-
-        /**
-         * Version alias <b>junit</b> with value <b>4.13.2</b>
-         * <p>
-         * If the version is a rich version and cannot be represented as a
-         * single version string, an empty string is returned.
-         * <p>
-         * This version was declared in catalog libs.versions.toml
-         */
-        public Provider<String> getJunit() { return getVersion("junit"); }
-
-        /**
-         * Version alias <b>junitVersion</b> with value <b>1.2.1</b>
-         * <p>
-         * If the version is a rich version and cannot be represented as a
-         * single version string, an empty string is returned.
-         * <p>
-         * This version was declared in catalog libs.versions.toml
-         */
-        public Provider<String> getJunitVersion() { return getVersion("junitVersion"); }
-
-        /**
-         * Version alias <b>material</b> with value <b>1.12.0</b>
-         * <p>
-         * If the version is a rich version and cannot be represented as a
-         * single version string, an empty string is returned.
-         * <p>
-         * This version was declared in catalog libs.versions.toml
-         */
-        public Provider<String> getMaterial() { return getVersion("material"); }
-
-        /**
-         * Version alias <b>picasso</b> with value <b>2.5.2</b>
-         * <p>
-         * If the version is a rich version and cannot be represented as a
-         * single version string, an empty string is returned.
-         * <p>
-         * This version was declared in catalog libs.versions.toml
-         */
-        public Provider<String> getPicasso() { return getVersion("picasso"); }
-
-        /**
-         * Version alias <b>volley</b> with value <b>1.2.1</b>
-         * <p>
-         * If the version is a rich version and cannot be represented as a
-         * single version string, an empty string is returned.
-         * <p>
-         * This version was declared in catalog libs.versions.toml
-         */
-        public Provider<String> getVolley() { return getVersion("volley"); }
-
-    }
-
-    /**
-     * @deprecated Will be removed in Gradle 9.0.
-     */
-    @Deprecated
-    public static class BundleAccessors extends BundleFactory {
-
-        public BundleAccessors(ObjectFactory objects, ProviderFactory providers, DefaultVersionCatalog config, ImmutableAttributesFactory attributesFactory, CapabilityNotationParser capabilityNotationParser) { super(objects, providers, config, attributesFactory, capabilityNotationParser); }
-
-    }
-
-    public static class PluginAccessors extends PluginFactory {
-        private final AndroidPluginAccessors paccForAndroidPluginAccessors = new AndroidPluginAccessors(providers, config);
-
-        public PluginAccessors(ProviderFactory providers, DefaultVersionCatalog config) { super(providers, config); }
-
-        /**
-         * Group of plugins at <b>plugins.android</b>
-         */
-        public AndroidPluginAccessors getAndroid() {
-            return paccForAndroidPluginAccessors;
-        }
-
-    }
-
-    public static class AndroidPluginAccessors extends PluginFactory {
-
-        public AndroidPluginAccessors(ProviderFactory providers, DefaultVersionCatalog config) { super(providers, config); }
-
-        /**
-         * Plugin provider for <b>android.application</b> with plugin id <b>com.android.application</b> and
-         * with version reference <b>agp</b>
-         * <p>
-         * This plugin was declared in catalog libs.versions.toml
-         */
-        public Provider<PluginDependency> getApplication() { return createPlugin("android.application"); }
-
-    }
-
-}
Index: .gradle/8.10.2/dependencies-accessors/d234bd1a5da98e4123f8ad3669bc07c5dcfd0093/sources/org/gradle/accessors/dm/LibrariesForLibsInPluginsBlock.java
===================================================================
diff --git a/.gradle/8.10.2/dependencies-accessors/d234bd1a5da98e4123f8ad3669bc07c5dcfd0093/sources/org/gradle/accessors/dm/LibrariesForLibsInPluginsBlock.java b/.gradle/8.10.2/dependencies-accessors/d234bd1a5da98e4123f8ad3669bc07c5dcfd0093/sources/org/gradle/accessors/dm/LibrariesForLibsInPluginsBlock.java
deleted file mode 100644
--- a/.gradle/8.10.2/dependencies-accessors/d234bd1a5da98e4123f8ad3669bc07c5dcfd0093/sources/org/gradle/accessors/dm/LibrariesForLibsInPluginsBlock.java	(revision ae433e1ac5ebbc2f83dc0bb022436f30fb4e6989)
+++ /dev/null	(revision ae433e1ac5ebbc2f83dc0bb022436f30fb4e6989)
@@ -1,553 +0,0 @@
-package org.gradle.accessors.dm;
-
-import org.gradle.api.NonNullApi;
-import org.gradle.api.artifacts.MinimalExternalModuleDependency;
-import org.gradle.plugin.use.PluginDependency;
-import org.gradle.api.artifacts.ExternalModuleDependencyBundle;
-import org.gradle.api.artifacts.MutableVersionConstraint;
-import org.gradle.api.provider.Provider;
-import org.gradle.api.model.ObjectFactory;
-import org.gradle.api.provider.ProviderFactory;
-import org.gradle.api.internal.catalog.AbstractExternalDependencyFactory;
-import org.gradle.api.internal.catalog.DefaultVersionCatalog;
-import java.util.Map;
-import org.gradle.api.internal.attributes.ImmutableAttributesFactory;
-import org.gradle.api.internal.artifacts.dsl.CapabilityNotationParser;
-import javax.inject.Inject;
-
-/**
- * A catalog of dependencies accessible via the {@code libs} extension.
- */
-@NonNullApi
-public class LibrariesForLibsInPluginsBlock extends AbstractExternalDependencyFactory {
-
-    private final AbstractExternalDependencyFactory owner = this;
-    private final EspressoLibraryAccessors laccForEspressoLibraryAccessors = new EspressoLibraryAccessors(owner);
-    private final ExtLibraryAccessors laccForExtLibraryAccessors = new ExtLibraryAccessors(owner);
-    private final GlideLibraryAccessors laccForGlideLibraryAccessors = new GlideLibraryAccessors(owner);
-    private final PlayLibraryAccessors laccForPlayLibraryAccessors = new PlayLibraryAccessors(owner);
-    private final VersionAccessors vaccForVersionAccessors = new VersionAccessors(providers, config);
-    private final BundleAccessors baccForBundleAccessors = new BundleAccessors(objects, providers, config, attributesFactory, capabilityNotationParser);
-    private final PluginAccessors paccForPluginAccessors = new PluginAccessors(providers, config);
-
-    @Inject
-    public LibrariesForLibsInPluginsBlock(DefaultVersionCatalog config, ProviderFactory providers, ObjectFactory objects, ImmutableAttributesFactory attributesFactory, CapabilityNotationParser capabilityNotationParser) {
-        super(config, providers, objects, attributesFactory, capabilityNotationParser);
-    }
-
-    /**
-     * Dependency provider for <b>activity</b> with <b>androidx.activity:activity</b> coordinates and
-     * with version reference <b>activity</b>
-     * <p>
-     * This dependency was declared in catalog libs.versions.toml
-     *
-     * @deprecated Will be removed in Gradle 9.0.
-     */
-    @Deprecated
-    public Provider<MinimalExternalModuleDependency> getActivity() {
-        org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
-        return create("activity");
-    }
-
-    /**
-     * Dependency provider for <b>appcompat</b> with <b>androidx.appcompat:appcompat</b> coordinates and
-     * with version reference <b>appcompat</b>
-     * <p>
-     * This dependency was declared in catalog libs.versions.toml
-     *
-     * @deprecated Will be removed in Gradle 9.0.
-     */
-    @Deprecated
-    public Provider<MinimalExternalModuleDependency> getAppcompat() {
-        org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
-        return create("appcompat");
-    }
-
-    /**
-     * Dependency provider for <b>circleimageview</b> with <b>de.hdodenhof:circleimageview</b> coordinates and
-     * with version reference <b>circleimageview</b>
-     * <p>
-     * This dependency was declared in catalog libs.versions.toml
-     *
-     * @deprecated Will be removed in Gradle 9.0.
-     */
-    @Deprecated
-    public Provider<MinimalExternalModuleDependency> getCircleimageview() {
-        org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
-        return create("circleimageview");
-    }
-
-    /**
-     * Dependency provider for <b>constraintlayout</b> with <b>androidx.constraintlayout:constraintlayout</b> coordinates and
-     * with version reference <b>constraintlayout</b>
-     * <p>
-     * This dependency was declared in catalog libs.versions.toml
-     *
-     * @deprecated Will be removed in Gradle 9.0.
-     */
-    @Deprecated
-    public Provider<MinimalExternalModuleDependency> getConstraintlayout() {
-        org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
-        return create("constraintlayout");
-    }
-
-    /**
-     * Dependency provider for <b>core</b> with <b>androidx.core:core</b> coordinates and
-     * with version reference <b>core</b>
-     * <p>
-     * This dependency was declared in catalog libs.versions.toml
-     *
-     * @deprecated Will be removed in Gradle 9.0.
-     */
-    @Deprecated
-    public Provider<MinimalExternalModuleDependency> getCore() {
-        org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
-        return create("core");
-    }
-
-    /**
-     * Dependency provider for <b>junit</b> with <b>junit:junit</b> coordinates and
-     * with version reference <b>junit</b>
-     * <p>
-     * This dependency was declared in catalog libs.versions.toml
-     *
-     * @deprecated Will be removed in Gradle 9.0.
-     */
-    @Deprecated
-    public Provider<MinimalExternalModuleDependency> getJunit() {
-        org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
-        return create("junit");
-    }
-
-    /**
-     * Dependency provider for <b>material</b> with <b>com.google.android.material:material</b> coordinates and
-     * with version reference <b>material</b>
-     * <p>
-     * This dependency was declared in catalog libs.versions.toml
-     *
-     * @deprecated Will be removed in Gradle 9.0.
-     */
-    @Deprecated
-    public Provider<MinimalExternalModuleDependency> getMaterial() {
-        org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
-        return create("material");
-    }
-
-    /**
-     * Dependency provider for <b>picasso</b> with <b>com.squareup.picasso:picasso</b> coordinates and
-     * with version reference <b>picasso</b>
-     * <p>
-     * This dependency was declared in catalog libs.versions.toml
-     *
-     * @deprecated Will be removed in Gradle 9.0.
-     */
-    @Deprecated
-    public Provider<MinimalExternalModuleDependency> getPicasso() {
-        org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
-        return create("picasso");
-    }
-
-    /**
-     * Dependency provider for <b>volley</b> with <b>com.android.volley:volley</b> coordinates and
-     * with version reference <b>volley</b>
-     * <p>
-     * This dependency was declared in catalog libs.versions.toml
-     *
-     * @deprecated Will be removed in Gradle 9.0.
-     */
-    @Deprecated
-    public Provider<MinimalExternalModuleDependency> getVolley() {
-        org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
-        return create("volley");
-    }
-
-    /**
-     * Group of libraries at <b>espresso</b>
-     *
-     * @deprecated Will be removed in Gradle 9.0.
-     */
-    @Deprecated
-    public EspressoLibraryAccessors getEspresso() {
-        org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
-        return laccForEspressoLibraryAccessors;
-    }
-
-    /**
-     * Group of libraries at <b>ext</b>
-     *
-     * @deprecated Will be removed in Gradle 9.0.
-     */
-    @Deprecated
-    public ExtLibraryAccessors getExt() {
-        org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
-        return laccForExtLibraryAccessors;
-    }
-
-    /**
-     * Group of libraries at <b>glide</b>
-     *
-     * @deprecated Will be removed in Gradle 9.0.
-     */
-    @Deprecated
-    public GlideLibraryAccessors getGlide() {
-        org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
-        return laccForGlideLibraryAccessors;
-    }
-
-    /**
-     * Group of libraries at <b>play</b>
-     *
-     * @deprecated Will be removed in Gradle 9.0.
-     */
-    @Deprecated
-    public PlayLibraryAccessors getPlay() {
-        org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
-        return laccForPlayLibraryAccessors;
-    }
-
-    /**
-     * Group of versions at <b>versions</b>
-     */
-    public VersionAccessors getVersions() {
-        return vaccForVersionAccessors;
-    }
-
-    /**
-     * Group of bundles at <b>bundles</b>
-     *
-     * @deprecated Will be removed in Gradle 9.0.
-     */
-    @Deprecated
-    public BundleAccessors getBundles() {
-        org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
-        return baccForBundleAccessors;
-    }
-
-    /**
-     * Group of plugins at <b>plugins</b>
-     */
-    public PluginAccessors getPlugins() {
-        return paccForPluginAccessors;
-    }
-
-    /**
-     * @deprecated Will be removed in Gradle 9.0.
-     */
-    @Deprecated
-    public static class EspressoLibraryAccessors extends SubDependencyFactory {
-
-        public EspressoLibraryAccessors(AbstractExternalDependencyFactory owner) { super(owner); }
-
-        /**
-         * Dependency provider for <b>core</b> with <b>androidx.test.espresso:espresso-core</b> coordinates and
-         * with version reference <b>espressoCore</b>
-         * <p>
-         * This dependency was declared in catalog libs.versions.toml
-         *
-         * @deprecated Will be removed in Gradle 9.0.
-         */
-        @Deprecated
-        public Provider<MinimalExternalModuleDependency> getCore() {
-            org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
-            return create("espresso.core");
-        }
-
-    }
-
-    /**
-     * @deprecated Will be removed in Gradle 9.0.
-     */
-    @Deprecated
-    public static class ExtLibraryAccessors extends SubDependencyFactory {
-
-        public ExtLibraryAccessors(AbstractExternalDependencyFactory owner) { super(owner); }
-
-        /**
-         * Dependency provider for <b>junit</b> with <b>androidx.test.ext:junit</b> coordinates and
-         * with version reference <b>junitVersion</b>
-         * <p>
-         * This dependency was declared in catalog libs.versions.toml
-         *
-         * @deprecated Will be removed in Gradle 9.0.
-         */
-        @Deprecated
-        public Provider<MinimalExternalModuleDependency> getJunit() {
-            org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
-            return create("ext.junit");
-        }
-
-    }
-
-    /**
-     * @deprecated Will be removed in Gradle 9.0.
-     */
-    @Deprecated
-    public static class GlideLibraryAccessors extends SubDependencyFactory implements DependencyNotationSupplier {
-
-        public GlideLibraryAccessors(AbstractExternalDependencyFactory owner) { super(owner); }
-
-        /**
-         * Dependency provider for <b>glide</b> with <b>com.github.bumptech.glide:glide</b> coordinates and
-         * with version <b>4.16.0</b>
-         * <p>
-         * This dependency was declared in catalog libs.versions.toml
-         *
-         * @deprecated Will be removed in Gradle 9.0.
-         */
-        @Deprecated
-        public Provider<MinimalExternalModuleDependency> asProvider() {
-            org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
-            return create("glide");
-        }
-
-        /**
-         * Dependency provider for <b>compiler</b> with <b>com.github.bumptech.glide:compiler</b> coordinates and
-         * with version <b>4.16.0</b>
-         * <p>
-         * This dependency was declared in catalog libs.versions.toml
-         *
-         * @deprecated Will be removed in Gradle 9.0.
-         */
-        @Deprecated
-        public Provider<MinimalExternalModuleDependency> getCompiler() {
-            org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
-            return create("glide.compiler");
-        }
-
-        /**
-         * Dependency provider for <b>okhttp3</b> with <b>com.github.bumptech.glide:okhttp3-integration</b> coordinates and
-         * with version <b>4.16.0</b>
-         * <p>
-         * This dependency was declared in catalog libs.versions.toml
-         *
-         * @deprecated Will be removed in Gradle 9.0.
-         */
-        @Deprecated
-        public Provider<MinimalExternalModuleDependency> getOkhttp3() {
-            org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
-            return create("glide.okhttp3");
-        }
-
-    }
-
-    /**
-     * @deprecated Will be removed in Gradle 9.0.
-     */
-    @Deprecated
-    public static class PlayLibraryAccessors extends SubDependencyFactory {
-        private final PlayServicesLibraryAccessors laccForPlayServicesLibraryAccessors = new PlayServicesLibraryAccessors(owner);
-
-        public PlayLibraryAccessors(AbstractExternalDependencyFactory owner) { super(owner); }
-
-        /**
-         * Group of libraries at <b>play.services</b>
-         *
-         * @deprecated Will be removed in Gradle 9.0.
-         */
-        @Deprecated
-        public PlayServicesLibraryAccessors getServices() {
-            org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
-            return laccForPlayServicesLibraryAccessors;
-        }
-
-    }
-
-    /**
-     * @deprecated Will be removed in Gradle 9.0.
-     */
-    @Deprecated
-    public static class PlayServicesLibraryAccessors extends SubDependencyFactory {
-
-        public PlayServicesLibraryAccessors(AbstractExternalDependencyFactory owner) { super(owner); }
-
-        /**
-         * Dependency provider for <b>auth</b> with <b>com.google.android.gms:play-services-auth</b> coordinates and
-         * with version reference <b>playServicesAuth</b>
-         * <p>
-         * This dependency was declared in catalog libs.versions.toml
-         *
-         * @deprecated Will be removed in Gradle 9.0.
-         */
-        @Deprecated
-        public Provider<MinimalExternalModuleDependency> getAuth() {
-            org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
-            return create("play.services.auth");
-        }
-
-    }
-
-    public static class VersionAccessors extends VersionFactory  {
-
-        public VersionAccessors(ProviderFactory providers, DefaultVersionCatalog config) { super(providers, config); }
-
-        /**
-         * Version alias <b>activity</b> with value <b>1.10.1</b>
-         * <p>
-         * If the version is a rich version and cannot be represented as a
-         * single version string, an empty string is returned.
-         * <p>
-         * This version was declared in catalog libs.versions.toml
-         */
-        public Provider<String> getActivity() { return getVersion("activity"); }
-
-        /**
-         * Version alias <b>agp</b> with value <b>8.8.0</b>
-         * <p>
-         * If the version is a rich version and cannot be represented as a
-         * single version string, an empty string is returned.
-         * <p>
-         * This version was declared in catalog libs.versions.toml
-         */
-        public Provider<String> getAgp() { return getVersion("agp"); }
-
-        /**
-         * Version alias <b>appcompat</b> with value <b>1.7.0</b>
-         * <p>
-         * If the version is a rich version and cannot be represented as a
-         * single version string, an empty string is returned.
-         * <p>
-         * This version was declared in catalog libs.versions.toml
-         */
-        public Provider<String> getAppcompat() { return getVersion("appcompat"); }
-
-        /**
-         * Version alias <b>circleimageview</b> with value <b>3.0.0</b>
-         * <p>
-         * If the version is a rich version and cannot be represented as a
-         * single version string, an empty string is returned.
-         * <p>
-         * This version was declared in catalog libs.versions.toml
-         */
-        public Provider<String> getCircleimageview() { return getVersion("circleimageview"); }
-
-        /**
-         * Version alias <b>constraintlayout</b> with value <b>2.2.1</b>
-         * <p>
-         * If the version is a rich version and cannot be represented as a
-         * single version string, an empty string is returned.
-         * <p>
-         * This version was declared in catalog libs.versions.toml
-         */
-        public Provider<String> getConstraintlayout() { return getVersion("constraintlayout"); }
-
-        /**
-         * Version alias <b>core</b> with value <b>1.16.0</b>
-         * <p>
-         * If the version is a rich version and cannot be represented as a
-         * single version string, an empty string is returned.
-         * <p>
-         * This version was declared in catalog libs.versions.toml
-         */
-        public Provider<String> getCore() { return getVersion("core"); }
-
-        /**
-         * Version alias <b>espressoCore</b> with value <b>3.6.1</b>
-         * <p>
-         * If the version is a rich version and cannot be represented as a
-         * single version string, an empty string is returned.
-         * <p>
-         * This version was declared in catalog libs.versions.toml
-         */
-        public Provider<String> getEspressoCore() { return getVersion("espressoCore"); }
-
-        /**
-         * Version alias <b>junit</b> with value <b>4.13.2</b>
-         * <p>
-         * If the version is a rich version and cannot be represented as a
-         * single version string, an empty string is returned.
-         * <p>
-         * This version was declared in catalog libs.versions.toml
-         */
-        public Provider<String> getJunit() { return getVersion("junit"); }
-
-        /**
-         * Version alias <b>junitVersion</b> with value <b>1.2.1</b>
-         * <p>
-         * If the version is a rich version and cannot be represented as a
-         * single version string, an empty string is returned.
-         * <p>
-         * This version was declared in catalog libs.versions.toml
-         */
-        public Provider<String> getJunitVersion() { return getVersion("junitVersion"); }
-
-        /**
-         * Version alias <b>material</b> with value <b>1.12.0</b>
-         * <p>
-         * If the version is a rich version and cannot be represented as a
-         * single version string, an empty string is returned.
-         * <p>
-         * This version was declared in catalog libs.versions.toml
-         */
-        public Provider<String> getMaterial() { return getVersion("material"); }
-
-        /**
-         * Version alias <b>picasso</b> with value <b>2.5.2</b>
-         * <p>
-         * If the version is a rich version and cannot be represented as a
-         * single version string, an empty string is returned.
-         * <p>
-         * This version was declared in catalog libs.versions.toml
-         */
-        public Provider<String> getPicasso() { return getVersion("picasso"); }
-
-        /**
-         * Version alias <b>playServicesAuth</b> with value <b>21.3.0</b>
-         * <p>
-         * If the version is a rich version and cannot be represented as a
-         * single version string, an empty string is returned.
-         * <p>
-         * This version was declared in catalog libs.versions.toml
-         */
-        public Provider<String> getPlayServicesAuth() { return getVersion("playServicesAuth"); }
-
-        /**
-         * Version alias <b>volley</b> with value <b>1.2.1</b>
-         * <p>
-         * If the version is a rich version and cannot be represented as a
-         * single version string, an empty string is returned.
-         * <p>
-         * This version was declared in catalog libs.versions.toml
-         */
-        public Provider<String> getVolley() { return getVersion("volley"); }
-
-    }
-
-    /**
-     * @deprecated Will be removed in Gradle 9.0.
-     */
-    @Deprecated
-    public static class BundleAccessors extends BundleFactory {
-
-        public BundleAccessors(ObjectFactory objects, ProviderFactory providers, DefaultVersionCatalog config, ImmutableAttributesFactory attributesFactory, CapabilityNotationParser capabilityNotationParser) { super(objects, providers, config, attributesFactory, capabilityNotationParser); }
-
-    }
-
-    public static class PluginAccessors extends PluginFactory {
-        private final AndroidPluginAccessors paccForAndroidPluginAccessors = new AndroidPluginAccessors(providers, config);
-
-        public PluginAccessors(ProviderFactory providers, DefaultVersionCatalog config) { super(providers, config); }
-
-        /**
-         * Group of plugins at <b>plugins.android</b>
-         */
-        public AndroidPluginAccessors getAndroid() {
-            return paccForAndroidPluginAccessors;
-        }
-
-    }
-
-    public static class AndroidPluginAccessors extends PluginFactory {
-
-        public AndroidPluginAccessors(ProviderFactory providers, DefaultVersionCatalog config) { super(providers, config); }
-
-        /**
-         * Plugin provider for <b>android.application</b> with plugin id <b>com.android.application</b> and
-         * with version reference <b>agp</b>
-         * <p>
-         * This plugin was declared in catalog libs.versions.toml
-         */
-        public Provider<PluginDependency> getApplication() { return createPlugin("android.application"); }
-
-    }
-
-}
Index: app/src/main/res/values-vi/strings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<resources>\r\n    <string name=\"navHome\">Trang Chủ</string>\r\n    <string name=\"navTest\">Thi</string>\r\n    <string name=\"navCourse\">Lộ Trình</string>\r\n    <string name=\"navAI\">AI</string>\r\n    <string name=\"navSetting\">Cá Nhân</string>\r\n\r\n    <string name=\"app_name\">AstroLingo</string>\r\n\r\n    <string name=\"homeFragment\">Trang Chủ</string>\r\n\r\n    <string name=\"testFragment\">Thi</string>\r\n\r\n    <string name=\"courseFragment\">Lộ Trình</string>\r\n\r\n    <string name=\"AiFragment\">AI</string>\r\n\r\n    <string name=\"settingFragment\">Điều Chỉnh Cá Nhân</string>\r\n\r\n    <string name=\"copyright\">Bản quyền 2025 © AstroLingo</string>\r\n\r\n    <!-- Login Page String  -->\r\n    <string name=\"next\">Tiếp tục</string>\r\n    <string name=\"got_it\">Hoàn thành</string>\r\n    <string name=\"verifyEmail\">Xác thực email của bạn</string>\r\n    <string name=\"verifyEmailCode\">Hãy nhập 4 số mã đã được gửi đến email của bạn!</string>\r\n    <string name=\"createNewPass\">Tạo mật khẩu mới</string>\r\n    <string name=\"enterNewPass\">Nhập mật khẩu mới của bạn!</string>\r\n\r\n    <string name=\"loginPage\">Đăng nhập</string>\r\n    <string name=\"registerPage\">Đăng ký</string>\r\n    <string name=\"forgotPasswordPage\">Quên mật khẩu</string>\r\n    <string name=\"loginWithUserName\">Nhập tên tài khoản hoặc email của bạn <font color=\"#EB4B4B\">*</font> </string>\r\n    <string name=\"RegisterWithUserName\">Nhập tên tài khoản của bạn <font color=\"#EB4B4B\">*</font> </string>\r\n    <string name=\"loginWithPassword\">Nhập mật khẩu của bạn <font color=\"#EB4B4B\">*</font> </string>\r\n    <string name=\"login\">Đăng nhập</string>\r\n    <string name=\"register\">Đăng ký</string>\r\n    <string name=\"registerWithName\">Nhập tên của bạn</string>\r\n    <string name=\"registerWithEmail\">Nhập email của bạn <font color=\"#EB4B4B\">*</font> </string>\r\n    <string name=\"registerWithTel\">Nhập số điện thoại của bạn</string>\r\n    <string name=\"registerWithPassword\">Xác nhận mật khẩu của bạn <font color=\"#EB4B4B\">*</font> </string>\r\n    <string name=\"forgotPassword\">Quên mật khẩu?</string>\r\n\r\n    <string name=\"loginRegister_rule\">\r\n        Bằng việc đăng nhập vào AstroLingo, bạn đã đồng ý với <font color=\"#5616BA\">Điều khoản và chính sách bảo mật</font> bảo mật của chúng tôi <font color=\"#C70707\">*</font>\r\n    </string>\r\n\r\n    <string name=\"registerLogin_rule\">\r\n        Bằng việc đăng ký vào AstroLingo, bạn đã đồng ý với <font color=\"#5616BA\">Điều khoản và chính sách bảo mật</font> bảo mật của chúng tôi <font color=\"#C70707\">*</font>\r\n    </string>\r\n\r\n    <string name=\"have_account\">Bạn đã có tài khoản?</string>\r\n    <string name=\"dont_have_account\">Bạn chưa có tài khoản?</string>\r\n\r\n    <string name=\"error_name_empty\">Tên của bạn không được để trống!</string>\r\n    <string name=\"error_name_specialsympol\">Tên của bạn không được có ký tự đặc biệt!</string>\r\n\r\n    <string name=\"error_username_empty\">Tên tài khoản của bạn không được để trống!</string>\r\n    <string name=\"error_username_specialsympol\">Tên tài khoản không được có ký tự đặc biệt hay khoảng trắng!</string>\r\n\r\n    <string name=\"error_telephone_empty\">Số điện thoại không được để trống!</string>\r\n    <string name=\"error_telephone_invalid\">Số điện thoại nên bắt đầu bằng 0 và có 10–11 chữ số!</string>\r\n\r\n    <string name=\"error_email_empty\">Email của bạn không được để trống!</string>\r\n    <string name=\"error_email_invalid\">Email của bạn không hợp lệ!</string>\r\n    <string name=\"error_email_exist\">Email của bạn đã tồn tại!</string>\r\n\r\n    <string name=\"error_password_empty\">Mật khẩu của bạn không được để trống!</string>\r\n    <string name=\"error_password_invalid\">Mật khẩu của bạn phải có ít nhất 8 ký tự!</string>\r\n\r\n    <string name=\"error_repassword_empty\">Xác nhận mật khẩu của bạn không được để trống!</string>\r\n    <string name=\"error_repassword_invalid\">Xác nhận mật khẩu không khớp với mật khẩu!</string>\r\n\r\n    <string name=\"error_login_empty\">Tên tài khoản hoặc mật khẩu không được để trống!</string>\r\n    <string name=\"error_login_invalid\">Tên tài khoản hoặc mật khẩu không hợp lệ!</string>\r\n\r\n    <string name=\"error_digited_invalid\">Hãy nhập 4 số mã đã được gửi đến email của bạn!</string>\r\n\r\n    <string name=\"error_checkboxes\">Bạn phải đồng ý với điều khoản và chính sách bảo mật!</string>\r\n\r\n    <string name=\"tickRule\">Bạn phải đồng ý với điều khoản và chính sách bảo mật!</string>\r\n\r\n    <string name=\"verification_success\">Xác thực thành công</string>\r\n    <string name=\"verification_success_detail\">Địa chỉ email của bạn đã được xác thực thành công.</string>\r\n\r\n    <string name=\"resetpassword_success\">Mật khẩu của bạn đã được thiết lập lại thành công</string>\r\n\r\n    <string name=\"dont_get_email\">Bạn chưa nhận được email?</string>\r\n    <string name=\"resend\">Gửi lại</string>\r\n\r\n    <!-- Setting Page String  -->\r\n    <string name=\"chinhsuahoso\">Chỉnh sửa hồ sơ</string>\r\n    <string name=\"ngonngusudung\">Ngôn ngữ sử dụng</string>\r\n    <string name=\"giaodientoi\">Giao diện tối</string>\r\n    <string name=\"hienthi\">Hiển thị</string>\r\n    <string name=\"nhacnhohoctap\">Nhắc nhở học tập</string>\r\n    <string name=\"phanhoihotro\">Phản hồi và hỗ trợ</string>\r\n    <string name=\"danhgia5sao\">Đánh giá 5 sao</string>\r\n    <string name=\"dieukhoansudung\">Điều khoản sử dụng</string>\r\n    <string name=\"select_ngonngusudung\">Tiếng Việt</string>\r\n    <string name=\"setting_dangxuat\">Đăng xuất</string>\r\n\r\n    <!-- Setting Page \"Chỉnh sửa hồ sơ\" String  -->\r\n    <string name=\"chinhsuahoso_name\">Anh Đào</string>\r\n    <string name=\"chinhsuahoso_email\">anhdao@gmai.com</string>\r\n    <string name=\"chinhsuahoso_sdt\">0123456789</string>\r\n    <string name=\"chinhsuahoso_date\">01/01/2004</string>\r\n    <string name=\"chinhsuahoso_gender\">Nữ</string>\r\n</resources>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/values-vi/strings.xml b/app/src/main/res/values-vi/strings.xml
--- a/app/src/main/res/values-vi/strings.xml	(revision ae433e1ac5ebbc2f83dc0bb022436f30fb4e6989)
+++ b/app/src/main/res/values-vi/strings.xml	(date 1748053216937)
@@ -107,4 +107,30 @@
     <string name="chinhsuahoso_sdt">0123456789</string>
     <string name="chinhsuahoso_date">01/01/2004</string>
     <string name="chinhsuahoso_gender">Nữ</string>
+
+    <!-- Giao diện Test Page khi nhấn vào icon Test ở navbar   -->
+    <string name="seemore">Xem thêm</string>
+    <string name="miniTestTitle">TOEIC Listening Reading MiniTest | </string>
+    <string name="fullTestTitle">TOEIC Listening Reading FullTest | </string>
+
+    <!-- Giao diện Chuẩn bị làm bài test có nút Bắt đầu nào  -->
+    <string name="startnow">Bắt đầu nào</string>
+    <string name="number_of_questions">Số câu hỏi: 200</string>
+    <string name="test_time">Thời gian: 120 phút</string>
+    <string name="testTitle">Test 10 ETS 2024</string>
+
+    <!-- Giao diện đầu tiên của trang Làm lại câu sai khi nhấn nút "Câu làm sai" ở HomePage-->
+    <string name="retry_wrong_answer">Làm lại câu sai</string>
+    <string name="listening_comprehension">Nghe hiểu</string>
+    <string name="picture_description">Mô tả\ntranh</string>
+    <string name="ques_and_ans">Hỏi-Đáp</string>
+    <string name="conversation">Đoạn hội thoại</string>
+    <string name="short_talk">Bài nói ngắn</string>
+
+    <string name="reading_comprehension">Đọc hiểu</string>
+    <string name="fill_the_blank">Hoàn thành câu</string>
+    <string name="fill_the_paragraph">Hoàn thành\nđoạn văn</string>
+    <string name="single_paragraph">Đoạn đơn</string>
+    <string name="double_paragraph">Đoạn kép</string>
+    <string name="triple_paragraph">Đoạn tam</string>
 </resources>
\ No newline at end of file
Index: app/src/main/java/com/example/astrolingo/activity/setting/SettingActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/astrolingo/activity/setting/SettingActivity.java b/app/src/main/java/com/example/astrolingo/activity/setting/SettingActivity.java
new file mode 100644
--- /dev/null	(date 1748053216924)
+++ b/app/src/main/java/com/example/astrolingo/activity/setting/SettingActivity.java	(date 1748053216924)
@@ -0,0 +1,14 @@
+package com.example.astrolingo.activity.setting;
+
+
+import android.os.Bundle;
+import androidx.appcompat.app.AppCompatActivity;
+import com.example.astrolingo.R;
+
+public class SettingActivity extends AppCompatActivity {
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.page_setting);
+    }
+}
Index: app/src/main/java/com/example/astrolingo/activity/RetryWrongAnswerActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/astrolingo/activity/RetryWrongAnswerActivity.java b/app/src/main/java/com/example/astrolingo/activity/RetryWrongAnswerActivity.java
new file mode 100644
--- /dev/null	(date 1748053216922)
+++ b/app/src/main/java/com/example/astrolingo/activity/RetryWrongAnswerActivity.java	(date 1748053216922)
@@ -0,0 +1,26 @@
+package com.example.astrolingo.activity;
+
+import android.os.Bundle;
+import android.util.Log;
+import android.widget.ImageView;
+
+import androidx.appcompat.app.AppCompatActivity;
+
+import com.example.astrolingo.R;
+
+public class RetryWrongAnswerActivity extends AppCompatActivity{
+    private ImageView backIcon;
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.page_retry_wrong_answer);
+
+        backIcon = findViewById(R.id.backIcon);
+        backIcon.setOnClickListener(v ->{
+            Log.d("RetryWrongAnswerActivity", "Back clicked - finishing activity");
+            finish();
+        });
+    }
+}
+
Index: app/src/main/res/layout/page_retry_wrong_answer.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/page_retry_wrong_answer.xml b/app/src/main/res/layout/page_retry_wrong_answer.xml
new file mode 100644
--- /dev/null	(date 1748053216933)
+++ b/app/src/main/res/layout/page_retry_wrong_answer.xml	(date 1748053216933)
@@ -0,0 +1,467 @@
+<?xml version="1.0" encoding="utf-8"?>
+<FrameLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent">
+
+    <!-- Background cố định -->
+    <ImageView
+        android:id="@+id/fixed_background"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:scaleType="centerCrop"
+        android:src="@drawable/background4" />
+
+    <RelativeLayout
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content">
+
+        <!-- Purple Header -->
+        <androidx.constraintlayout.widget.ConstraintLayout
+            android:id="@+id/purple_header"
+            android:layout_width="match_parent"
+            android:layout_height="90dp"
+            android:background="@color/main_color_purple">
+
+            <ImageView
+                android:id="@+id/backIcon"
+                android:layout_width="30dp"
+                android:layout_height="30dp"
+                android:src="@drawable/icon_back_white"
+                android:layout_marginTop="50dp"
+                app:layout_constraintTop_toTopOf="parent"
+                app:layout_constraintLeft_toLeftOf="parent"/>
+
+            <TextView
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:text="@string/retry_wrong_answer"
+                android:textColor="@color/white"
+                android:textSize="24sp"
+                android:fontFamily="@font/afacad_bold"
+                android:layout_marginStart="1dp"
+                app:layout_constraintBottom_toBottomOf="parent"
+                app:layout_constraintRight_toRightOf="parent"
+                app:layout_constraintLeft_toLeftOf="parent"/>
+        </androidx.constraintlayout.widget.ConstraintLayout>
+
+        <!-- Icon phi hành gia nằm cố định ở giữa theo chiều dọc mép bên phải của parent-->
+        <androidx.constraintlayout.widget.ConstraintLayout
+            android:layout_width="match_parent"
+            android:layout_height="match_parent">
+            <ImageView
+                android:id="@+id/astrolingo_imageview"
+                android:layout_width="170dp"
+                android:layout_height="170dp"
+
+                app:layout_constraintTop_toTopOf="parent"
+                app:layout_constraintBottom_toBottomOf="parent"
+                app:layout_constraintEnd_toEndOf="parent"
+
+                android:layout_marginEnd="10dp"
+                android:layout_marginBottom="100dp"
+                android:src="@drawable/icon_hi5" />
+        </androidx.constraintlayout.widget.ConstraintLayout>
+
+        <!-- Nghe hiểu title -->
+        <TextView
+            android:id="@+id/titleListeningComprehension"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_below="@id/purple_header"
+            android:layout_marginTop="20dp"
+            android:paddingLeft="8dp"
+            android:text="@string/listening_comprehension"
+            android:textSize="20sp"
+            android:textColor="@color/black"
+            android:fontFamily="@font/afacad_bold" />
+
+        <!-- Nghe hiểu Section -->
+        <RelativeLayout
+            android:id="@+id/listeningComprehensionSection"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:layout_below="@id/titleListeningComprehension"
+            android:layout_marginTop="15dp"
+            android:paddingLeft="16dp"
+            android:paddingRight="16dp">
+
+            <!-- Mô tả tranh -->
+            <LinearLayout
+                android:id="@+id/pictureDescriptionSection"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:layout_alignParentStart="true"
+                android:orientation="vertical">
+
+                <androidx.cardview.widget.CardView
+                    android:id="@+id/icon_picture_description_CardView"
+                    android:layout_width="90dp"
+                    android:layout_height="90dp"
+                    android:layout_marginTop="5dp"
+                    app:cardCornerRadius="10dp"
+                    app:cardElevation="5dp"
+                    app:cardUseCompatPadding="true">
+
+                    <ImageView
+                        android:id="@+id/icon_picture_description_ImageView"
+                        android:layout_width="50dp"
+                        android:layout_height="50dp"
+                        android:layout_gravity="center"
+                        android:src="@drawable/icon_picture_description" />
+                </androidx.cardview.widget.CardView>
+
+                <TextView
+                    android:layout_width="wrap_content"
+                    android:layout_height="wrap_content"
+                    android:text="@string/picture_description"
+                    android:paddingTop="2dp"
+                    android:fontFamily="@font/afacad_medium"
+                    android:textSize="16sp"
+                    android:gravity="center"
+                    android:textAlignment="center"
+                    android:layout_gravity="center_horizontal"/>
+            </LinearLayout>
+
+            <!-- Hỏi-Đáp -->
+            <LinearLayout
+                android:id="@+id/questions_answers_Section"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:layout_toEndOf="@id/pictureDescriptionSection"
+                android:layout_marginStart="7dp"
+                android:orientation="vertical"
+                android:gravity="center">
+
+                <androidx.cardview.widget.CardView
+                    android:id="@+id/icon_question_and_answer_CardView"
+                    android:layout_width="90dp"
+                    android:layout_height="90dp"
+                    android:layout_marginTop="5dp"
+                    app:cardCornerRadius="10dp"
+                    app:cardElevation="5dp"
+                    app:cardUseCompatPadding="true">
+                    <ImageView
+                        android:id="@+id/icon_question_and_answer_ImageView"
+                        android:layout_width="50dp"
+                        android:layout_height="50dp"
+                        android:layout_gravity="center"
+                        android:src="@drawable/icon_question_and_answer" />
+                </androidx.cardview.widget.CardView>
+
+                <TextView
+                    android:layout_width="wrap_content"
+                    android:layout_height="wrap_content"
+                    android:text="@string/ques_and_ans"
+                    android:fontFamily="@font/afacad_medium"
+                    android:textSize="16sp"
+                    android:paddingTop="2dp"
+                    android:gravity="center"
+                    android:textAlignment="center"
+                    android:layout_gravity="center_horizontal"/>
+            </LinearLayout>
+
+            <!-- Đoạn hội thoại -->
+            <LinearLayout
+                android:id="@+id/conversationSection"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:layout_toEndOf="@id/questions_answers_Section"
+                android:layout_marginStart="7dp"
+                android:orientation="vertical"
+                android:gravity="center">
+
+                <androidx.cardview.widget.CardView
+                    android:id="@+id/icon_conversation_CardView"
+                    android:layout_width="90dp"
+                    android:layout_height="90dp"
+                    android:layout_marginTop="5dp"
+                    app:cardCornerRadius="10dp"
+                    app:cardElevation="5dp"
+                    app:cardUseCompatPadding="true">
+                    <ImageView
+                        android:id="@+id/icon_conversation_ImageView"
+                        android:layout_width="50dp"
+                        android:layout_height="50dp"
+                        android:layout_gravity="center"
+                        android:src="@drawable/icon_conversation" />
+                </androidx.cardview.widget.CardView>
+
+                <TextView
+                    android:layout_width="wrap_content"
+                    android:layout_height="wrap_content"
+                    android:text="@string/conversation"
+                    android:paddingTop="2dp"
+                    android:fontFamily="@font/afacad_medium"
+                    android:textSize="16sp"
+                    android:gravity="center"
+                    android:textAlignment="center"
+                    android:layout_gravity="center_horizontal"/>
+            </LinearLayout>
+
+            <!-- Bài nói ngắn -->
+            <LinearLayout
+                android:id="@+id/shortTalkSection"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:layout_toEndOf="@id/conversationSection"
+                android:layout_marginStart="7dp"
+                android:orientation="vertical"
+                android:gravity="center">
+
+                <androidx.cardview.widget.CardView
+                    android:id="@+id/icon_short_talk_CardView"
+                    android:layout_width="90dp"
+                    android:layout_height="90dp"
+                    android:layout_marginTop="5dp"
+                    app:cardCornerRadius="10dp"
+                    app:cardElevation="5dp"
+                    app:cardUseCompatPadding="true">
+                    <ImageView
+                        android:id="@+id/icon_short_talk_ImageView"
+                        android:layout_width="50dp"
+                        android:layout_height="50dp"
+                        android:layout_gravity="center"
+                        android:src="@drawable/icon_short_talk" />
+                </androidx.cardview.widget.CardView>
+
+                <TextView
+                    android:layout_width="wrap_content"
+                    android:layout_height="wrap_content"
+                    android:text="@string/short_talk"
+                    android:paddingTop="2dp"
+                    android:fontFamily="@font/afacad_medium"
+                    android:textSize="16sp"
+                    android:gravity="center"
+                    android:textAlignment="center"
+                    android:layout_gravity="center_horizontal"/>
+            </LinearLayout>
+        </RelativeLayout>
+
+        ////////////////////////////////////////////////////////////
+        <!-- Đọc hiểu title -->
+        <TextView
+            android:id="@+id/titleReadingComprehension"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_below="@id/listeningComprehensionSection"
+            android:layout_marginTop="20dp"
+            android:paddingLeft="8dp"
+            android:text="@string/reading_comprehension"
+            android:textSize="20sp"
+            android:textColor="@color/black"
+            android:fontFamily="@font/afacad_bold" />
+
+        <!-- Đọc hiểu Section -->
+        <!-- Part 5,6 -->
+        <RelativeLayout
+            android:id="@+id/part56readingComprehensionSection"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:layout_below="@id/titleReadingComprehension"
+            android:layout_marginTop="15dp"
+            android:paddingLeft="16dp"
+            android:paddingRight="16dp">
+
+            <!-- Hoàn thành câu -->
+            <LinearLayout
+                android:id="@+id/fillTheBlankSection"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:layout_alignParentStart="true"
+                android:orientation="vertical">
+
+                <androidx.cardview.widget.CardView
+                    android:id="@+id/icon_fill_the_blank_CardView"
+                    android:layout_width="90dp"
+                    android:layout_height="90dp"
+                    android:layout_marginTop="5dp"
+                    app:cardCornerRadius="10dp"
+                    app:cardElevation="5dp"
+                    app:cardUseCompatPadding="true">
+
+                    <ImageView
+                        android:id="@+id/icon_fill_the_blank_ImageView"
+                        android:layout_width="50dp"
+                        android:layout_height="50dp"
+                        android:layout_gravity="center"
+                        android:src="@drawable/icon_fill_the_blank" />
+                </androidx.cardview.widget.CardView>
+
+                <TextView
+                    android:layout_width="wrap_content"
+                    android:layout_height="wrap_content"
+                    android:text="@string/fill_the_blank"
+                    android:paddingTop="2dp"
+                    android:fontFamily="@font/afacad_medium"
+                    android:textSize="16sp"
+                    android:gravity="center"
+                    android:textAlignment="center"
+                    android:layout_gravity="center_horizontal"/>
+            </LinearLayout>
+
+            <!-- Hoàn thành đoạn văn -->
+            <LinearLayout
+                android:id="@+id/fillTheParagraph_Section"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:layout_toEndOf="@id/fillTheBlankSection"
+                android:layout_marginStart="7dp"
+                android:orientation="vertical"
+                android:gravity="center">
+
+                <androidx.cardview.widget.CardView
+                    android:id="@+id/icon_fill_the_paragraph_CardView"
+                    android:layout_width="90dp"
+                    android:layout_height="90dp"
+                    android:layout_marginTop="5dp"
+                    app:cardCornerRadius="10dp"
+                    app:cardElevation="5dp"
+                    app:cardUseCompatPadding="true">
+                    <ImageView
+                        android:id="@+id/icon_fill_the_paragraph_ImageView"
+                        android:layout_width="50dp"
+                        android:layout_height="50dp"
+                        android:layout_gravity="center"
+                        android:src="@drawable/icon_fill_the_paragraph" />
+                </androidx.cardview.widget.CardView>
+
+                <TextView
+                    android:layout_width="wrap_content"
+                    android:layout_height="wrap_content"
+                    android:text="@string/fill_the_paragraph"
+                    android:fontFamily="@font/afacad_medium"
+                    android:textSize="16sp"
+                    android:paddingTop="2dp"
+                    android:gravity="center"
+                    android:textAlignment="center"
+                    android:layout_gravity="center_horizontal"/>
+            </LinearLayout>
+        </RelativeLayout>
+
+        <!-- Part 7 -->
+        <RelativeLayout
+            android:id="@+id/part7readingComprehensionSection"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:layout_below="@id/part56readingComprehensionSection"
+            android:layout_marginTop="15dp"
+            android:paddingLeft="16dp"
+            android:paddingRight="16dp">
+
+            <!-- Đoạn đơn -->
+            <LinearLayout
+                android:id="@+id/singleParagraphSection"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:layout_alignParentStart="true"
+                android:orientation="vertical">
+
+                <androidx.cardview.widget.CardView
+                    android:id="@+id/icon_single_paragraph_CardView"
+                    android:layout_width="90dp"
+                    android:layout_height="90dp"
+                    android:layout_marginTop="5dp"
+                    app:cardCornerRadius="10dp"
+                    app:cardElevation="5dp"
+                    app:cardUseCompatPadding="true">
+
+                    <ImageView
+                        android:id="@+id/icon_single_paragraph_ImageView"
+                        android:layout_width="50dp"
+                        android:layout_height="50dp"
+                        android:layout_gravity="center"
+                        android:src="@drawable/icon_single_paragraph" />
+                </androidx.cardview.widget.CardView>
+
+                <TextView
+                    android:layout_width="wrap_content"
+                    android:layout_height="wrap_content"
+                    android:text="@string/single_paragraph"
+                    android:paddingTop="2dp"
+                    android:fontFamily="@font/afacad_medium"
+                    android:textSize="16sp"
+                    android:gravity="center"
+                    android:textAlignment="center"
+                    android:layout_gravity="center_horizontal"/>
+            </LinearLayout>
+
+            <!-- Đoạn kép -->
+            <LinearLayout
+                android:id="@+id/doubleParagraphSection"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:layout_toEndOf="@id/singleParagraphSection"
+                android:layout_marginStart="7dp"
+                android:orientation="vertical"
+                android:gravity="center">
+
+                <androidx.cardview.widget.CardView
+                    android:id="@+id/icon_double_paragraph_CardView"
+                    android:layout_width="90dp"
+                    android:layout_height="90dp"
+                    android:layout_marginTop="5dp"
+                    app:cardCornerRadius="10dp"
+                    app:cardElevation="5dp"
+                    app:cardUseCompatPadding="true">
+                    <ImageView
+                        android:id="@+id/icon_double_paragraph_ImageView"
+                        android:layout_width="50dp"
+                        android:layout_height="50dp"
+                        android:layout_gravity="center"
+                        android:src="@drawable/icon_double_paragraph" />
+                </androidx.cardview.widget.CardView>
+
+                <TextView
+                    android:layout_width="wrap_content"
+                    android:layout_height="wrap_content"
+                    android:text="@string/double_paragraph"
+                    android:fontFamily="@font/afacad_medium"
+                    android:textSize="16sp"
+                    android:paddingTop="2dp"
+                    android:gravity="center"
+                    android:textAlignment="center"
+                    android:layout_gravity="center_horizontal"/>
+            </LinearLayout>
+
+            <!-- Đoạn tam -->
+            <LinearLayout
+                android:id="@+id/tripleParagraphSection"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:layout_toEndOf="@id/doubleParagraphSection"
+                android:layout_marginStart="7dp"
+                android:orientation="vertical"
+                android:gravity="center">
+
+                <androidx.cardview.widget.CardView
+                    android:id="@+id/icon_triple_paragraph_CardView"
+                    android:layout_width="90dp"
+                    android:layout_height="90dp"
+                    android:layout_marginTop="5dp"
+                    app:cardCornerRadius="10dp"
+                    app:cardElevation="5dp"
+                    app:cardUseCompatPadding="true">
+                    <ImageView
+                        android:id="@+id/icon_triple_paragraph_ImageView"
+                        android:layout_width="50dp"
+                        android:layout_height="50dp"
+                        android:layout_gravity="center"
+                        android:src="@drawable/icon_triple_paragraph" />
+                </androidx.cardview.widget.CardView>
+
+                <TextView
+                    android:layout_width="wrap_content"
+                    android:layout_height="wrap_content"
+                    android:text="@string/triple_paragraph"
+                    android:fontFamily="@font/afacad_medium"
+                    android:textSize="16sp"
+                    android:paddingTop="2dp"
+                    android:gravity="center"
+                    android:textAlignment="center"
+                    android:layout_gravity="center_horizontal"/>
+            </LinearLayout>
+        </RelativeLayout>
+    </RelativeLayout>
+</FrameLayout>
\ No newline at end of file
Index: app/src/main/java/com/example/astrolingo/activity/test/TestFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.astrolingo.activity.test;\r\n\r\nimport android.content.Intent;\r\nimport android.os.Bundle;\r\n\r\nimport androidx.fragment.app.Fragment;\r\n\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.GridLayout;\r\nimport android.widget.TextView;\r\n\r\nimport com.example.astrolingo.R;\r\n\r\npublic class TestFragment extends Fragment {\r\n    @Override\r\n    public void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n    }\r\n\r\n    @Override\r\n    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\r\n        View view = inflater.inflate(R.layout.fragment_test, container, false);\r\n\r\n        TextView fullTestTitle = view.findViewById(R.id.fullTestTitle);\r\n        TextView miniTestTitle = view.findViewById(R.id.miniTestTitle);\r\n        fullTestTitle.setText(\"TOEIC Listening & Reading FullTest | \" + 15);\r\n        miniTestTitle.setText(\"TOEIC Listening & Reading MiniTest | \" + 13);\r\n        populateTests(view.findViewById(R.id.fullTestGrid), 12, true);\r\n        populateTests(view.findViewById(R.id.miniTestGrid), 12, false);\r\n        return view;\r\n        // Inflate the layout for this fragment\r\n//        return inflater.inflate(R.layout.fragment_test, container, false);\r\n    }\r\n\r\n    private void populateTests(GridLayout gridlayout, int displayCount, boolean isFullTest){\r\n        LayoutInflater inflater = LayoutInflater.from(getContext());\r\n        gridlayout.removeAllViews();\r\n\r\n        for(int i = 0; i < displayCount; i++){\r\n            View itemView = inflater.inflate(R.layout.page_test_main_item, gridlayout, false);\r\n            TextView itemLabel = itemView.findViewById(R.id.itemLabel);\r\n\r\n            String itemLabel_FullTest = \"Test \" + (i + 1) + \"\\nETS 2024\";\r\n            String itemLabel_MiniTest = \"Test \" + (i + 1);\r\n\r\n            if(isFullTest){\r\n                itemLabel.setText(itemLabel_FullTest);\r\n            } else{\r\n                itemLabel.setText(itemLabel_MiniTest);\r\n            }\r\n\r\n            itemView.setOnClickListener(v ->{\r\n                Intent intent = new Intent(getContext(), TestDetailActivity.class);\r\n                intent.putExtra(\"testItem\", new PageTestMainItem(isFullTest ? itemLabel_FullTest : itemLabel_MiniTest, isFullTest));\r\n                /*\r\n                * Phương thức intent.putExtra(String key, Value value) trong Android được dùng để\r\n                * truyền dữ liệu từ một Activity (hoặc Fragment) này sang Activity (hoặc Fragment) khác thông qua Intent\r\n                * */\r\n                startActivity(intent);\r\n            });\r\n\r\n            gridlayout.addView(itemView);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void onResume() {\r\n        super.onResume();\r\n        // Cập nhật lại nội dung khi quay lại fragment\r\n        if (getView() != null) {\r\n            populateTests(getView().findViewById(R.id.fullTestGrid), 12, true);\r\n            populateTests(getView().findViewById(R.id.miniTestGrid), 12, false);\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/astrolingo/activity/test/TestFragment.java b/app/src/main/java/com/example/astrolingo/activity/test/TestFragment.java
--- a/app/src/main/java/com/example/astrolingo/activity/test/TestFragment.java	(revision ae433e1ac5ebbc2f83dc0bb022436f30fb4e6989)
+++ b/app/src/main/java/com/example/astrolingo/activity/test/TestFragment.java	(date 1748053216927)
@@ -21,6 +21,7 @@
 
     @Override
     public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
+        // Inflate the layout for this fragment
         View view = inflater.inflate(R.layout.fragment_test, container, false);
 
         TextView fullTestTitle = view.findViewById(R.id.fullTestTitle);
@@ -29,9 +30,8 @@
         miniTestTitle.setText("TOEIC Listening & Reading MiniTest | " + 13);
         populateTests(view.findViewById(R.id.fullTestGrid), 12, true);
         populateTests(view.findViewById(R.id.miniTestGrid), 12, false);
+
         return view;
-        // Inflate the layout for this fragment
-//        return inflater.inflate(R.layout.fragment_test, container, false);
     }
 
     private void populateTests(GridLayout gridlayout, int displayCount, boolean isFullTest){
Index: app/src/main/java/com/example/astrolingo/activity/setting/ChinhSuaHoSoActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/astrolingo/activity/setting/ChinhSuaHoSoActivity.java b/app/src/main/java/com/example/astrolingo/activity/setting/ChinhSuaHoSoActivity.java
new file mode 100644
--- /dev/null	(date 1748053216924)
+++ b/app/src/main/java/com/example/astrolingo/activity/setting/ChinhSuaHoSoActivity.java	(date 1748053216924)
@@ -0,0 +1,13 @@
+package com.example.astrolingo.activity.setting;
+
+import android.os.Bundle;
+import androidx.appcompat.app.AppCompatActivity;
+import com.example.astrolingo.R;
+
+public class ChinhSuaHoSoActivity extends AppCompatActivity {
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.page_setting_chinhsuahoso);
+    }
+}
Index: app/src/main/java/com/example/astrolingo/activity/home/HomeFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.astrolingo.activity.home;\r\n\r\nimport android.graphics.Paint;\r\nimport android.os.Bundle;\r\n\r\nimport androidx.fragment.app.Fragment;\r\n\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.TextView;\r\n\r\nimport com.example.astrolingo.R;\r\n\r\n\r\npublic class HomeFragment extends Fragment {\r\n\r\n    TextView leaderboard_seeMore;\r\n\r\n    @Override\r\n    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\r\n        // Inflate the layout for this fragment\r\n        View view = inflater.inflate(R.layout.fragment_home, container, false);\r\n\r\n        // init leaderboard\r\n        leaderboard_seeMore = view.findViewById(R.id.leaderboard_see_more);\r\n        leaderboard_seeMore.setPaintFlags(leaderboard_seeMore.getPaintFlags() | Paint.UNDERLINE_TEXT_FLAG);\r\n\r\n        return view;\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/astrolingo/activity/home/HomeFragment.java b/app/src/main/java/com/example/astrolingo/activity/home/HomeFragment.java
--- a/app/src/main/java/com/example/astrolingo/activity/home/HomeFragment.java	(revision ae433e1ac5ebbc2f83dc0bb022436f30fb4e6989)
+++ b/app/src/main/java/com/example/astrolingo/activity/home/HomeFragment.java	(date 1748053306410)
@@ -1,30 +1,31 @@
 package com.example.astrolingo.activity.home;
 
-import android.graphics.Paint;
+import android.content.Intent;
 import android.os.Bundle;
 
+import androidx.cardview.widget.CardView;
 import androidx.fragment.app.Fragment;
 
 import android.view.LayoutInflater;
 import android.view.View;
 import android.view.ViewGroup;
-import android.widget.TextView;
 
 import com.example.astrolingo.R;
+import com.example.astrolingo.activity.RetryWrongAnswerActivity;
 
 
 public class HomeFragment extends Fragment {
 
-    TextView leaderboard_seeMore;
-
     @Override
     public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
         // Inflate the layout for this fragment
         View view = inflater.inflate(R.layout.fragment_home, container, false);
 
-        // init leaderboard
-        leaderboard_seeMore = view.findViewById(R.id.leaderboard_see_more);
-        leaderboard_seeMore.setPaintFlags(leaderboard_seeMore.getPaintFlags() | Paint.UNDERLINE_TEXT_FLAG);
+        CardView cardview = view.findViewById(R.id.icon_wrong_answer_CardView);
+        cardview.setOnClickListener(v ->{
+           Intent intent = new Intent(getContext(), RetryWrongAnswerActivity.class);
+           startActivity(intent);
+        });
 
         return view;
     }
Index: gradle/libs.versions.toml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>[versions]\r\nagp = \"8.8.0\"\r\ncircleimageview = \"3.0.0\"\r\n\r\n#credentials = \"1.5.0\"\r\n#googleid = \"1.1.1\"\r\njunit = \"4.13.2\"\r\njunitVersion = \"1.2.1\"\r\nespressoCore = \"3.6.1\"\r\nappcompat = \"1.7.0\"\r\nmaterial = \"1.12.0\"\r\nactivity = \"1.10.1\"\r\nconstraintlayout = \"2.2.1\"\r\npicasso = \"2.5.2\"\r\n\r\npinview = \"1.4.4\"\r\nplayServicesAuth = \"21.3.0\"\r\nvolley = \"1.2.1\"\r\ncore = \"1.16.0\"\r\nannotations = \"15.0\"\r\n\r\n[libraries]\r\ncircleimageview = { module = \"de.hdodenhof:circleimageview\", version.ref = \"circleimageview\" }\r\n\r\n#credentials = { module = \"androidx.credentials:credentials\", version.ref = \"credentials\" }\r\n#credentials-play-services-auth = { module = \"androidx.credentials:credentials-play-services-auth\", version.ref = \"credentials\" }\r\n#googleid = { module = \"com.google.android.libraries.identity.googleid:googleid\", version.ref = \"googleid\" }\r\njunit = { group = \"junit\", name = \"junit\", version.ref = \"junit\" }\r\next-junit = { group = \"androidx.test.ext\", name = \"junit\", version.ref = \"junitVersion\" }\r\nespresso-core = { group = \"androidx.test.espresso\", name = \"espresso-core\", version.ref = \"espressoCore\" }\r\nappcompat = { group = \"androidx.appcompat\", name = \"appcompat\", version.ref = \"appcompat\" }\r\nmaterial = { group = \"com.google.android.material\", name = \"material\", version.ref = \"material\" }\r\nactivity = { group = \"androidx.activity\", name = \"activity\", version.ref = \"activity\" }\r\nconstraintlayout = { group = \"androidx.constraintlayout\", name = \"constraintlayout\", version.ref = \"constraintlayout\" }\r\n\r\nglide = { group = \"com.github.bumptech.glide\", name = \"glide\", version = \"4.16.0\"}\r\nglide-compiler = { group = \"com.github.bumptech.glide\", name = \"compiler\", version = \"4.16.0\"}\r\nglide-okhttp3 = { group = \"com.github.bumptech.glide\", name = \"okhttp3-integration\", version = \"4.16.0\"}\r\npicasso = { module = \"com.squareup.picasso:picasso\", version.ref = \"picasso\" }\r\n\r\npinview = { module = \"io.github.chaosleung:pinview\", version.ref = \"pinview\" }\r\nplay-services-auth = { module = \"com.google.android.gms:play-services-auth\", version.ref = \"playServicesAuth\" }\r\nvolley = { module = \"com.android.volley:volley\", version.ref = \"volley\" }\r\ncore = { group = \"androidx.core\", name = \"core\", version.ref = \"core\" }\r\nannotations = { group = \"org.jetbrains\", name = \"annotations\", version.ref = \"annotations\" }\r\n\r\n[plugins]\r\nandroid-application = { id = \"com.android.application\", version.ref = \"agp\" }\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/gradle/libs.versions.toml b/gradle/libs.versions.toml
--- a/gradle/libs.versions.toml	(revision ae433e1ac5ebbc2f83dc0bb022436f30fb4e6989)
+++ b/gradle/libs.versions.toml	(date 1748053216938)
@@ -1,5 +1,5 @@
 [versions]
-agp = "8.8.0"
+agp = "8.8.1"
 circleimageview = "3.0.0"
 
 #credentials = "1.5.0"
Index: app/src/main/java/com/example/astrolingo/activity/test/TestDetailActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.astrolingo.activity.test;\r\n\r\nimport android.content.Intent;\r\nimport android.os.Bundle;\r\nimport android.util.Log;\r\nimport android.widget.ImageView;\r\nimport android.widget.TextView;\r\n\r\nimport androidx.appcompat.app.AppCompatActivity;\r\n\r\nimport com.example.astrolingo.R;\r\n\r\npublic class TestDetailActivity extends AppCompatActivity {\r\n    private TextView testTitle, testTime, testQuestions;\r\n    private ImageView backIcon;\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState){\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.page_test_prepare_start_test);\r\n\r\n        testTitle = findViewById(R.id.testTitle);\r\n        testTime = findViewById(R.id.testTime);\r\n        testQuestions = findViewById(R.id.testQuestions);\r\n\r\n        PageTestMainItem test = (PageTestMainItem) getIntent().getSerializableExtra(\"testItem\");\r\n\r\n        if(test != null){\r\n            testTitle.setText(test.getTitle().replace(\"\\n\", \" \"));\r\n            testTime.setText(\"Thời gian: \" + test.getDurationMinutesOfTest() + \" phút\");\r\n            testQuestions.setText(\"Số câu hỏi: \" + test.getNumberOfQuestions());\r\n        }\r\n\r\n        backIcon = findViewById(R.id.backIcon);\r\n        backIcon.setOnClickListener(v ->{\r\n            Log.d(\"TestDetailActivity\", \"Back clicked - finishing activity\");\r\n            finish();\r\n//           startActivity(new Intent(TestDetailActivity.this, TestFragment.class));\r\n        });\r\n        //Xử lý sự kiện khi nhấn nút \"Bắt đầu nào\"\r\n//        Button startButton = findViewById(R.id.startButton);\r\n//        startButton.setOnClickListener(v -> {\r\n//            //Xử lý sự kiện khi nhấn nút \"Bắt đầu nào\"\r\n//        });\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/astrolingo/activity/test/TestDetailActivity.java b/app/src/main/java/com/example/astrolingo/activity/test/TestDetailActivity.java
--- a/app/src/main/java/com/example/astrolingo/activity/test/TestDetailActivity.java	(revision ae433e1ac5ebbc2f83dc0bb022436f30fb4e6989)
+++ b/app/src/main/java/com/example/astrolingo/activity/test/TestDetailActivity.java	(date 1748053216927)
@@ -35,7 +35,6 @@
         backIcon.setOnClickListener(v ->{
             Log.d("TestDetailActivity", "Back clicked - finishing activity");
             finish();
-//           startActivity(new Intent(TestDetailActivity.this, TestFragment.class));
         });
         //Xử lý sự kiện khi nhấn nút "Bắt đầu nào"
 //        Button startButton = findViewById(R.id.startButton);
Index: app/src/main/res/layout/fragment_test.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<FrameLayout\r\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\"\r\n    android:id=\"@+id/TestPage\"\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"match_parent\"\r\n    tools:context=\".activity.test.TestFragment\"\r\n    android:background=\"@color/green\">\r\n\r\n    <!-- Background cố định -->\r\n    <ImageView\r\n        android:id=\"@+id/fixed_background_testpage\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"match_parent\"\r\n        android:scaleType=\"centerCrop\"\r\n        android:src=\"@drawable/background4\" />\r\n    <ScrollView\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"match_parent\"\r\n        android:fillViewport=\"true\" >\r\n        <LinearLayout\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:id=\"@+id/fragment_test\"\r\n            android:orientation=\"vertical\">\r\n\r\n    <!--        FullTest session-->\r\n            <androidx.constraintlayout.widget.ConstraintLayout\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:paddingStart=\"10dp\"\r\n                android:paddingEnd=\"10dp\"\r\n                android:paddingTop=\"8dp\"\r\n                android:paddingBottom=\"8dp\">\r\n\r\n                <TextView\r\n                    android:id=\"@+id/fullTestTitle\"\r\n                    android:layout_width=\"wrap_content\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:text=\"TOEIC Listening Reading FullTest | 0\"\r\n                    android:textSize=\"18sp\"\r\n                    android:fontFamily=\"@font/afacad_bold\"\r\n                    android:textColor=\"@color/black\"\r\n                    app:layout_constraintStart_toStartOf=\"parent\"\r\n                    app:layout_constraintTop_toTopOf=\"parent\" />\r\n\r\n                <TextView\r\n                    android:id=\"@+id/fullTestSeeMore\"\r\n                    android:layout_width=\"wrap_content\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:text=\"Xem thêm\"\r\n                    android:textSize=\"16sp\"\r\n                    android:fontFamily=\"@font/afacad_regular\"\r\n                    android:textColor=\"#560088\"\r\n                    app:layout_constraintEnd_toEndOf=\"parent\"\r\n                    app:layout_constraintTop_toTopOf=\"parent\" />\r\n\r\n            </androidx.constraintlayout.widget.ConstraintLayout>\r\n\r\n            <GridLayout\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:id=\"@+id/fullTestGrid\"\r\n                android:columnCount=\"4\"\r\n                android:alignmentMode=\"alignMargins\"\r\n                android:rowCount=\"3\"\r\n                android:paddingHorizontal=\"16dp\"\r\n                android:useDefaultMargins=\"true\"/>\r\n\r\n    <!--        MiniTest session-->\r\n            <androidx.constraintlayout.widget.ConstraintLayout\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:paddingStart=\"10dp\"\r\n                android:paddingEnd=\"10dp\"\r\n                android:paddingTop=\"30dp\"\r\n                android:paddingBottom=\"8dp\">\r\n\r\n                <TextView\r\n                    android:id=\"@+id/miniTestTitle\"\r\n                    android:layout_width=\"wrap_content\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:text=\"TOEIC Listening Reading MiniTest | 0\"\r\n                    android:textSize=\"18sp\"\r\n                    android:fontFamily=\"@font/afacad_bold\"\r\n                    android:textColor=\"@color/black\"\r\n                    app:layout_constraintStart_toStartOf=\"parent\"\r\n                    app:layout_constraintTop_toTopOf=\"parent\" />\r\n\r\n                <TextView\r\n                    android:id=\"@+id/miniTestSeeMore\"\r\n                    android:layout_width=\"wrap_content\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:text=\"Xem thêm\"\r\n                    android:textSize=\"16sp\"\r\n                    android:fontFamily=\"@font/afacad_regular\"\r\n                    android:textColor=\"#560088\"\r\n                    app:layout_constraintEnd_toEndOf=\"parent\"\r\n                    app:layout_constraintTop_toTopOf=\"parent\" />\r\n\r\n            </androidx.constraintlayout.widget.ConstraintLayout>\r\n\r\n            <GridLayout\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:id=\"@+id/miniTestGrid\"\r\n                android:columnCount=\"4\"\r\n                android:alignmentMode=\"alignMargins\"\r\n                android:rowCount=\"3\"\r\n                android:paddingHorizontal=\"16dp\"\r\n                android:useDefaultMargins=\"true\"/>\r\n        </LinearLayout>\r\n    </ScrollView>\r\n</FrameLayout>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/fragment_test.xml b/app/src/main/res/layout/fragment_test.xml
--- a/app/src/main/res/layout/fragment_test.xml	(revision ae433e1ac5ebbc2f83dc0bb022436f30fb4e6989)
+++ b/app/src/main/res/layout/fragment_test.xml	(date 1748053216933)
@@ -39,7 +39,7 @@
                     android:id="@+id/fullTestTitle"
                     android:layout_width="wrap_content"
                     android:layout_height="wrap_content"
-                    android:text="TOEIC Listening Reading FullTest | 0"
+                    android:text="@string/fullTestTitle"
                     android:textSize="18sp"
                     android:fontFamily="@font/afacad_bold"
                     android:textColor="@color/black"
@@ -50,7 +50,7 @@
                     android:id="@+id/fullTestSeeMore"
                     android:layout_width="wrap_content"
                     android:layout_height="wrap_content"
-                    android:text="Xem thêm"
+                    android:text="@string/seemore"
                     android:textSize="16sp"
                     android:fontFamily="@font/afacad_regular"
                     android:textColor="#560088"
@@ -82,7 +82,7 @@
                     android:id="@+id/miniTestTitle"
                     android:layout_width="wrap_content"
                     android:layout_height="wrap_content"
-                    android:text="TOEIC Listening Reading MiniTest | 0"
+                    android:text="@string/miniTestTitle"
                     android:textSize="18sp"
                     android:fontFamily="@font/afacad_bold"
                     android:textColor="@color/black"
@@ -93,7 +93,7 @@
                     android:id="@+id/miniTestSeeMore"
                     android:layout_width="wrap_content"
                     android:layout_height="wrap_content"
-                    android:text="Xem thêm"
+                    android:text="@string/seemore"
                     android:textSize="16sp"
                     android:fontFamily="@font/afacad_regular"
                     android:textColor="#560088"
Index: app/src/main/res/values/strings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<resources>\r\n    <!--  Không được phép thay đổi dòng này  -->\r\n    <string name=\"api_key\" translatable=\"false\">http://10.0.2.2:3000/</string>\r\n\r\n    <string name=\"client_ID\" translatable=\"false\">377354537953-q2eg1baq8mvdggc5cb8jh6ouhq7osuo4.apps.googleusercontent.com</string>\r\n    <!-- - - - - - - - - - - - - - - - - - - -->\r\n\r\n    <string name=\"navHome\">Home</string>\r\n    <string name=\"navTest\">Test</string>\r\n    <string name=\"navCourse\">Course</string>\r\n    <string name=\"navAI\">AI</string>\r\n    <string name=\"navSetting\">Setting</string>\r\n\r\n    <string name=\"app_name\">AstroLingo</string>\r\n\r\n    <string name=\"homeFragment\" >Home Page</string>\r\n\r\n    <string name=\"testFragment\">Test Page</string>\r\n\r\n    <string name=\"courseFragment\">Course Page</string>\r\n\r\n    <string name=\"AiFragment\">AI Page</string>\r\n\r\n    <string name=\"settingFragment\">SettingPage</string>\r\n\r\n    <string name=\"copyright\">Copyright 2025 © AstroLingo</string>\r\n\r\n    <!-- Login, Register Page String  -->\r\n    <string name=\"next\">Next</string>\r\n    <string name=\"got_it\">Got it</string>\r\n    <string name=\"verifyEmail\">Verify Your Email</string>\r\n    <string name=\"verifyEmailCode\">Please Enter The 4 Digit Code Sent To Your Email!</string>\r\n    <string name=\"createNewPass\">Create New Password</string>\r\n    <string name=\"enterNewPass\">Enter your new Password!</string>\r\n\r\n    <string name=\"loginPage\">Login Page</string>\r\n    <string name=\"registerPage\">Register Page</string>\r\n    <string name=\"forgotPasswordPage\">Forgot Password</string>\r\n    <string name=\"loginWithUserName\">Enter your username or email <font color=\"#EB4B4B\">*</font> </string>\r\n    <string name=\"RegisterWithUserName\">Enter your username <font color=\"#EB4B4B\">*</font> </string>\r\n    <string name=\"loginWithPassword\">Enter your password <font color=\"#EB4B4B\">*</font> </string>\r\n    <string name=\"login\">Login</string>\r\n    <string name=\"register\">Register</string>\r\n    <string name=\"registerWithName\">Enter your name</string>\r\n    <string name=\"registerWithEmail\">Enter your email <font color=\"#EB4B4B\">*</font> </string>\r\n    <string name=\"registerWithTel\">Enter your telephone</string>\r\n    <string name=\"registerWithPassword\">Re-enter your password <font color=\"#EB4B4B\">*</font> </string>\r\n    <string name=\"forgotPassword\">Forgot password?</string>\r\n\r\n    <string name=\"loginRegister_rule\">\r\n        By logging into AstroLingo, you agree to our <font color=\"#5616BA\">Terms and Privacy Policy</font> <font color=\"#C70707\">*</font>\r\n    </string>\r\n\r\n    <string name=\"registerLogin_rule\">\r\n        By registering into AstroLingo, you agree to our <font color=\"#5616BA\">Terms and Privacy Policy</font> <font color=\"#C70707\">*</font>\r\n    </string>\r\n    <string name=\"have_account\">Do you have an account?</string>\r\n    <string name=\"dont_have_account\">Don\\'t you have an account?</string>\r\n\r\n    <string name=\"error_name_empty\">Name yield shouldn\\'t be empty!</string>\r\n    <string name=\"error_name_specialsympol\">Name yield shouldn\\'t have special symbol!</string>\r\n\r\n    <string name=\"error_username_empty\">Username yield shouldn\\'t be empty!</string>\r\n    <string name=\"error_username_specialsympol\">Username yield shouldn\\'t have special symbol or space!</string>\r\n\r\n    <string name=\"error_email_empty\">Email yield shouldn\\'t be empty!</string>\r\n    <string name=\"error_email_invalid\">Email yield isn\\'t valid!</string>\r\n    <string name=\"error_email_exist\">Email yield is already exist!</string>\r\n\r\n    <string name=\"error_telephone_empty\">Telephone yield shouldn\\'t be empty!</string>\r\n    <string name=\"error_telephone_invalid\">Telephone yield should start by 0 and have 10–11 digits!</string>\r\n\r\n    <string name=\"error_password_empty\">Password yield shouldn\\'t be empty!</string>\r\n    <string name=\"error_password_invalid\">Password yield shoundn\\'t be less than 8 characters!</string>\r\n\r\n    <string name=\"error_repassword_empty\">Re-password yield shouldn\\'t be empty!</string>\r\n    <string name=\"error_repassword_invalid\">Re-password yield isn\\'t match with password!</string>\r\n\r\n    <string name=\"error_login_empty\">Username or password yield shouldn\\'t be empty!</string>\r\n    <string name=\"error_login_invalid\">Username or password yield is invalid!</string>\r\n\r\n    <string name=\"error_digited_invalid\">Please enter 4 digits sent to your email!</string>\r\n\r\n    <string name=\"error_checkboxes\">You have to agree out term and privacy policy!</string>\r\n\r\n    <string name=\"tickRule\">You have to agree out term and privacy policy!</string>\r\n\r\n    <string name=\"verification_success\">Verification Success</string>\r\n    <string name=\"verification_success_detail\">Your email address was successfully verified.</string>\r\n\r\n    <string name=\"resetpassword_success\">Your password has been reset successfully.</string>\r\n\r\n    <string name=\"dont_get_email\">Didn\\'t you get e-mail?</string>\r\n    <string name=\"resend\">Send it again</string>\r\n\r\n\r\n    <!-- Setting Page String  -->\r\n    <!-- Setting Page String  -->\r\n    <string name=\"chinhsuahoso\">Edit Profile</string>\r\n    <string name=\"ngonngusudung\">Language</string>\r\n    <string name=\"giaodientoi\">Dark Mode</string>\r\n    <string name=\"hienthi\">Display</string>\r\n    <string name=\"nhacnhohoctap\">Study Reminder</string>\r\n    <string name=\"phanhoihotro\">Feedback and Support</string>\r\n    <string name=\"danhgia5sao\">Rate 5 Stars</string>\r\n    <string name=\"dieukhoansudung\">Terms of Use</string>\r\n    <string name=\"select_ngonngusudung\">English</string>\r\n    <string name=\"setting_dangxuat\">Log out</string>\r\n    <!-- Setting Page \"Chỉnh sửa hồ sơ\" String  -->\r\n    <string name=\"chinhsuahoso_name\">Anh Đào</string>\r\n    <string name=\"chinhsuahoso_email\">anhdao@gmai.com</string>\r\n    <string name=\"chinhsuahoso_sdt\">0123456789</string>\r\n    <string name=\"chinhsuahoso_date\">01/01/2004</string>\r\n    <string name=\"chinhsuahoso_gender\">Nữ</string>\r\n</resources>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/values/strings.xml b/app/src/main/res/values/strings.xml
--- a/app/src/main/res/values/strings.xml	(revision ae433e1ac5ebbc2f83dc0bb022436f30fb4e6989)
+++ b/app/src/main/res/values/strings.xml	(date 1748053216937)
@@ -113,4 +113,30 @@
     <string name="chinhsuahoso_sdt">0123456789</string>
     <string name="chinhsuahoso_date">01/01/2004</string>
     <string name="chinhsuahoso_gender">Nữ</string>
+
+    <!-- Giao diện Test Page khi nhấn vào icon Test ở navbar   -->
+    <string name="seemore">See more</string>
+    <string name="miniTestTitle">TOEIC Listening &amp; Reading MiniTest | </string>
+    <string name="fullTestTitle">TOEIC Listening &amp; Reading FullTest | </string>
+
+    <!-- Giao diện Chuẩn bị làm bài test có nút Bắt đầu nào  -->
+    <string name="startnow">Start Now</string>
+    <string name="number_of_questions">Number of Questions: 200</string>
+    <string name="test_time">Duration: 120 minutes</string>
+    <string name="testTitle">Test 10 ETS 2024</string>
+    <!-- Giao diện đầu tiên của trang Làm lại câu sai khi nhấn nút "Câu làm sai" ở HomePage-->
+    <string name="retry_wrong_answer">Retry Wrong Answers</string>
+
+    <string name="listening_comprehension">Listening Comprehension</string>
+    <string name="picture_description">Picture\nDescription</string>
+    <string name="ques_and_ans">Q&amp;A</string>
+    <string name="conversation">Conversation</string>
+    <string name="short_talk">Short Talk</string>
+
+    <string name="reading_comprehension">Reading Comprehension</string>
+    <string name="fill_the_blank">Fill the blank</string>
+    <string name="fill_the_paragraph">Complete\nParagraph</string>
+    <string name="single_paragraph">Single\nParagraph</string>
+    <string name="double_paragraph">Double\nParagraph</string>
+    <string name="triple_paragraph">Triple\nParagraph</string>
 </resources>
\ No newline at end of file
Index: app/src/main/java/com/example/astrolingo/activity/test/PageTestMainItem.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.astrolingo.activity.test;\r\n\r\nimport java.io.Serializable;\r\n\r\npublic class PageTestMainItem implements Serializable {\r\n    private String title;\r\n    private boolean isFullTest; //true là FullTest, false là MiniTest\r\n\r\n    public PageTestMainItem(String title, boolean isFullTest){\r\n        this.title = title;\r\n        this.isFullTest = isFullTest;\r\n    }\r\n\r\n    public String getTitle(){\r\n        return this.title;\r\n    }\r\n\r\n    public boolean isFullTest(){\r\n        return this.isFullTest;\r\n    }\r\n\r\n    public int getDurationMinutesOfTest(){\r\n        return this.isFullTest ? 120 : 60;\r\n    }\r\n\r\n    public int getNumberOfQuestions(){\r\n        return this.isFullTest ? 200 : 100;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/astrolingo/activity/test/PageTestMainItem.java b/app/src/main/java/com/example/astrolingo/activity/test/PageTestMainItem.java
--- a/app/src/main/java/com/example/astrolingo/activity/test/PageTestMainItem.java	(revision ae433e1ac5ebbc2f83dc0bb022436f30fb4e6989)
+++ b/app/src/main/java/com/example/astrolingo/activity/test/PageTestMainItem.java	(date 1748053216926)
@@ -2,6 +2,11 @@
 
 import java.io.Serializable;
 
+/*
+* Đây là một class Java đại diện cho một đối tượng có thể gửi giữa các Activity qua Intent
+* implements Serializable nghĩa là đang cho phép class này có thể được “chuyển thành chuỗi byte”, để truyền qua Intent
+* Nếu không implements Serializable, Android sẽ không biết cách truyền object đó giữa các Activity
+* */
 public class PageTestMainItem implements Serializable {
     private String title;
     private boolean isFullTest; //true là FullTest, false là MiniTest
Index: app/src/main/java/com/example/astrolingo/activity/SplashActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.astrolingo.activity;\r\n\r\nimport android.annotation.SuppressLint;\r\nimport android.content.Intent;\r\nimport android.content.SharedPreferences;\r\nimport android.os.Build;\r\nimport android.os.Bundle;\r\nimport android.os.Debug;\r\nimport android.util.Log;\r\nimport android.view.View;\r\nimport android.view.WindowManager;\r\nimport android.widget.ProgressBar;\r\nimport android.widget.Toast;\r\n\r\nimport androidx.activity.EdgeToEdge;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\n\r\nimport com.android.volley.AuthFailureError;\r\nimport com.android.volley.DefaultRetryPolicy;\r\nimport com.android.volley.NetworkResponse;\r\nimport com.android.volley.Request;\r\nimport com.android.volley.RequestQueue;\r\nimport com.android.volley.Response;\r\nimport com.android.volley.RetryPolicy;\r\nimport com.android.volley.ServerError;\r\nimport com.android.volley.VolleyError;\r\nimport com.android.volley.toolbox.HttpHeaderParser;\r\nimport com.android.volley.toolbox.JsonObjectRequest;\r\nimport com.android.volley.toolbox.Volley;\r\nimport com.example.astrolingo.R;\r\nimport com.example.astrolingo.Service.SharedPreferenceClass;\r\n\r\nimport org.json.JSONException;\r\nimport org.json.JSONObject;\r\n\r\nimport java.io.UnsupportedEncodingException;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\nimport java.util.Objects;\r\n\r\n@SuppressLint(\"CustomSplashScreen\")\r\npublic class SplashActivity extends AppCompatActivity {\r\n\r\n    ProgressBar progressBar;\r\n    SharedPreferenceClass sharedPreClass;\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        EdgeToEdge.enable(this);\r\n        setContentView(R.layout.loginregister_load);\r\n\r\n        progressBar = findViewById(R.id.progressBar);\r\n        sharedPreClass = new SharedPreferenceClass(this);\r\n\r\n        sharedPreClass.setValue_string(\"user_id\", \"null\");\r\n\r\n        if(Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\r\n            getWindow().setFlags(WindowManager.LayoutParams.FLAG_LAYOUT_NO_LIMITS, WindowManager.LayoutParams.FLAG_LAYOUT_NO_LIMITS);\r\n        }\r\n\r\n    }\r\n\r\n    protected void VerifyToken() {\r\n        if(!sharedPreClass.contains(\"token\")) {\r\n            startActivity(new Intent(SplashActivity.this, LoginActivity.class));\r\n        }\r\n\r\n        String apiRegister = getString(R.string.api_key) + \"api/auth/verify\";\r\n\r\n        JsonObjectRequest jsonObjectRequest = new JsonObjectRequest(Request.Method.GET, apiRegister,\r\n                null,\r\n                new Response.Listener<JSONObject>() {\r\n                    @Override\r\n                    public void onResponse(JSONObject response) {\r\n                        try {\r\n                            if(response.getBoolean(\"success\")) {\r\n                                String user_id = response.getString(\"user_id\");\r\n\r\n                                sharedPreClass.setValue_string(\"user_id\", user_id);\r\n\r\n                                Log.e(\"success?\", \"success?\");\r\n\r\n                                // Toast.makeText(RegisterActivity.this, token, Toast.LENGTH_SHORT).show();\r\n                                startActivity(new Intent(SplashActivity.this, MainActivity.class));\r\n                            }\r\n                            else\r\n                                startActivity(new Intent(SplashActivity.this, LoginActivity.class));\r\n                            // progressBar.setVisibility(View.GONE);\r\n                        } catch (JSONException je) {\r\n                            je.printStackTrace();\r\n                            // progressBar.setVisibility(View.GONE);\r\n\r\n                            startActivity(new Intent(SplashActivity.this, LoginActivity.class));\r\n                        }\r\n                    }\r\n                },\r\n                new Response.ErrorListener() {\r\n                    @Override\r\n                    public void onErrorResponse(VolleyError error) {\r\n                        // Toast.makeText(SplashActivity.this, error.toString(), Toast.LENGTH_SHORT).show();\r\n\r\n                        startActivity(new Intent(SplashActivity.this, LoginActivity.class));\r\n                    }\r\n                }) {\r\n            @Override\r\n            public Map<String, String> getHeaders() throws AuthFailureError {\r\n                HashMap<String, String> headers = new HashMap<>();\r\n                headers.put(\"Authorization\", sharedPreClass.getValue_string(\"token\"));\r\n                return headers;\r\n            }\r\n        };\r\n\r\n        // set retry policy\r\n        int socketTime = 3000;\r\n        RetryPolicy policy = new DefaultRetryPolicy(socketTime,\r\n                DefaultRetryPolicy.DEFAULT_MAX_RETRIES, DefaultRetryPolicy.DEFAULT_BACKOFF_MULT);\r\n        jsonObjectRequest.setRetryPolicy(policy);\r\n\r\n        RequestQueue requestQueue = Volley.newRequestQueue(this);\r\n        requestQueue.add(jsonObjectRequest);\r\n    }\r\n\r\n    @Override\r\n    protected void onResume() {\r\n        super.onResume();\r\n\r\n        Thread thread = new Thread() {\r\n            public void run() {\r\n                try {\r\n                    sleep(1500);\r\n\r\n                    if(SharedPreferenceClass.isAllowToken) {\r\n//                        if(!Objects.equals(sharedPreClass.getValue_string(\"user_id\"), \"null\")) {\r\n//                            startActivity(new Intent(SplashActivity.this, MainActivity.class));\r\n//                        }\r\n//                        else {\r\n//                            startActivity(new Intent(SplashActivity.this, LoginActivity.class));\r\n//                        }\r\n\r\n                        VerifyToken();\r\n                    }\r\n                    else {\r\n                        startActivity(new Intent(SplashActivity.this, LoginActivity.class));\r\n                    }\r\n\r\n                } catch (InterruptedException e) {\r\n                    e.printStackTrace();\r\n\r\n                    startActivity(new Intent(SplashActivity.this, LoginActivity.class));\r\n                }\r\n            }\r\n        };\r\n\r\n        thread.start();\r\n\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/astrolingo/activity/SplashActivity.java b/app/src/main/java/com/example/astrolingo/activity/SplashActivity.java
--- a/app/src/main/java/com/example/astrolingo/activity/SplashActivity.java	(revision ae433e1ac5ebbc2f83dc0bb022436f30fb4e6989)
+++ b/app/src/main/java/com/example/astrolingo/activity/SplashActivity.java	(date 1748053216923)
@@ -156,4 +156,5 @@
 
     }
 
+
 }
Index: app/src/main/java/com/example/astrolingo/activity/setting/SettingFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.astrolingo.activity.setting;\r\n\r\nimport android.os.Bundle;\r\n\r\nimport androidx.fragment.app.Fragment;\r\n\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\n\r\nimport com.example.astrolingo.R;\r\n\r\npublic class SettingFragment extends Fragment {\r\n\r\n    @Override\r\n    public void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n    }\r\n\r\n    @Override\r\n    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\r\n        // Inflate the layout for this fragment\r\n        return inflater.inflate(R.layout.fragment_setting, container, false);\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/astrolingo/activity/setting/SettingFragment.java b/app/src/main/java/com/example/astrolingo/activity/setting/SettingFragment.java
--- a/app/src/main/java/com/example/astrolingo/activity/setting/SettingFragment.java	(revision ae433e1ac5ebbc2f83dc0bb022436f30fb4e6989)
+++ b/app/src/main/java/com/example/astrolingo/activity/setting/SettingFragment.java	(date 1748053216924)
@@ -1,12 +1,17 @@
 package com.example.astrolingo.activity.setting;
 
+import android.animation.ArgbEvaluator;
+import android.animation.ObjectAnimator;
+import android.animation.ValueAnimator;
+import android.content.Intent;
+import android.graphics.Color;
 import android.os.Bundle;
-
-import androidx.fragment.app.Fragment;
-
 import android.view.LayoutInflater;
 import android.view.View;
 import android.view.ViewGroup;
+import android.widget.LinearLayout;
+
+import androidx.fragment.app.Fragment;
 
 import com.example.astrolingo.R;
 
@@ -19,7 +24,24 @@
 
     @Override
     public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
-        // Inflate the layout for this fragment
-        return inflater.inflate(R.layout.fragment_setting, container, false);
+        // Inflate layout page_setting vào fragment
+        View view = inflater.inflate(R.layout.page_setting, container, false);
+
+        // Gán sự kiện click cho nút "Chỉnh sửa hồ sơ"
+        LinearLayout btnChinhSuaHoSo = view.findViewById(R.id.btnChinhSuaHoSo);
+        btnChinhSuaHoSo.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                // Đổi màu nền của nút
+                btnChinhSuaHoSo.setBackgroundColor(Color.parseColor("#9F7EFF"));
+
+
+                // Mở activity ChinhSuaHoSoActivity
+                Intent intent = new Intent(getActivity(), ChinhSuaHoSoActivity.class);
+                startActivity(intent);
+            }
+        });
+
+        return view;
     }
-}
\ No newline at end of file
+}
Index: app/src/main/AndroidManifest.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\">\r\n\r\n    <uses-permission android:name=\"android.permission.INTERNET\"/>\r\n    <uses-permission android:name=\"android.permission.MANAGE_EXTERNAL_STORAGE\" />\r\n\r\n    <application\r\n        android:networkSecurityConfig=\"@xml/network_security_config\"\r\n        android:allowBackup=\"true\"\r\n        android:dataExtractionRules=\"@xml/data_extraction_rules\"\r\n        android:fullBackupContent=\"@xml/backup_rules\"\r\n        android:icon=\"@mipmap/ic_launcher\"\r\n        android:label=\"@string/app_name\"\r\n        android:roundIcon=\"@mipmap/ic_launcher_round\"\r\n        android:supportsRtl=\"true\"\r\n        android:theme=\"@style/Theme.AstroLingo\"\r\n        tools:targetApi=\"31\">\r\n        <activity\r\n            android:name=\".activity.SplashActivity\"\r\n            android:exported=\"true\">\r\n            <intent-filter>\r\n                <action android:name=\"android.intent.action.MAIN\" />\r\n\r\n                <category android:name=\"android.intent.category.LAUNCHER\" />\r\n            </intent-filter>\r\n        </activity>\r\n        <activity android:name=\".activity.ForgotPasswordActivity\" />\r\n        <activity android:name=\".activity.ForgotPassword_VerifyEmailActivity\" />\r\n        <activity android:name=\".activity.ForgotPassword_NewPassword\" />\r\n        <activity android:name=\".activity.LoginActivity\" />\r\n        <activity android:name=\".activity.MainActivity\" />\r\n        <activity android:name=\".activity.Register_VerifyEmailActivity\" />\r\n        <activity android:name=\".activity.RegisterActivity\" />\r\n        <activity android:name=\".activity.SuccessActivity\" />\r\n        <activity android:name=\".activity.test.TestDetailActivity\" />\r\n    </application>\r\n\r\n</manifest>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/AndroidManifest.xml b/app/src/main/AndroidManifest.xml
--- a/app/src/main/AndroidManifest.xml	(revision ae433e1ac5ebbc2f83dc0bb022436f30fb4e6989)
+++ b/app/src/main/AndroidManifest.xml	(date 1748053216922)
@@ -33,7 +33,16 @@
         <activity android:name=".activity.Register_VerifyEmailActivity" />
         <activity android:name=".activity.RegisterActivity" />
         <activity android:name=".activity.SuccessActivity" />
+
         <activity android:name=".activity.test.TestDetailActivity" />
+
+        <activity android:name=".activity.RetryWrongAnswerActivity"/>
+
+        <activity android:name=".activity.setting.SettingActivity" />
+        <activity android:name=".activity.setting.ChinhSuaHoSoActivity" />
+
+
+
     </application>
 
 </manifest>
\ No newline at end of file
